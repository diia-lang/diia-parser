
// Generated from MavkaParser.g4 by ANTLR 4.13.0


#include "MavkaParserListener.h"
#include "MavkaParserVisitor.h"

#include "MavkaParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct MavkaParserStaticData final {
  MavkaParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  MavkaParserStaticData(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData(MavkaParserStaticData&&) = delete;
  MavkaParserStaticData& operator=(const MavkaParserStaticData&) = delete;
  MavkaParserStaticData& operator=(MavkaParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag mavkaparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
MavkaParserStaticData *mavkaparserParserStaticData = nullptr;

void mavkaparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (mavkaparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(mavkaparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<MavkaParserStaticData>(
    std::vector<std::string>{
      "nl", "nls", "number_token", "string", "identifier", "file", "program", 
      "program_element", "module", "module_body", "module_body_element", 
      "structure", "structure_elements", "structure_element", "structure_param", 
      "generics", "mockup", "mockup_module", "mockup_module_body", "mockup_structure", 
      "mockup_structure_body", "mockup_structure_body_element", "mockup_diia", 
      "mockup_subject", "diia", "if", "each", "fromto", "fromto_simple", 
      "fromto_complex", "fromto_value", "fromto_middle_symbol", "fromto_to_symbol", 
      "while", "try", "take", "take_elements", "take_element", "give", "give_element", 
      "mrm", "mrm_element", "mrm_element_closed", "mrm_args", "mrm_arg", 
      "mrm_content", "mrm_chardata", "mrm_diia", "atom", "value", "call_generics", 
      "array_elements", "array_element", "dictionary_args", "dictionary_arg", 
      "expr", "throw", "assign", "assign_simple", "assign_by_identifier", 
      "assign_by_element", "assign_symbol", "wait_assign", "identifiers_chain", 
      "super_identifiers_chain", "type_value", "type_value_item", "type_value_item_simple", 
      "type_value_item_generics", "type_value_item_array", "args", "arg", 
      "named_args", "named_arg", "params", "param", "param_value", "body", 
      "body_element_or_return", "body_element", "return_body_line", "arithmetic_op_mul", 
      "arithmetic_op_add", "bitwise_op", "test_op", "comparison_op", "comp_inst_block_program", 
      "comp_inst_assign"
    },
    std::vector<std::string>{
      "", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", "'\\u0434\\u0456\\u044F'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A\\u0449\\u043E'", "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
      "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0434\\u0430\\u0442\\u0438'", 
      "'\\u044F\\u043A'", "'\\u0442\\u0430'", "'\\u0454'", "'\\u0441\\u043F\\u0435\\u0446'", 
      "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", 
      "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", "'\\u0456'", 
      "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
      "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
      "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", "'\\u043F\\u043E\\u043A\\u0438'", 
      "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
      "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", "'\\u043C\\u0435\\u043D\\u0448\\u0435'", 
      "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", 
      "'\\u043D\\u0435'", "'\\u043F\\u0440\\u0435\\u0434\\u043E\\u043A'", 
      "'\\u0446\\u0435'", "'='", "'>'", "'<'", "'.'", "'+'", "'-'", "'*'", 
      "'/'", "'%'", "'^'", "'&'", "'|'", "'('", "')'", "'['", "']'", "'\\u003F'", 
      "':'", "'~'", "'''", "'\"'", "'!'", "','"
    },
    std::vector<std::string>{
      "", "KW_END", "KW_DIIA", "KW_STRUCTURE", "KW_FOR", "KW_IF", "KW_WAIT", 
      "KW_TAKE", "KW_GIVE", "KW_AS", "KW_TA", "KW_IS", "KW_SPEC", "KW_RETURN", 
      "KW_ASYNC", "KW_SUBJECT", "KW_AND", "KW_OR", "KW_TRY", "KW_CATCH", 
      "KW_ELSE", "KW_THROW", "KW_WHILE", "KW_MODULE", "KW_EQ_WORD", "KW_GR_WORD", 
      "KW_SM_WORD", "KW_HAS_IS_WORD", "KW_MOCKUP", "KW_NOT", "KW_PARENT", 
      "KW_TSE", "EQUAL", "GREATER", "LESSER", "DOT", "PLUS", "MINUS", "MULTIPLY", 
      "DIVIDE", "MOD", "POWER", "AND", "OR", "PAREN_OPEN", "PAREN_CLOSE", 
      "BRACKET_OPEN", "BRACKET_CLOSE", "QUESTION", "COLON", "TILDA", "QUOTE", 
      "DOUBLE_QUOTE", "EXCLAMATION", "COMA", "INTEGER", "FLOAT", "HEX", 
      "BIN", "NUMBER", "ID", "KWID", "STRING_MULTILINE", "STRING", "COMP_INST_START", 
      "COMP_INST_END", "COMP_INST_ASSIGN", "COMMENT", "LINE_COMMENT", "MRM_DIIA", 
      "NL", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,71,1234,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
  	7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,
  	14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,
  	21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,
  	28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,
  	35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,
  	42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,
  	49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,
  	56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
  	63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,
  	70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,
  	77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
  	84,2,85,7,85,2,86,7,86,2,87,7,87,1,0,4,0,178,8,0,11,0,12,0,179,1,1,5,
  	1,183,8,1,10,1,12,1,186,9,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,6,1,
  	6,1,6,1,6,5,6,201,8,6,10,6,12,6,204,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
  	7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,223,8,7,1,8,1,8,3,8,227,8,8,
  	1,8,1,8,1,8,1,8,3,8,233,8,8,1,8,1,8,1,9,1,9,1,9,1,9,5,9,241,8,9,10,9,
  	12,9,244,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
  	10,1,10,1,10,3,10,260,8,10,1,11,1,11,1,11,1,11,1,11,1,11,3,11,268,8,11,
  	1,11,1,11,1,11,1,11,1,11,1,11,3,11,276,8,11,3,11,278,8,11,1,11,1,11,1,
  	11,1,11,3,11,284,8,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,293,8,12,
  	10,12,12,12,296,9,12,1,13,1,13,1,14,3,14,301,8,14,1,14,1,14,3,14,305,
  	8,14,1,14,1,14,3,14,309,8,14,1,15,1,15,1,15,5,15,314,8,15,10,15,12,15,
  	317,9,15,1,16,1,16,1,16,1,16,3,16,323,8,16,1,17,1,17,1,17,1,17,1,17,1,
  	17,1,17,3,17,332,8,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,340,8,18,10,
  	18,12,18,343,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,352,8,19,1,
  	19,1,19,1,19,1,19,1,19,1,19,3,19,360,8,19,3,19,362,8,19,1,19,1,19,1,19,
  	1,19,3,19,368,8,19,1,19,1,19,1,20,1,20,1,20,1,20,5,20,376,8,20,10,20,
  	12,20,379,9,20,1,21,1,21,1,22,1,22,3,22,385,8,22,1,22,3,22,388,8,22,1,
  	22,1,22,1,22,1,22,3,22,394,8,22,1,22,1,22,1,22,1,22,1,22,3,22,401,8,22,
  	1,22,1,22,1,22,3,22,406,8,22,1,22,1,22,1,22,3,22,411,8,22,1,23,1,23,1,
  	23,1,23,1,23,1,24,3,24,419,8,24,1,24,3,24,422,8,24,1,24,1,24,1,24,1,24,
  	3,24,428,8,24,1,24,3,24,431,8,24,1,24,1,24,1,24,1,24,3,24,437,8,24,1,
  	24,1,24,1,24,3,24,442,8,24,1,24,1,24,1,24,3,24,447,8,24,1,24,1,24,1,24,
  	1,24,3,24,453,8,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,3,25,463,8,
  	25,1,25,1,25,1,25,1,25,1,25,3,25,470,8,25,1,25,1,25,1,25,3,25,475,8,25,
  	1,26,1,26,1,26,3,26,480,8,26,1,26,1,26,1,26,1,26,3,26,486,8,26,1,26,3,
  	26,489,8,26,1,26,1,26,1,26,1,26,3,26,495,8,26,1,26,1,26,1,27,1,27,3,27,
  	501,8,27,1,28,1,28,1,28,1,28,3,28,507,8,28,1,28,1,28,1,29,1,29,1,29,1,
  	29,3,29,515,8,29,1,29,1,29,1,29,1,29,3,29,521,8,29,1,29,1,29,1,30,1,30,
  	1,30,1,30,1,30,1,30,1,30,1,30,3,30,533,8,30,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,3,31,544,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,32,3,32,556,8,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,564,8,
  	33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,3,34,573,8,34,1,34,1,34,3,34,577,
  	8,34,1,34,1,34,1,34,1,34,3,34,583,8,34,1,34,1,34,1,35,1,35,3,35,589,8,
  	35,1,35,3,35,592,8,35,1,35,1,35,1,35,1,35,3,35,598,8,35,1,36,1,36,1,36,
  	1,36,5,36,604,8,36,10,36,12,36,607,9,36,1,36,1,36,1,37,1,37,1,37,3,37,
  	614,8,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,38,623,8,38,10,38,12,38,
  	626,9,38,1,39,1,39,1,39,3,39,631,8,39,1,40,1,40,1,40,3,40,636,8,40,1,
  	41,1,41,1,41,1,41,1,41,3,41,643,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,3,42,660,8,42,1,42,1,42,1,
  	42,1,42,1,43,1,43,1,43,1,43,5,43,670,8,43,10,43,12,43,673,9,43,1,44,1,
  	44,1,44,1,44,1,45,3,45,680,8,45,1,45,1,45,3,45,684,8,45,5,45,686,8,45,
  	10,45,12,45,689,9,45,1,46,4,46,692,8,46,11,46,12,46,693,1,47,1,47,1,48,
  	1,48,1,48,1,48,1,48,1,48,1,48,3,48,705,8,48,1,48,1,48,1,48,1,48,1,48,
  	1,48,3,48,713,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
  	1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
  	738,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,
  	751,8,48,1,48,1,48,1,48,1,48,3,48,757,8,48,1,48,1,48,1,48,1,48,1,48,1,
  	48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,775,8,48,10,
  	48,12,48,778,9,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,813,8,49,10,49,12,49,
  	816,9,49,1,50,1,50,1,50,5,50,821,8,50,10,50,12,50,824,9,50,1,51,1,51,
  	1,51,1,51,1,51,1,51,5,51,832,8,51,10,51,12,51,835,9,51,1,52,1,52,1,53,
  	1,53,1,53,1,53,1,53,1,53,5,53,845,8,53,10,53,12,53,848,9,53,1,54,1,54,
  	3,54,852,8,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
  	1,55,3,55,866,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
  	1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,4,55,889,8,55,
  	11,55,12,55,890,1,55,1,55,1,55,3,55,896,8,55,1,55,1,55,1,55,3,55,901,
  	8,55,1,55,1,55,1,55,3,55,906,8,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
  	914,8,55,1,56,1,56,1,56,1,57,1,57,1,57,3,57,922,8,57,1,58,3,58,925,8,
  	58,1,58,1,58,3,58,929,8,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,
  	59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,
  	61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,992,8,61,1,
  	62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,5,63,1006,8,
  	63,10,63,12,63,1009,9,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,1,64,
  	1,64,1,64,1,64,1,64,1,64,1,64,1,64,5,64,1027,8,64,10,64,12,64,1030,9,
  	64,1,65,1,65,1,65,5,65,1035,8,65,10,65,12,65,1038,9,65,1,66,1,66,3,66,
  	1042,8,66,1,67,1,67,1,67,1,67,1,67,3,67,1049,8,67,1,68,1,68,1,68,5,68,
  	1054,8,68,10,68,12,68,1057,9,68,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,
  	70,1,70,1,70,5,70,1069,8,70,10,70,12,70,1072,9,70,1,71,1,71,1,72,1,72,
  	1,72,1,72,1,72,1,72,5,72,1082,8,72,10,72,12,72,1085,9,72,1,73,1,73,1,
  	73,1,73,1,74,1,74,1,74,1,74,1,74,1,74,5,74,1097,8,74,10,74,12,74,1100,
  	9,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1110,8,74,3,74,1112,
  	8,74,1,74,1,74,1,74,1,74,1,74,3,74,1119,8,74,3,74,1121,8,74,1,75,1,75,
  	3,75,1125,8,75,1,75,1,75,3,75,1129,8,75,1,76,1,76,1,76,1,76,1,76,1,76,
  	1,76,3,76,1138,8,76,1,77,1,77,1,77,1,77,5,77,1144,8,77,10,77,12,77,1147,
  	9,77,1,78,1,78,3,78,1151,8,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
  	1,79,3,79,1162,8,79,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
  	3,81,1174,8,81,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1185,
  	8,83,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1193,8,84,1,85,1,85,1,85,1,85,
  	1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
  	1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1220,8,85,1,86,1,86,1,86,1,86,
  	1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,0,4,96,98,126,128,88,0,2,
  	4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
  	52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,
  	98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
  	134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,
  	170,172,174,0,5,1,0,55,58,1,0,62,63,2,0,34,34,69,69,2,0,17,17,43,43,1,
  	0,36,37,1379,0,177,1,0,0,0,2,184,1,0,0,0,4,187,1,0,0,0,6,189,1,0,0,0,
  	8,191,1,0,0,0,10,193,1,0,0,0,12,196,1,0,0,0,14,222,1,0,0,0,16,224,1,0,
  	0,0,18,236,1,0,0,0,20,259,1,0,0,0,22,261,1,0,0,0,24,288,1,0,0,0,26,297,
  	1,0,0,0,28,300,1,0,0,0,30,310,1,0,0,0,32,322,1,0,0,0,34,324,1,0,0,0,36,
  	335,1,0,0,0,38,344,1,0,0,0,40,371,1,0,0,0,42,380,1,0,0,0,44,382,1,0,0,
  	0,46,412,1,0,0,0,48,418,1,0,0,0,50,456,1,0,0,0,52,476,1,0,0,0,54,500,
  	1,0,0,0,56,502,1,0,0,0,58,510,1,0,0,0,60,532,1,0,0,0,62,543,1,0,0,0,64,
  	555,1,0,0,0,66,557,1,0,0,0,68,567,1,0,0,0,70,586,1,0,0,0,72,599,1,0,0,
  	0,74,610,1,0,0,0,76,615,1,0,0,0,78,627,1,0,0,0,80,635,1,0,0,0,82,637,
  	1,0,0,0,84,654,1,0,0,0,86,665,1,0,0,0,88,674,1,0,0,0,90,679,1,0,0,0,92,
  	691,1,0,0,0,94,695,1,0,0,0,96,737,1,0,0,0,98,779,1,0,0,0,100,817,1,0,
  	0,0,102,825,1,0,0,0,104,836,1,0,0,0,106,838,1,0,0,0,108,851,1,0,0,0,110,
  	913,1,0,0,0,112,915,1,0,0,0,114,921,1,0,0,0,116,924,1,0,0,0,118,933,1,
  	0,0,0,120,941,1,0,0,0,122,991,1,0,0,0,124,993,1,0,0,0,126,996,1,0,0,0,
  	128,1010,1,0,0,0,130,1031,1,0,0,0,132,1041,1,0,0,0,134,1043,1,0,0,0,136,
  	1050,1,0,0,0,138,1058,1,0,0,0,140,1062,1,0,0,0,142,1073,1,0,0,0,144,1075,
  	1,0,0,0,146,1086,1,0,0,0,148,1120,1,0,0,0,150,1122,1,0,0,0,152,1137,1,
  	0,0,0,154,1139,1,0,0,0,156,1150,1,0,0,0,158,1161,1,0,0,0,160,1163,1,0,
  	0,0,162,1173,1,0,0,0,164,1175,1,0,0,0,166,1184,1,0,0,0,168,1192,1,0,0,
  	0,170,1219,1,0,0,0,172,1221,1,0,0,0,174,1229,1,0,0,0,176,178,5,70,0,0,
  	177,176,1,0,0,0,178,179,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,1,
  	1,0,0,0,181,183,5,70,0,0,182,181,1,0,0,0,183,186,1,0,0,0,184,182,1,0,
  	0,0,184,185,1,0,0,0,185,3,1,0,0,0,186,184,1,0,0,0,187,188,7,0,0,0,188,
  	5,1,0,0,0,189,190,7,1,0,0,190,7,1,0,0,0,191,192,5,60,0,0,192,9,1,0,0,
  	0,193,194,3,12,6,0,194,195,5,0,0,1,195,11,1,0,0,0,196,202,3,14,7,0,197,
  	198,3,0,0,0,198,199,3,14,7,0,199,201,1,0,0,0,200,197,1,0,0,0,201,204,
  	1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,13,1,0,0,0,204,202,1,0,0,
  	0,205,223,3,16,8,0,206,223,3,22,11,0,207,223,3,32,16,0,208,223,3,48,24,
  	0,209,223,3,50,25,0,210,223,3,52,26,0,211,223,3,66,33,0,212,223,3,68,
  	34,0,213,223,3,110,55,0,214,223,3,112,56,0,215,223,3,124,62,0,216,223,
  	3,114,57,0,217,223,3,70,35,0,218,223,3,76,38,0,219,223,3,172,86,0,220,
  	223,3,174,87,0,221,223,3,2,1,0,222,205,1,0,0,0,222,206,1,0,0,0,222,207,
  	1,0,0,0,222,208,1,0,0,0,222,209,1,0,0,0,222,210,1,0,0,0,222,211,1,0,0,
  	0,222,212,1,0,0,0,222,213,1,0,0,0,222,214,1,0,0,0,222,215,1,0,0,0,222,
  	216,1,0,0,0,222,217,1,0,0,0,222,218,1,0,0,0,222,219,1,0,0,0,222,220,1,
  	0,0,0,222,221,1,0,0,0,223,15,1,0,0,0,224,226,5,23,0,0,225,227,3,8,4,0,
  	226,225,1,0,0,0,226,227,1,0,0,0,227,228,1,0,0,0,228,232,3,0,0,0,229,230,
  	3,18,9,0,230,231,3,0,0,0,231,233,1,0,0,0,232,229,1,0,0,0,232,233,1,0,
  	0,0,233,234,1,0,0,0,234,235,5,1,0,0,235,17,1,0,0,0,236,242,3,20,10,0,
  	237,238,3,0,0,0,238,239,3,20,10,0,239,241,1,0,0,0,240,237,1,0,0,0,241,
  	244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,19,1,0,0,0,244,242,1,
  	0,0,0,245,260,3,16,8,0,246,260,3,22,11,0,247,260,3,32,16,0,248,260,3,
  	48,24,0,249,260,3,50,25,0,250,260,3,52,26,0,251,260,3,66,33,0,252,260,
  	3,68,34,0,253,260,3,110,55,0,254,260,3,112,56,0,255,260,3,124,62,0,256,
  	260,3,114,57,0,257,260,3,76,38,0,258,260,3,2,1,0,259,245,1,0,0,0,259,
  	246,1,0,0,0,259,247,1,0,0,0,259,248,1,0,0,0,259,249,1,0,0,0,259,250,1,
  	0,0,0,259,251,1,0,0,0,259,252,1,0,0,0,259,253,1,0,0,0,259,254,1,0,0,0,
  	259,255,1,0,0,0,259,256,1,0,0,0,259,257,1,0,0,0,259,258,1,0,0,0,260,21,
  	1,0,0,0,261,262,5,3,0,0,262,267,3,8,4,0,263,264,5,34,0,0,264,265,3,30,
  	15,0,265,266,5,33,0,0,266,268,1,0,0,0,267,263,1,0,0,0,267,268,1,0,0,0,
  	268,277,1,0,0,0,269,270,5,11,0,0,270,275,3,128,64,0,271,272,5,34,0,0,
  	272,273,3,30,15,0,273,274,5,33,0,0,274,276,1,0,0,0,275,271,1,0,0,0,275,
  	276,1,0,0,0,276,278,1,0,0,0,277,269,1,0,0,0,277,278,1,0,0,0,278,279,1,
  	0,0,0,279,283,3,0,0,0,280,281,3,24,12,0,281,282,3,0,0,0,282,284,1,0,0,
  	0,283,280,1,0,0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,286,3,2,1,0,286,
  	287,5,1,0,0,287,23,1,0,0,0,288,294,3,26,13,0,289,290,3,0,0,0,290,291,
  	3,26,13,0,291,293,1,0,0,0,292,289,1,0,0,0,293,296,1,0,0,0,294,292,1,0,
  	0,0,294,295,1,0,0,0,295,25,1,0,0,0,296,294,1,0,0,0,297,298,3,28,14,0,
  	298,27,1,0,0,0,299,301,5,12,0,0,300,299,1,0,0,0,300,301,1,0,0,0,301,302,
  	1,0,0,0,302,304,3,8,4,0,303,305,3,130,65,0,304,303,1,0,0,0,304,305,1,
  	0,0,0,305,308,1,0,0,0,306,307,5,32,0,0,307,309,3,152,76,0,308,306,1,0,
  	0,0,308,309,1,0,0,0,309,29,1,0,0,0,310,315,3,8,4,0,311,312,5,54,0,0,312,
  	314,3,8,4,0,313,311,1,0,0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,
  	0,0,0,316,31,1,0,0,0,317,315,1,0,0,0,318,323,3,34,17,0,319,323,3,38,19,
  	0,320,323,3,44,22,0,321,323,3,46,23,0,322,318,1,0,0,0,322,319,1,0,0,0,
  	322,320,1,0,0,0,322,321,1,0,0,0,323,33,1,0,0,0,324,325,5,28,0,0,325,326,
  	5,23,0,0,326,327,3,8,4,0,327,331,3,0,0,0,328,329,3,36,18,0,329,330,3,
  	0,0,0,330,332,1,0,0,0,331,328,1,0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,
  	333,334,5,1,0,0,334,35,1,0,0,0,335,341,3,32,16,0,336,337,3,0,0,0,337,
  	338,3,32,16,0,338,340,1,0,0,0,339,336,1,0,0,0,340,343,1,0,0,0,341,339,
  	1,0,0,0,341,342,1,0,0,0,342,37,1,0,0,0,343,341,1,0,0,0,344,345,5,28,0,
  	0,345,346,5,3,0,0,346,351,3,8,4,0,347,348,5,34,0,0,348,349,3,30,15,0,
  	349,350,5,33,0,0,350,352,1,0,0,0,351,347,1,0,0,0,351,352,1,0,0,0,352,
  	361,1,0,0,0,353,354,5,11,0,0,354,359,3,128,64,0,355,356,5,34,0,0,356,
  	357,3,30,15,0,357,358,5,33,0,0,358,360,1,0,0,0,359,355,1,0,0,0,359,360,
  	1,0,0,0,360,362,1,0,0,0,361,353,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,
  	0,363,367,3,0,0,0,364,365,3,40,20,0,365,366,3,0,0,0,366,368,1,0,0,0,367,
  	364,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,5,1,0,0,370,39,1,
  	0,0,0,371,377,3,42,21,0,372,373,3,0,0,0,373,374,3,42,21,0,374,376,1,0,
  	0,0,375,372,1,0,0,0,376,379,1,0,0,0,377,375,1,0,0,0,377,378,1,0,0,0,378,
  	41,1,0,0,0,379,377,1,0,0,0,380,381,3,28,14,0,381,43,1,0,0,0,382,384,5,
  	28,0,0,383,385,5,14,0,0,384,383,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,
  	0,386,388,5,12,0,0,387,386,1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,
  	393,5,2,0,0,390,391,3,8,4,0,391,392,5,35,0,0,392,394,1,0,0,0,393,390,
  	1,0,0,0,393,394,1,0,0,0,394,395,1,0,0,0,395,400,3,8,4,0,396,397,5,34,
  	0,0,397,398,3,30,15,0,398,399,5,33,0,0,399,401,1,0,0,0,400,396,1,0,0,
  	0,400,401,1,0,0,0,401,402,1,0,0,0,402,403,5,44,0,0,403,405,3,2,1,0,404,
  	406,3,148,74,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,1,0,0,0,407,408,
  	3,2,1,0,408,410,5,45,0,0,409,411,3,130,65,0,410,409,1,0,0,0,410,411,1,
  	0,0,0,411,45,1,0,0,0,412,413,5,28,0,0,413,414,5,15,0,0,414,415,3,8,4,
  	0,415,416,3,130,65,0,416,47,1,0,0,0,417,419,5,14,0,0,418,417,1,0,0,0,
  	418,419,1,0,0,0,419,421,1,0,0,0,420,422,5,12,0,0,421,420,1,0,0,0,421,
  	422,1,0,0,0,422,423,1,0,0,0,423,430,5,2,0,0,424,425,3,8,4,0,425,426,5,
  	35,0,0,426,428,1,0,0,0,427,424,1,0,0,0,427,428,1,0,0,0,428,429,1,0,0,
  	0,429,431,3,8,4,0,430,427,1,0,0,0,430,431,1,0,0,0,431,436,1,0,0,0,432,
  	433,5,34,0,0,433,434,3,30,15,0,434,435,5,33,0,0,435,437,1,0,0,0,436,432,
  	1,0,0,0,436,437,1,0,0,0,437,438,1,0,0,0,438,439,5,44,0,0,439,441,3,2,
  	1,0,440,442,3,148,74,0,441,440,1,0,0,0,441,442,1,0,0,0,442,443,1,0,0,
  	0,443,444,3,2,1,0,444,446,5,45,0,0,445,447,3,130,65,0,446,445,1,0,0,0,
  	446,447,1,0,0,0,447,448,1,0,0,0,448,452,3,0,0,0,449,450,3,154,77,0,450,
  	451,3,0,0,0,451,453,1,0,0,0,452,449,1,0,0,0,452,453,1,0,0,0,453,454,1,
  	0,0,0,454,455,5,1,0,0,455,49,1,0,0,0,456,457,5,5,0,0,457,458,3,110,55,
  	0,458,462,3,0,0,0,459,460,3,154,77,0,460,461,3,0,0,0,461,463,1,0,0,0,
  	462,459,1,0,0,0,462,463,1,0,0,0,463,474,1,0,0,0,464,465,5,20,0,0,465,
  	466,3,0,0,0,466,467,3,154,77,0,467,468,3,0,0,0,468,470,1,0,0,0,469,464,
  	1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,475,5,1,0,0,472,473,5,20,
  	0,0,473,475,3,50,25,0,474,469,1,0,0,0,474,472,1,0,0,0,475,51,1,0,0,0,
  	476,479,5,4,0,0,477,480,3,96,48,0,478,480,3,54,27,0,479,477,1,0,0,0,479,
  	478,1,0,0,0,480,481,1,0,0,0,481,485,5,9,0,0,482,483,3,8,4,0,483,484,5,
  	54,0,0,484,486,1,0,0,0,485,482,1,0,0,0,485,486,1,0,0,0,486,488,1,0,0,
  	0,487,489,3,8,4,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,
  	494,3,0,0,0,491,492,3,154,77,0,492,493,3,0,0,0,493,495,1,0,0,0,494,491,
  	1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,497,5,1,0,0,497,53,1,0,0,
  	0,498,501,3,56,28,0,499,501,3,58,29,0,500,498,1,0,0,0,500,499,1,0,0,0,
  	501,55,1,0,0,0,502,503,3,60,30,0,503,504,5,35,0,0,504,506,5,35,0,0,505,
  	507,3,64,32,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,
  	3,60,30,0,509,57,1,0,0,0,510,511,3,60,30,0,511,512,5,35,0,0,512,514,5,
  	35,0,0,513,515,3,62,31,0,514,513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,
  	0,0,516,517,3,60,30,0,517,518,5,35,0,0,518,520,5,35,0,0,519,521,3,64,
  	32,0,520,519,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,523,3,60,30,
  	0,523,59,1,0,0,0,524,533,3,4,2,0,525,533,3,8,4,0,526,527,5,44,0,0,527,
  	528,3,2,1,0,528,529,3,110,55,0,529,530,3,2,1,0,530,531,5,45,0,0,531,533,
  	1,0,0,0,532,524,1,0,0,0,532,525,1,0,0,0,532,526,1,0,0,0,533,61,1,0,0,
  	0,534,544,5,36,0,0,535,544,5,37,0,0,536,544,5,38,0,0,537,544,5,39,0,0,
  	538,544,5,40,0,0,539,540,5,39,0,0,540,544,5,39,0,0,541,542,5,38,0,0,542,
  	544,5,38,0,0,543,534,1,0,0,0,543,535,1,0,0,0,543,536,1,0,0,0,543,537,
  	1,0,0,0,543,538,1,0,0,0,543,539,1,0,0,0,543,541,1,0,0,0,544,63,1,0,0,
  	0,545,546,5,53,0,0,546,556,5,32,0,0,547,548,5,32,0,0,548,556,5,32,0,0,
  	549,556,5,33,0,0,550,556,5,34,0,0,551,552,5,33,0,0,552,556,5,32,0,0,553,
  	554,5,34,0,0,554,556,5,32,0,0,555,545,1,0,0,0,555,547,1,0,0,0,555,549,
  	1,0,0,0,555,550,1,0,0,0,555,551,1,0,0,0,555,553,1,0,0,0,556,65,1,0,0,
  	0,557,558,5,22,0,0,558,559,3,110,55,0,559,563,3,0,0,0,560,561,3,154,77,
  	0,561,562,3,0,0,0,562,564,1,0,0,0,563,560,1,0,0,0,563,564,1,0,0,0,564,
  	565,1,0,0,0,565,566,5,1,0,0,566,67,1,0,0,0,567,568,5,18,0,0,568,572,3,
  	0,0,0,569,570,3,154,77,0,570,571,3,0,0,0,571,573,1,0,0,0,572,569,1,0,
  	0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,576,5,19,0,0,575,577,3,8,4,0,
  	576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,582,3,0,0,0,579,580,
  	3,154,77,0,580,581,3,0,0,0,581,583,1,0,0,0,582,579,1,0,0,0,582,583,1,
  	0,0,0,583,584,1,0,0,0,584,585,5,1,0,0,585,69,1,0,0,0,586,588,5,7,0,0,
  	587,589,3,8,4,0,588,587,1,0,0,0,588,589,1,0,0,0,589,591,1,0,0,0,590,592,
  	5,35,0,0,591,590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,597,3,126,
  	63,0,594,598,3,72,36,0,595,596,5,9,0,0,596,598,3,8,4,0,597,594,1,0,0,
  	0,597,595,1,0,0,0,597,598,1,0,0,0,598,71,1,0,0,0,599,600,5,46,0,0,600,
  	605,3,74,37,0,601,602,5,54,0,0,602,604,3,74,37,0,603,601,1,0,0,0,604,
  	607,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,605,1,
  	0,0,0,608,609,5,47,0,0,609,73,1,0,0,0,610,613,3,8,4,0,611,612,5,9,0,0,
  	612,614,3,8,4,0,613,611,1,0,0,0,613,614,1,0,0,0,614,75,1,0,0,0,615,616,
  	5,8,0,0,616,624,3,78,39,0,617,618,3,2,1,0,618,619,5,54,0,0,619,620,3,
  	2,1,0,620,621,3,78,39,0,621,623,1,0,0,0,622,617,1,0,0,0,623,626,1,0,0,
  	0,624,622,1,0,0,0,624,625,1,0,0,0,625,77,1,0,0,0,626,624,1,0,0,0,627,
  	630,3,8,4,0,628,629,5,9,0,0,629,631,3,8,4,0,630,628,1,0,0,0,630,631,1,
  	0,0,0,631,79,1,0,0,0,632,636,3,82,41,0,633,636,3,84,42,0,634,636,3,94,
  	47,0,635,632,1,0,0,0,635,633,1,0,0,0,635,634,1,0,0,0,636,81,1,0,0,0,637,
  	638,5,34,0,0,638,639,3,2,1,0,639,640,3,126,63,0,640,642,3,2,1,0,641,643,
  	3,86,43,0,642,641,1,0,0,0,642,643,1,0,0,0,643,644,1,0,0,0,644,645,3,2,
  	1,0,645,646,5,33,0,0,646,647,3,90,45,0,647,648,5,34,0,0,648,649,5,39,
  	0,0,649,650,3,2,1,0,650,651,3,126,63,0,651,652,3,2,1,0,652,653,5,33,0,
  	0,653,83,1,0,0,0,654,655,5,34,0,0,655,656,3,2,1,0,656,657,3,126,63,0,
  	657,659,3,2,1,0,658,660,3,86,43,0,659,658,1,0,0,0,659,660,1,0,0,0,660,
  	661,1,0,0,0,661,662,3,2,1,0,662,663,5,39,0,0,663,664,5,33,0,0,664,85,
  	1,0,0,0,665,671,3,88,44,0,666,667,3,2,1,0,667,668,3,88,44,0,668,670,1,
  	0,0,0,669,666,1,0,0,0,670,673,1,0,0,0,671,669,1,0,0,0,671,672,1,0,0,0,
  	672,87,1,0,0,0,673,671,1,0,0,0,674,675,3,8,4,0,675,676,5,32,0,0,676,677,
  	3,96,48,0,677,89,1,0,0,0,678,680,3,92,46,0,679,678,1,0,0,0,679,680,1,
  	0,0,0,680,687,1,0,0,0,681,683,3,80,40,0,682,684,3,92,46,0,683,682,1,0,
  	0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,681,1,0,0,0,686,689,1,0,0,0,687,
  	685,1,0,0,0,687,688,1,0,0,0,688,91,1,0,0,0,689,687,1,0,0,0,690,692,8,
  	2,0,0,691,690,1,0,0,0,692,693,1,0,0,0,693,691,1,0,0,0,693,694,1,0,0,0,
  	694,93,1,0,0,0,695,696,5,69,0,0,696,95,1,0,0,0,697,698,6,48,-1,0,698,
  	738,3,4,2,0,699,738,3,6,3,0,700,738,3,8,4,0,701,702,5,46,0,0,702,704,
  	3,2,1,0,703,705,3,102,51,0,704,703,1,0,0,0,704,705,1,0,0,0,705,706,1,
  	0,0,0,706,707,3,2,1,0,707,708,5,47,0,0,708,738,1,0,0,0,709,710,5,44,0,
  	0,710,712,3,2,1,0,711,713,3,106,53,0,712,711,1,0,0,0,712,713,1,0,0,0,
  	713,714,1,0,0,0,714,715,3,2,1,0,715,716,5,45,0,0,716,738,1,0,0,0,717,
  	718,5,36,0,0,718,738,3,96,48,9,719,720,5,37,0,0,720,738,3,96,48,8,721,
  	722,5,37,0,0,722,723,5,37,0,0,723,738,3,96,48,7,724,725,5,36,0,0,725,
  	726,5,36,0,0,726,738,3,96,48,6,727,728,5,53,0,0,728,738,3,96,48,3,729,
  	730,5,50,0,0,730,738,3,96,48,2,731,732,5,44,0,0,732,733,3,2,1,0,733,734,
  	3,110,55,0,734,735,3,2,1,0,735,736,5,45,0,0,736,738,1,0,0,0,737,697,1,
  	0,0,0,737,699,1,0,0,0,737,700,1,0,0,0,737,701,1,0,0,0,737,709,1,0,0,0,
  	737,717,1,0,0,0,737,719,1,0,0,0,737,721,1,0,0,0,737,724,1,0,0,0,737,727,
  	1,0,0,0,737,729,1,0,0,0,737,731,1,0,0,0,738,776,1,0,0,0,739,740,10,14,
  	0,0,740,741,3,2,1,0,741,742,5,35,0,0,742,743,3,2,1,0,743,744,3,8,4,0,
  	744,775,1,0,0,0,745,750,10,13,0,0,746,747,5,34,0,0,747,748,3,100,50,0,
  	748,749,5,33,0,0,749,751,1,0,0,0,750,746,1,0,0,0,750,751,1,0,0,0,751,
  	752,1,0,0,0,752,753,5,44,0,0,753,756,3,2,1,0,754,757,3,140,70,0,755,757,
  	3,144,72,0,756,754,1,0,0,0,756,755,1,0,0,0,756,757,1,0,0,0,757,758,1,
  	0,0,0,758,759,3,2,1,0,759,760,5,45,0,0,760,775,1,0,0,0,761,762,10,12,
  	0,0,762,763,5,46,0,0,763,764,3,2,1,0,764,765,3,110,55,0,765,766,3,2,1,
  	0,766,767,5,47,0,0,767,775,1,0,0,0,768,769,10,5,0,0,769,770,5,37,0,0,
  	770,775,5,37,0,0,771,772,10,4,0,0,772,773,5,36,0,0,773,775,5,36,0,0,774,
  	739,1,0,0,0,774,745,1,0,0,0,774,761,1,0,0,0,774,768,1,0,0,0,774,771,1,
  	0,0,0,775,778,1,0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,97,1,0,0,0,
  	778,776,1,0,0,0,779,780,6,49,-1,0,780,781,3,96,48,0,781,814,1,0,0,0,782,
  	783,10,5,0,0,783,784,3,2,1,0,784,785,3,162,81,0,785,786,3,2,1,0,786,787,
  	3,98,49,6,787,813,1,0,0,0,788,789,10,4,0,0,789,790,3,2,1,0,790,791,3,
  	164,82,0,791,792,3,2,1,0,792,793,3,98,49,5,793,813,1,0,0,0,794,795,10,
  	3,0,0,795,796,3,2,1,0,796,797,3,166,83,0,797,798,3,2,1,0,798,799,3,98,
  	49,4,799,813,1,0,0,0,800,801,10,2,0,0,801,802,3,2,1,0,802,803,3,170,85,
  	0,803,804,3,2,1,0,804,805,3,98,49,3,805,813,1,0,0,0,806,807,10,1,0,0,
  	807,808,3,2,1,0,808,809,3,168,84,0,809,810,3,2,1,0,810,811,3,98,49,2,
  	811,813,1,0,0,0,812,782,1,0,0,0,812,788,1,0,0,0,812,794,1,0,0,0,812,800,
  	1,0,0,0,812,806,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,
  	0,815,99,1,0,0,0,816,814,1,0,0,0,817,822,3,130,65,0,818,819,5,54,0,0,
  	819,821,3,130,65,0,820,818,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,
  	823,1,0,0,0,823,101,1,0,0,0,824,822,1,0,0,0,825,833,3,104,52,0,826,827,
  	3,2,1,0,827,828,5,54,0,0,828,829,3,2,1,0,829,830,3,104,52,0,830,832,1,
  	0,0,0,831,826,1,0,0,0,832,835,1,0,0,0,833,831,1,0,0,0,833,834,1,0,0,0,
  	834,103,1,0,0,0,835,833,1,0,0,0,836,837,3,110,55,0,837,105,1,0,0,0,838,
  	846,3,108,54,0,839,840,3,2,1,0,840,841,5,54,0,0,841,842,3,2,1,0,842,843,
  	3,108,54,0,843,845,1,0,0,0,844,839,1,0,0,0,845,848,1,0,0,0,846,844,1,
  	0,0,0,846,847,1,0,0,0,847,107,1,0,0,0,848,846,1,0,0,0,849,852,3,8,4,0,
  	850,852,5,63,0,0,851,849,1,0,0,0,851,850,1,0,0,0,852,853,1,0,0,0,853,
  	854,5,32,0,0,854,855,3,110,55,0,855,109,1,0,0,0,856,857,5,30,0,0,857,
  	858,3,2,1,0,858,859,5,35,0,0,859,860,3,2,1,0,860,861,3,8,4,0,861,862,
  	5,44,0,0,862,865,3,2,1,0,863,866,3,140,70,0,864,866,3,144,72,0,865,863,
  	1,0,0,0,865,864,1,0,0,0,865,866,1,0,0,0,866,867,1,0,0,0,867,868,3,2,1,
  	0,868,869,5,45,0,0,869,914,1,0,0,0,870,914,3,98,49,0,871,872,3,96,48,
  	0,872,873,5,9,0,0,873,874,3,132,66,0,874,914,1,0,0,0,875,876,3,98,49,
  	0,876,877,3,2,1,0,877,878,5,48,0,0,878,879,3,2,1,0,879,880,3,110,55,0,
  	880,881,3,2,1,0,881,882,5,49,0,0,882,883,3,2,1,0,883,884,3,110,55,0,884,
  	914,1,0,0,0,885,888,3,96,48,0,886,887,5,10,0,0,887,889,3,96,48,0,888,
  	886,1,0,0,0,889,890,1,0,0,0,890,888,1,0,0,0,890,891,1,0,0,0,891,914,1,
  	0,0,0,892,893,5,6,0,0,893,914,3,98,49,0,894,896,5,14,0,0,895,894,1,0,
  	0,0,895,896,1,0,0,0,896,897,1,0,0,0,897,898,5,44,0,0,898,900,3,2,1,0,
  	899,901,3,148,74,0,900,899,1,0,0,0,900,901,1,0,0,0,901,902,1,0,0,0,902,
  	903,3,2,1,0,903,905,5,45,0,0,904,906,3,130,65,0,905,904,1,0,0,0,905,906,
  	1,0,0,0,906,907,1,0,0,0,907,908,5,49,0,0,908,909,3,2,1,0,909,910,3,110,
  	55,0,910,914,1,0,0,0,911,914,3,48,24,0,912,914,3,80,40,0,913,856,1,0,
  	0,0,913,870,1,0,0,0,913,871,1,0,0,0,913,875,1,0,0,0,913,885,1,0,0,0,913,
  	892,1,0,0,0,913,895,1,0,0,0,913,911,1,0,0,0,913,912,1,0,0,0,914,111,1,
  	0,0,0,915,916,5,21,0,0,916,917,3,110,55,0,917,113,1,0,0,0,918,922,3,116,
  	58,0,919,922,3,118,59,0,920,922,3,120,60,0,921,918,1,0,0,0,921,919,1,
  	0,0,0,921,920,1,0,0,0,922,115,1,0,0,0,923,925,5,15,0,0,924,923,1,0,0,
  	0,924,925,1,0,0,0,925,926,1,0,0,0,926,928,3,8,4,0,927,929,3,130,65,0,
  	928,927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,931,3,122,61,0,931,
  	932,3,110,55,0,932,117,1,0,0,0,933,934,3,128,64,0,934,935,3,2,1,0,935,
  	936,5,35,0,0,936,937,3,2,1,0,937,938,3,8,4,0,938,939,3,122,61,0,939,940,
  	3,110,55,0,940,119,1,0,0,0,941,942,3,128,64,0,942,943,5,46,0,0,943,944,
  	3,2,1,0,944,945,3,110,55,0,945,946,3,2,1,0,946,947,5,47,0,0,947,948,3,
  	122,61,0,948,949,3,110,55,0,949,121,1,0,0,0,950,992,5,31,0,0,951,992,
  	5,32,0,0,952,953,5,49,0,0,953,992,5,32,0,0,954,955,5,36,0,0,955,992,5,
  	32,0,0,956,957,5,37,0,0,957,992,5,32,0,0,958,959,5,38,0,0,959,992,5,32,
  	0,0,960,961,5,39,0,0,961,992,5,32,0,0,962,963,5,39,0,0,963,964,5,39,0,
  	0,964,992,5,32,0,0,965,966,5,40,0,0,966,992,5,32,0,0,967,968,5,38,0,0,
  	968,969,5,38,0,0,969,992,5,32,0,0,970,971,5,42,0,0,971,992,5,32,0,0,972,
  	973,5,43,0,0,973,992,5,32,0,0,974,975,5,34,0,0,975,976,5,34,0,0,976,992,
  	5,32,0,0,977,978,5,33,0,0,978,979,5,33,0,0,979,992,5,32,0,0,980,981,5,
  	41,0,0,981,992,5,32,0,0,982,983,5,42,0,0,983,984,5,42,0,0,984,992,5,32,
  	0,0,985,986,5,43,0,0,986,987,5,43,0,0,987,992,5,32,0,0,988,989,5,48,0,
  	0,989,990,5,48,0,0,990,992,5,32,0,0,991,950,1,0,0,0,991,951,1,0,0,0,991,
  	952,1,0,0,0,991,954,1,0,0,0,991,956,1,0,0,0,991,958,1,0,0,0,991,960,1,
  	0,0,0,991,962,1,0,0,0,991,965,1,0,0,0,991,967,1,0,0,0,991,970,1,0,0,0,
  	991,972,1,0,0,0,991,974,1,0,0,0,991,977,1,0,0,0,991,980,1,0,0,0,991,982,
  	1,0,0,0,991,985,1,0,0,0,991,988,1,0,0,0,992,123,1,0,0,0,993,994,5,6,0,
  	0,994,995,3,114,57,0,995,125,1,0,0,0,996,997,6,63,-1,0,997,998,3,8,4,
  	0,998,1007,1,0,0,0,999,1000,10,1,0,0,1000,1001,3,2,1,0,1001,1002,5,35,
  	0,0,1002,1003,3,2,1,0,1003,1004,3,8,4,0,1004,1006,1,0,0,0,1005,999,1,
  	0,0,0,1006,1009,1,0,0,0,1007,1005,1,0,0,0,1007,1008,1,0,0,0,1008,127,
  	1,0,0,0,1009,1007,1,0,0,0,1010,1011,6,64,-1,0,1011,1012,3,8,4,0,1012,
  	1028,1,0,0,0,1013,1014,10,2,0,0,1014,1015,3,2,1,0,1015,1016,5,35,0,0,
  	1016,1017,3,2,1,0,1017,1018,3,8,4,0,1018,1027,1,0,0,0,1019,1020,10,1,
  	0,0,1020,1021,5,46,0,0,1021,1022,3,2,1,0,1022,1023,3,110,55,0,1023,1024,
  	3,2,1,0,1024,1025,5,47,0,0,1025,1027,1,0,0,0,1026,1013,1,0,0,0,1026,1019,
  	1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,1,0,0,0,1029,129,
  	1,0,0,0,1030,1028,1,0,0,0,1031,1036,3,132,66,0,1032,1033,7,3,0,0,1033,
  	1035,3,132,66,0,1034,1032,1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,
  	1036,1037,1,0,0,0,1037,131,1,0,0,0,1038,1036,1,0,0,0,1039,1042,3,134,
  	67,0,1040,1042,3,138,69,0,1041,1039,1,0,0,0,1041,1040,1,0,0,0,1042,133,
  	1,0,0,0,1043,1048,3,126,63,0,1044,1045,5,34,0,0,1045,1046,3,136,68,0,
  	1046,1047,5,33,0,0,1047,1049,1,0,0,0,1048,1044,1,0,0,0,1048,1049,1,0,
  	0,0,1049,135,1,0,0,0,1050,1055,3,130,65,0,1051,1052,5,54,0,0,1052,1054,
  	3,130,65,0,1053,1051,1,0,0,0,1054,1057,1,0,0,0,1055,1053,1,0,0,0,1055,
  	1056,1,0,0,0,1056,137,1,0,0,0,1057,1055,1,0,0,0,1058,1059,5,46,0,0,1059,
  	1060,5,47,0,0,1060,1061,3,132,66,0,1061,139,1,0,0,0,1062,1070,3,142,71,
  	0,1063,1064,3,2,1,0,1064,1065,5,54,0,0,1065,1066,3,2,1,0,1066,1067,3,
  	142,71,0,1067,1069,1,0,0,0,1068,1063,1,0,0,0,1069,1072,1,0,0,0,1070,1068,
  	1,0,0,0,1070,1071,1,0,0,0,1071,141,1,0,0,0,1072,1070,1,0,0,0,1073,1074,
  	3,110,55,0,1074,143,1,0,0,0,1075,1083,3,146,73,0,1076,1077,3,2,1,0,1077,
  	1078,5,54,0,0,1078,1079,3,2,1,0,1079,1080,3,146,73,0,1080,1082,1,0,0,
  	0,1081,1076,1,0,0,0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,
  	0,0,1084,145,1,0,0,0,1085,1083,1,0,0,0,1086,1087,3,8,4,0,1087,1088,5,
  	32,0,0,1088,1089,3,110,55,0,1089,147,1,0,0,0,1090,1098,3,150,75,0,1091,
  	1092,3,2,1,0,1092,1093,5,54,0,0,1093,1094,3,2,1,0,1094,1095,3,150,75,
  	0,1095,1097,1,0,0,0,1096,1091,1,0,0,0,1097,1100,1,0,0,0,1098,1096,1,0,
  	0,0,1098,1099,1,0,0,0,1099,1111,1,0,0,0,1100,1098,1,0,0,0,1101,1102,3,
  	2,1,0,1102,1103,5,54,0,0,1103,1104,3,2,1,0,1104,1105,5,35,0,0,1105,1106,
  	5,35,0,0,1106,1107,5,35,0,0,1107,1109,3,8,4,0,1108,1110,3,130,65,0,1109,
  	1108,1,0,0,0,1109,1110,1,0,0,0,1110,1112,1,0,0,0,1111,1101,1,0,0,0,1111,
  	1112,1,0,0,0,1112,1121,1,0,0,0,1113,1114,5,35,0,0,1114,1115,5,35,0,0,
  	1115,1116,5,35,0,0,1116,1118,3,8,4,0,1117,1119,3,130,65,0,1118,1117,1,
  	0,0,0,1118,1119,1,0,0,0,1119,1121,1,0,0,0,1120,1090,1,0,0,0,1120,1113,
  	1,0,0,0,1121,149,1,0,0,0,1122,1124,3,8,4,0,1123,1125,3,130,65,0,1124,
  	1123,1,0,0,0,1124,1125,1,0,0,0,1125,1128,1,0,0,0,1126,1127,5,32,0,0,1127,
  	1129,3,152,76,0,1128,1126,1,0,0,0,1128,1129,1,0,0,0,1129,151,1,0,0,0,
  	1130,1138,3,4,2,0,1131,1138,3,6,3,0,1132,1138,3,8,4,0,1133,1134,5,44,
  	0,0,1134,1138,5,45,0,0,1135,1136,5,46,0,0,1136,1138,5,47,0,0,1137,1130,
  	1,0,0,0,1137,1131,1,0,0,0,1137,1132,1,0,0,0,1137,1133,1,0,0,0,1137,1135,
  	1,0,0,0,1138,153,1,0,0,0,1139,1145,3,156,78,0,1140,1141,3,0,0,0,1141,
  	1142,3,156,78,0,1142,1144,1,0,0,0,1143,1140,1,0,0,0,1144,1147,1,0,0,0,
  	1145,1143,1,0,0,0,1145,1146,1,0,0,0,1146,155,1,0,0,0,1147,1145,1,0,0,
  	0,1148,1151,3,158,79,0,1149,1151,3,160,80,0,1150,1148,1,0,0,0,1150,1149,
  	1,0,0,0,1151,157,1,0,0,0,1152,1162,3,50,25,0,1153,1162,3,52,26,0,1154,
  	1162,3,66,33,0,1155,1162,3,68,34,0,1156,1162,3,110,55,0,1157,1162,3,112,
  	56,0,1158,1162,3,124,62,0,1159,1162,3,114,57,0,1160,1162,3,2,1,0,1161,
  	1152,1,0,0,0,1161,1153,1,0,0,0,1161,1154,1,0,0,0,1161,1155,1,0,0,0,1161,
  	1156,1,0,0,0,1161,1157,1,0,0,0,1161,1158,1,0,0,0,1161,1159,1,0,0,0,1161,
  	1160,1,0,0,0,1162,159,1,0,0,0,1163,1164,5,13,0,0,1164,1165,3,110,55,0,
  	1165,161,1,0,0,0,1166,1174,5,38,0,0,1167,1174,5,39,0,0,1168,1174,5,40,
  	0,0,1169,1170,5,39,0,0,1170,1174,5,39,0,0,1171,1172,5,38,0,0,1172,1174,
  	5,38,0,0,1173,1166,1,0,0,0,1173,1167,1,0,0,0,1173,1168,1,0,0,0,1173,1169,
  	1,0,0,0,1173,1171,1,0,0,0,1174,163,1,0,0,0,1175,1176,7,4,0,0,1176,165,
  	1,0,0,0,1177,1185,5,41,0,0,1178,1185,5,43,0,0,1179,1185,5,42,0,0,1180,
  	1181,5,34,0,0,1181,1185,5,34,0,0,1182,1183,5,33,0,0,1183,1185,5,33,0,
  	0,1184,1177,1,0,0,0,1184,1178,1,0,0,0,1184,1179,1,0,0,0,1184,1180,1,0,
  	0,0,1184,1182,1,0,0,0,1185,167,1,0,0,0,1186,1193,5,16,0,0,1187,1193,5,
  	17,0,0,1188,1189,5,43,0,0,1189,1193,5,43,0,0,1190,1191,5,42,0,0,1191,
  	1193,5,42,0,0,1192,1186,1,0,0,0,1192,1187,1,0,0,0,1192,1188,1,0,0,0,1192,
  	1190,1,0,0,0,1193,169,1,0,0,0,1194,1195,5,32,0,0,1195,1220,5,32,0,0,1196,
  	1197,5,53,0,0,1197,1220,5,32,0,0,1198,1220,5,33,0,0,1199,1220,5,34,0,
  	0,1200,1201,5,33,0,0,1201,1220,5,32,0,0,1202,1203,5,34,0,0,1203,1220,
  	5,32,0,0,1204,1220,5,11,0,0,1205,1206,5,29,0,0,1206,1220,5,11,0,0,1207,
  	1220,5,24,0,0,1208,1209,5,29,0,0,1209,1220,5,24,0,0,1210,1220,5,25,0,
  	0,1211,1212,5,29,0,0,1212,1220,5,25,0,0,1213,1220,5,26,0,0,1214,1215,
  	5,29,0,0,1215,1220,5,26,0,0,1216,1220,5,27,0,0,1217,1218,5,29,0,0,1218,
  	1220,5,27,0,0,1219,1194,1,0,0,0,1219,1196,1,0,0,0,1219,1198,1,0,0,0,1219,
  	1199,1,0,0,0,1219,1200,1,0,0,0,1219,1202,1,0,0,0,1219,1204,1,0,0,0,1219,
  	1205,1,0,0,0,1219,1207,1,0,0,0,1219,1208,1,0,0,0,1219,1210,1,0,0,0,1219,
  	1211,1,0,0,0,1219,1213,1,0,0,0,1219,1214,1,0,0,0,1219,1216,1,0,0,0,1219,
  	1217,1,0,0,0,1220,171,1,0,0,0,1221,1222,5,64,0,0,1222,1223,3,8,4,0,1223,
  	1224,5,63,0,0,1224,1225,3,0,0,0,1225,1226,3,12,6,0,1226,1227,3,0,0,0,
  	1227,1228,5,65,0,0,1228,173,1,0,0,0,1229,1230,5,66,0,0,1230,1231,3,8,
  	4,0,1231,1232,5,63,0,0,1232,175,1,0,0,0,119,179,184,202,222,226,232,242,
  	259,267,275,277,283,294,300,304,308,315,322,331,341,351,359,361,367,377,
  	384,387,393,400,405,410,418,421,427,430,436,441,446,452,462,469,474,479,
  	485,488,494,500,506,514,520,532,543,555,563,572,576,582,588,591,597,605,
  	613,624,630,635,642,659,671,679,683,687,693,704,712,737,750,756,774,776,
  	812,814,822,833,846,851,865,890,895,900,905,913,921,924,928,991,1007,
  	1026,1028,1036,1041,1048,1055,1070,1083,1098,1109,1111,1118,1120,1124,
  	1128,1137,1145,1150,1161,1173,1184,1192,1219
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  mavkaparserParserStaticData = staticData.release();
}

}

MavkaParser::MavkaParser(TokenStream *input) : MavkaParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

MavkaParser::MavkaParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  MavkaParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *mavkaparserParserStaticData->atn, mavkaparserParserStaticData->decisionToDFA, mavkaparserParserStaticData->sharedContextCache, options);
}

MavkaParser::~MavkaParser() {
  delete _interpreter;
}

const atn::ATN& MavkaParser::getATN() const {
  return *mavkaparserParserStaticData->atn;
}

std::string MavkaParser::getGrammarFileName() const {
  return "MavkaParser.g4";
}

const std::vector<std::string>& MavkaParser::getRuleNames() const {
  return mavkaparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& MavkaParser::getVocabulary() const {
  return mavkaparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView MavkaParser::getSerializedATN() const {
  return mavkaparserParserStaticData->serializedATN;
}


//----------------- NlContext ------------------------------------------------------------------

MavkaParser::NlContext::NlContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::NlContext::NL() {
  return getTokens(MavkaParser::NL);
}

tree::TerminalNode* MavkaParser::NlContext::NL(size_t i) {
  return getToken(MavkaParser::NL, i);
}


size_t MavkaParser::NlContext::getRuleIndex() const {
  return MavkaParser::RuleNl;
}

void MavkaParser::NlContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNl(this);
}

void MavkaParser::NlContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNl(this);
}


std::any MavkaParser::NlContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNl(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlContext* MavkaParser::nl() {
  NlContext *_localctx = _tracker.createInstance<NlContext>(_ctx, getState());
  enterRule(_localctx, 0, MavkaParser::RuleNl);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(177); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(176);
              match(MavkaParser::NL);
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(179); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 0, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NlsContext ------------------------------------------------------------------

MavkaParser::NlsContext::NlsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::NlsContext::NL() {
  return getTokens(MavkaParser::NL);
}

tree::TerminalNode* MavkaParser::NlsContext::NL(size_t i) {
  return getToken(MavkaParser::NL, i);
}


size_t MavkaParser::NlsContext::getRuleIndex() const {
  return MavkaParser::RuleNls;
}

void MavkaParser::NlsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNls(this);
}

void MavkaParser::NlsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNls(this);
}


std::any MavkaParser::NlsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNls(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::NlsContext* MavkaParser::nls() {
  NlsContext *_localctx = _tracker.createInstance<NlsContext>(_ctx, getState());
  enterRule(_localctx, 2, MavkaParser::RuleNls);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(184);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(181);
        match(MavkaParser::NL); 
      }
      setState(186);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Number_tokenContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext::Number_tokenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Number_tokenContext::INTEGER() {
  return getToken(MavkaParser::INTEGER, 0);
}

tree::TerminalNode* MavkaParser::Number_tokenContext::FLOAT() {
  return getToken(MavkaParser::FLOAT, 0);
}

tree::TerminalNode* MavkaParser::Number_tokenContext::HEX() {
  return getToken(MavkaParser::HEX, 0);
}

tree::TerminalNode* MavkaParser::Number_tokenContext::BIN() {
  return getToken(MavkaParser::BIN, 0);
}


size_t MavkaParser::Number_tokenContext::getRuleIndex() const {
  return MavkaParser::RuleNumber_token;
}

void MavkaParser::Number_tokenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber_token(this);
}

void MavkaParser::Number_tokenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber_token(this);
}


std::any MavkaParser::Number_tokenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNumber_token(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Number_tokenContext* MavkaParser::number_token() {
  Number_tokenContext *_localctx = _tracker.createInstance<Number_tokenContext>(_ctx, getState());
  enterRule(_localctx, 4, MavkaParser::RuleNumber_token);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(187);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 540431955284459520) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StringContext ------------------------------------------------------------------

MavkaParser::StringContext::StringContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StringContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

tree::TerminalNode* MavkaParser::StringContext::STRING_MULTILINE() {
  return getToken(MavkaParser::STRING_MULTILINE, 0);
}


size_t MavkaParser::StringContext::getRuleIndex() const {
  return MavkaParser::RuleString;
}

void MavkaParser::StringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString(this);
}

void MavkaParser::StringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString(this);
}


std::any MavkaParser::StringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StringContext* MavkaParser::string() {
  StringContext *_localctx = _tracker.createInstance<StringContext>(_ctx, getState());
  enterRule(_localctx, 6, MavkaParser::RuleString);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(189);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::STRING_MULTILINE

    || _la == MavkaParser::STRING)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IdentifierContext::ID() {
  return getToken(MavkaParser::ID, 0);
}


size_t MavkaParser::IdentifierContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifier;
}

void MavkaParser::IdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifier(this);
}

void MavkaParser::IdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifier(this);
}


std::any MavkaParser::IdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IdentifierContext* MavkaParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 8, MavkaParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(191);
    match(MavkaParser::ID);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FileContext ------------------------------------------------------------------

MavkaParser::FileContext::FileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::FileContext::EOF() {
  return getToken(MavkaParser::EOF, 0);
}

MavkaParser::ProgramContext* MavkaParser::FileContext::program() {
  return getRuleContext<MavkaParser::ProgramContext>(0);
}


size_t MavkaParser::FileContext::getRuleIndex() const {
  return MavkaParser::RuleFile;
}

void MavkaParser::FileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFile(this);
}

void MavkaParser::FileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFile(this);
}


std::any MavkaParser::FileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FileContext* MavkaParser::file() {
  FileContext *_localctx = _tracker.createInstance<FileContext>(_ctx, getState());
  enterRule(_localctx, 10, MavkaParser::RuleFile);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(193);
    antlrcpp::downCast<FileContext *>(_localctx)->f_program = program();
    setState(194);
    match(MavkaParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ProgramContext ------------------------------------------------------------------

MavkaParser::ProgramContext::ProgramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Program_elementContext *> MavkaParser::ProgramContext::program_element() {
  return getRuleContexts<MavkaParser::Program_elementContext>();
}

MavkaParser::Program_elementContext* MavkaParser::ProgramContext::program_element(size_t i) {
  return getRuleContext<MavkaParser::Program_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ProgramContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ProgramContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::ProgramContext::getRuleIndex() const {
  return MavkaParser::RuleProgram;
}

void MavkaParser::ProgramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram(this);
}

void MavkaParser::ProgramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram(this);
}


std::any MavkaParser::ProgramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ProgramContext* MavkaParser::program() {
  ProgramContext *_localctx = _tracker.createInstance<ProgramContext>(_ctx, getState());
  enterRule(_localctx, 12, MavkaParser::RuleProgram);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(196);
    program_element();
    setState(202);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(197);
        nl();
        setState(198);
        program_element(); 
      }
      setState(204);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Program_elementContext ------------------------------------------------------------------

MavkaParser::Program_elementContext::Program_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Program_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Program_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Program_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Program_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Program_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Program_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Program_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Program_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Program_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Program_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Program_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Program_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::TakeContext* MavkaParser::Program_elementContext::take() {
  return getRuleContext<MavkaParser::TakeContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Program_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::Comp_inst_block_programContext* MavkaParser::Program_elementContext::comp_inst_block_program() {
  return getRuleContext<MavkaParser::Comp_inst_block_programContext>(0);
}

MavkaParser::Comp_inst_assignContext* MavkaParser::Program_elementContext::comp_inst_assign() {
  return getRuleContext<MavkaParser::Comp_inst_assignContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Program_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Program_elementContext::getRuleIndex() const {
  return MavkaParser::RuleProgram_element;
}

void MavkaParser::Program_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterProgram_element(this);
}

void MavkaParser::Program_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitProgram_element(this);
}


std::any MavkaParser::Program_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitProgram_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Program_elementContext* MavkaParser::program_element() {
  Program_elementContext *_localctx = _tracker.createInstance<Program_elementContext>(_ctx, getState());
  enterRule(_localctx, 14, MavkaParser::RuleProgram_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(222);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(205);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(206);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(207);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(208);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(209);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(210);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(211);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(212);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(213);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(214);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(215);
      wait_assign();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(216);
      assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(217);
      take();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(218);
      give();
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(219);
      comp_inst_block_program();
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(220);
      comp_inst_assign();
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(221);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

MavkaParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ModuleContext::KW_MODULE() {
  return getToken(MavkaParser::KW_MODULE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::ModuleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::ModuleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::ModuleContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::ModuleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Module_bodyContext* MavkaParser::ModuleContext::module_body() {
  return getRuleContext<MavkaParser::Module_bodyContext>(0);
}


size_t MavkaParser::ModuleContext::getRuleIndex() const {
  return MavkaParser::RuleModule;
}

void MavkaParser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void MavkaParser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}


std::any MavkaParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ModuleContext* MavkaParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 16, MavkaParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(224);
    match(MavkaParser::KW_MODULE);
    setState(226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(225);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_name = identifier();
    }
    setState(228);
    nl();
    setState(232);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2908111273748803204) != 0) || _la == MavkaParser::MRM_DIIA

    || _la == MavkaParser::NL) {
      setState(229);
      antlrcpp::downCast<ModuleContext *>(_localctx)->m_body = module_body();
      setState(230);
      nl();
    }
    setState(234);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_bodyContext ------------------------------------------------------------------

MavkaParser::Module_bodyContext::Module_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Module_body_elementContext *> MavkaParser::Module_bodyContext::module_body_element() {
  return getRuleContexts<MavkaParser::Module_body_elementContext>();
}

MavkaParser::Module_body_elementContext* MavkaParser::Module_bodyContext::module_body_element(size_t i) {
  return getRuleContext<MavkaParser::Module_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Module_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Module_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Module_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body;
}

void MavkaParser::Module_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body(this);
}

void MavkaParser::Module_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body(this);
}


std::any MavkaParser::Module_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_bodyContext* MavkaParser::module_body() {
  Module_bodyContext *_localctx = _tracker.createInstance<Module_bodyContext>(_ctx, getState());
  enterRule(_localctx, 18, MavkaParser::RuleModule_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(236);
    module_body_element();
    setState(242);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(237);
        nl();
        setState(238);
        module_body_element(); 
      }
      setState(244);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_body_elementContext ------------------------------------------------------------------

MavkaParser::Module_body_elementContext::Module_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ModuleContext* MavkaParser::Module_body_elementContext::module() {
  return getRuleContext<MavkaParser::ModuleContext>(0);
}

MavkaParser::StructureContext* MavkaParser::Module_body_elementContext::structure() {
  return getRuleContext<MavkaParser::StructureContext>(0);
}

MavkaParser::MockupContext* MavkaParser::Module_body_elementContext::mockup() {
  return getRuleContext<MavkaParser::MockupContext>(0);
}

MavkaParser::DiiaContext* MavkaParser::Module_body_elementContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::IfContext* MavkaParser::Module_body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Module_body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Module_body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Module_body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Module_body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Module_body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Module_body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Module_body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::GiveContext* MavkaParser::Module_body_elementContext::give() {
  return getRuleContext<MavkaParser::GiveContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Module_body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Module_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleModule_body_element;
}

void MavkaParser::Module_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_body_element(this);
}

void MavkaParser::Module_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_body_element(this);
}


std::any MavkaParser::Module_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitModule_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Module_body_elementContext* MavkaParser::module_body_element() {
  Module_body_elementContext *_localctx = _tracker.createInstance<Module_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 20, MavkaParser::RuleModule_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(259);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(245);
      module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(246);
      structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(247);
      mockup();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(248);
      diia();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(249);
      if_();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(250);
      each();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(251);
      while_();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(252);
      try_();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(253);
      expr();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(254);
      throw_();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(255);
      wait_assign();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(256);
      assign();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(257);
      give();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(258);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StructureContext ------------------------------------------------------------------

MavkaParser::StructureContext::StructureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::StructureContext::KW_STRUCTURE() {
  return getToken(MavkaParser::KW_STRUCTURE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::StructureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::StructureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::NlsContext* MavkaParser::StructureContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}

tree::TerminalNode* MavkaParser::StructureContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::StructureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> MavkaParser::StructureContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::StructureContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::StructureContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::StructureContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::StructureContext::KW_IS() {
  return getToken(MavkaParser::KW_IS, 0);
}

std::vector<MavkaParser::GenericsContext *> MavkaParser::StructureContext::generics() {
  return getRuleContexts<MavkaParser::GenericsContext>();
}

MavkaParser::GenericsContext* MavkaParser::StructureContext::generics(size_t i) {
  return getRuleContext<MavkaParser::GenericsContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::StructureContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Structure_elementsContext* MavkaParser::StructureContext::structure_elements() {
  return getRuleContext<MavkaParser::Structure_elementsContext>(0);
}


size_t MavkaParser::StructureContext::getRuleIndex() const {
  return MavkaParser::RuleStructure;
}

void MavkaParser::StructureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure(this);
}

void MavkaParser::StructureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure(this);
}


std::any MavkaParser::StructureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::StructureContext* MavkaParser::structure() {
  StructureContext *_localctx = _tracker.createInstance<StructureContext>(_ctx, getState());
  enterRule(_localctx, 22, MavkaParser::RuleStructure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(261);
    match(MavkaParser::KW_STRUCTURE);
    setState(262);
    antlrcpp::downCast<StructureContext *>(_localctx)->s_name = identifier();
    setState(267);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::LESSER) {
      setState(263);
      match(MavkaParser::LESSER);
      setState(264);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_generics = generics();
      setState(265);
      match(MavkaParser::GREATER);
    }
    setState(277);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_IS) {
      setState(269);
      match(MavkaParser::KW_IS);
      setState(270);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_parent = super_identifiers_chain(0);
      setState(275);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::LESSER) {
        setState(271);
        match(MavkaParser::LESSER);
        setState(272);
        antlrcpp::downCast<StructureContext *>(_localctx)->s_parent_generics = generics();
        setState(273);
        match(MavkaParser::GREATER);
      }
    }
    setState(279);
    nl();
    setState(283);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC

    || _la == MavkaParser::ID) {
      setState(280);
      antlrcpp::downCast<StructureContext *>(_localctx)->s_elements = structure_elements();
      setState(281);
      nl();
    }
    setState(285);
    nls();
    setState(286);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementsContext ------------------------------------------------------------------

MavkaParser::Structure_elementsContext::Structure_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Structure_elementContext *> MavkaParser::Structure_elementsContext::structure_element() {
  return getRuleContexts<MavkaParser::Structure_elementContext>();
}

MavkaParser::Structure_elementContext* MavkaParser::Structure_elementsContext::structure_element(size_t i) {
  return getRuleContext<MavkaParser::Structure_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Structure_elementsContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Structure_elementsContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Structure_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_elements;
}

void MavkaParser::Structure_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_elements(this);
}

void MavkaParser::Structure_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_elements(this);
}


std::any MavkaParser::Structure_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementsContext* MavkaParser::structure_elements() {
  Structure_elementsContext *_localctx = _tracker.createInstance<Structure_elementsContext>(_ctx, getState());
  enterRule(_localctx, 24, MavkaParser::RuleStructure_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(288);
    structure_element();
    setState(294);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(289);
        nl();
        setState(290);
        structure_element(); 
      }
      setState(296);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_elementContext ------------------------------------------------------------------

MavkaParser::Structure_elementContext::Structure_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Structure_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}


size_t MavkaParser::Structure_elementContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_element;
}

void MavkaParser::Structure_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_element(this);
}

void MavkaParser::Structure_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_element(this);
}


std::any MavkaParser::Structure_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_elementContext* MavkaParser::structure_element() {
  Structure_elementContext *_localctx = _tracker.createInstance<Structure_elementContext>(_ctx, getState());
  enterRule(_localctx, 26, MavkaParser::RuleStructure_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(297);
    structure_param();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Structure_paramContext ------------------------------------------------------------------

MavkaParser::Structure_paramContext::Structure_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Structure_paramContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Structure_paramContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

tree::TerminalNode* MavkaParser::Structure_paramContext::KW_SPEC() {
  return getToken(MavkaParser::KW_SPEC, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Structure_paramContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::Structure_paramContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::Structure_paramContext::getRuleIndex() const {
  return MavkaParser::RuleStructure_param;
}

void MavkaParser::Structure_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStructure_param(this);
}

void MavkaParser::Structure_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStructure_param(this);
}


std::any MavkaParser::Structure_paramContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitStructure_param(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Structure_paramContext* MavkaParser::structure_param() {
  Structure_paramContext *_localctx = _tracker.createInstance<Structure_paramContext>(_ctx, getState());
  enterRule(_localctx, 28, MavkaParser::RuleStructure_param);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(300);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC) {
      setState(299);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_static = match(MavkaParser::KW_SPEC);
    }
    setState(302);
    antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_name = identifier();
    setState(304);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(303);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_type = type_value();
    }
    setState(308);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::EQUAL) {
      setState(306);
      match(MavkaParser::EQUAL);
      setState(307);
      antlrcpp::downCast<Structure_paramContext *>(_localctx)->sp_value = param_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GenericsContext ------------------------------------------------------------------

MavkaParser::GenericsContext::GenericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::GenericsContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::GenericsContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GenericsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::GenericsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::GenericsContext::getRuleIndex() const {
  return MavkaParser::RuleGenerics;
}

void MavkaParser::GenericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGenerics(this);
}

void MavkaParser::GenericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGenerics(this);
}


std::any MavkaParser::GenericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGenerics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::GenericsContext* MavkaParser::generics() {
  GenericsContext *_localctx = _tracker.createInstance<GenericsContext>(_ctx, getState());
  enterRule(_localctx, 30, MavkaParser::RuleGenerics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(310);
    identifier();
    setState(315);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMA) {
      setState(311);
      match(MavkaParser::COMA);
      setState(312);
      identifier();
      setState(317);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MockupContext ------------------------------------------------------------------

MavkaParser::MockupContext::MockupContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Mockup_moduleContext* MavkaParser::MockupContext::mockup_module() {
  return getRuleContext<MavkaParser::Mockup_moduleContext>(0);
}

MavkaParser::Mockup_structureContext* MavkaParser::MockupContext::mockup_structure() {
  return getRuleContext<MavkaParser::Mockup_structureContext>(0);
}

MavkaParser::Mockup_diiaContext* MavkaParser::MockupContext::mockup_diia() {
  return getRuleContext<MavkaParser::Mockup_diiaContext>(0);
}

MavkaParser::Mockup_subjectContext* MavkaParser::MockupContext::mockup_subject() {
  return getRuleContext<MavkaParser::Mockup_subjectContext>(0);
}


size_t MavkaParser::MockupContext::getRuleIndex() const {
  return MavkaParser::RuleMockup;
}

void MavkaParser::MockupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup(this);
}

void MavkaParser::MockupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup(this);
}


std::any MavkaParser::MockupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::MockupContext* MavkaParser::mockup() {
  MockupContext *_localctx = _tracker.createInstance<MockupContext>(_ctx, getState());
  enterRule(_localctx, 32, MavkaParser::RuleMockup);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(322);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(318);
      mockup_module();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(319);
      mockup_structure();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(320);
      mockup_diia();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(321);
      mockup_subject();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_moduleContext ------------------------------------------------------------------

MavkaParser::Mockup_moduleContext::Mockup_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::KW_MODULE() {
  return getToken(MavkaParser::KW_MODULE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_moduleContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_moduleContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_moduleContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_moduleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Mockup_module_bodyContext* MavkaParser::Mockup_moduleContext::mockup_module_body() {
  return getRuleContext<MavkaParser::Mockup_module_bodyContext>(0);
}


size_t MavkaParser::Mockup_moduleContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_module;
}

void MavkaParser::Mockup_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_module(this);
}

void MavkaParser::Mockup_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_module(this);
}


std::any MavkaParser::Mockup_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_module(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_moduleContext* MavkaParser::mockup_module() {
  Mockup_moduleContext *_localctx = _tracker.createInstance<Mockup_moduleContext>(_ctx, getState());
  enterRule(_localctx, 34, MavkaParser::RuleMockup_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(324);
    match(MavkaParser::KW_MOCKUP);
    setState(325);
    match(MavkaParser::KW_MODULE);
    setState(326);
    antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_name = identifier();
    setState(327);
    nl();
    setState(331);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_MOCKUP) {
      setState(328);
      antlrcpp::downCast<Mockup_moduleContext *>(_localctx)->mm_elements = mockup_module_body();
      setState(329);
      nl();
    }
    setState(333);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_module_bodyContext ------------------------------------------------------------------

MavkaParser::Mockup_module_bodyContext::Mockup_module_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::MockupContext *> MavkaParser::Mockup_module_bodyContext::mockup() {
  return getRuleContexts<MavkaParser::MockupContext>();
}

MavkaParser::MockupContext* MavkaParser::Mockup_module_bodyContext::mockup(size_t i) {
  return getRuleContext<MavkaParser::MockupContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_module_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_module_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Mockup_module_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_module_body;
}

void MavkaParser::Mockup_module_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_module_body(this);
}

void MavkaParser::Mockup_module_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_module_body(this);
}


std::any MavkaParser::Mockup_module_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_module_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_module_bodyContext* MavkaParser::mockup_module_body() {
  Mockup_module_bodyContext *_localctx = _tracker.createInstance<Mockup_module_bodyContext>(_ctx, getState());
  enterRule(_localctx, 36, MavkaParser::RuleMockup_module_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(335);
    mockup();
    setState(341);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(336);
        nl();
        setState(337);
        mockup(); 
      }
      setState(343);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structureContext ------------------------------------------------------------------

MavkaParser::Mockup_structureContext::Mockup_structureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_STRUCTURE() {
  return getToken(MavkaParser::KW_STRUCTURE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_structureContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_structureContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_structureContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<tree::TerminalNode *> MavkaParser::Mockup_structureContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Mockup_structureContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::Mockup_structureContext::KW_IS() {
  return getToken(MavkaParser::KW_IS, 0);
}

std::vector<MavkaParser::GenericsContext *> MavkaParser::Mockup_structureContext::generics() {
  return getRuleContexts<MavkaParser::GenericsContext>();
}

MavkaParser::GenericsContext* MavkaParser::Mockup_structureContext::generics(size_t i) {
  return getRuleContext<MavkaParser::GenericsContext>(i);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Mockup_structureContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::Mockup_structure_bodyContext* MavkaParser::Mockup_structureContext::mockup_structure_body() {
  return getRuleContext<MavkaParser::Mockup_structure_bodyContext>(0);
}


size_t MavkaParser::Mockup_structureContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure;
}

void MavkaParser::Mockup_structureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure(this);
}

void MavkaParser::Mockup_structureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure(this);
}


std::any MavkaParser::Mockup_structureContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structureContext* MavkaParser::mockup_structure() {
  Mockup_structureContext *_localctx = _tracker.createInstance<Mockup_structureContext>(_ctx, getState());
  enterRule(_localctx, 38, MavkaParser::RuleMockup_structure);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(344);
    match(MavkaParser::KW_MOCKUP);
    setState(345);
    match(MavkaParser::KW_STRUCTURE);
    setState(346);
    antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_name = identifier();
    setState(351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::LESSER) {
      setState(347);
      match(MavkaParser::LESSER);
      setState(348);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_generics = generics();
      setState(349);
      match(MavkaParser::GREATER);
    }
    setState(361);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_IS) {
      setState(353);
      match(MavkaParser::KW_IS);
      setState(354);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_parent = super_identifiers_chain(0);
      setState(359);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::LESSER) {
        setState(355);
        match(MavkaParser::LESSER);
        setState(356);
        antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_parent_generics = generics();
        setState(357);
        match(MavkaParser::GREATER);
      }
    }
    setState(363);
    nl();
    setState(367);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC

    || _la == MavkaParser::ID) {
      setState(364);
      antlrcpp::downCast<Mockup_structureContext *>(_localctx)->ms_elements = mockup_structure_body();
      setState(365);
      nl();
    }
    setState(369);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structure_bodyContext ------------------------------------------------------------------

MavkaParser::Mockup_structure_bodyContext::Mockup_structure_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Mockup_structure_body_elementContext *> MavkaParser::Mockup_structure_bodyContext::mockup_structure_body_element() {
  return getRuleContexts<MavkaParser::Mockup_structure_body_elementContext>();
}

MavkaParser::Mockup_structure_body_elementContext* MavkaParser::Mockup_structure_bodyContext::mockup_structure_body_element(size_t i) {
  return getRuleContext<MavkaParser::Mockup_structure_body_elementContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Mockup_structure_bodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Mockup_structure_bodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::Mockup_structure_bodyContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure_body;
}

void MavkaParser::Mockup_structure_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure_body(this);
}

void MavkaParser::Mockup_structure_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure_body(this);
}


std::any MavkaParser::Mockup_structure_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure_body(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structure_bodyContext* MavkaParser::mockup_structure_body() {
  Mockup_structure_bodyContext *_localctx = _tracker.createInstance<Mockup_structure_bodyContext>(_ctx, getState());
  enterRule(_localctx, 40, MavkaParser::RuleMockup_structure_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(371);
    mockup_structure_body_element();
    setState(377);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(372);
        nl();
        setState(373);
        mockup_structure_body_element(); 
      }
      setState(379);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_structure_body_elementContext ------------------------------------------------------------------

MavkaParser::Mockup_structure_body_elementContext::Mockup_structure_body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Structure_paramContext* MavkaParser::Mockup_structure_body_elementContext::structure_param() {
  return getRuleContext<MavkaParser::Structure_paramContext>(0);
}


size_t MavkaParser::Mockup_structure_body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_structure_body_element;
}

void MavkaParser::Mockup_structure_body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_structure_body_element(this);
}

void MavkaParser::Mockup_structure_body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_structure_body_element(this);
}


std::any MavkaParser::Mockup_structure_body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_structure_body_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_structure_body_elementContext* MavkaParser::mockup_structure_body_element() {
  Mockup_structure_body_elementContext *_localctx = _tracker.createInstance<Mockup_structure_body_elementContext>(_ctx, getState());
  enterRule(_localctx, 42, MavkaParser::RuleMockup_structure_body_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(380);
    structure_param();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_diiaContext ------------------------------------------------------------------

MavkaParser::Mockup_diiaContext::Mockup_diiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_DIIA() {
  return getToken(MavkaParser::KW_DIIA, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mockup_diiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mockup_diiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Mockup_diiaContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_diiaContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

tree::TerminalNode* MavkaParser::Mockup_diiaContext::KW_SPEC() {
  return getToken(MavkaParser::KW_SPEC, 0);
}

MavkaParser::GenericsContext* MavkaParser::Mockup_diiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::Mockup_diiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_diiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Mockup_diiaContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_diia;
}

void MavkaParser::Mockup_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_diia(this);
}

void MavkaParser::Mockup_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_diia(this);
}


std::any MavkaParser::Mockup_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_diia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_diiaContext* MavkaParser::mockup_diia() {
  Mockup_diiaContext *_localctx = _tracker.createInstance<Mockup_diiaContext>(_ctx, getState());
  enterRule(_localctx, 44, MavkaParser::RuleMockup_diia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(382);
    match(MavkaParser::KW_MOCKUP);
    setState(384);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_ASYNC) {
      setState(383);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_async = match(MavkaParser::KW_ASYNC);
    }
    setState(387);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC) {
      setState(386);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_static = match(MavkaParser::KW_SPEC);
    }
    setState(389);
    match(MavkaParser::KW_DIIA);
    setState(393);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
    case 1: {
      setState(390);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_structure = identifier();
      setState(391);
      match(MavkaParser::DOT);
      break;
    }

    default:
      break;
    }
    setState(395);
    antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_name = identifier();
    setState(400);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::LESSER) {
      setState(396);
      match(MavkaParser::LESSER);
      setState(397);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_generics = generics();
      setState(398);
      match(MavkaParser::GREATER);
    }
    setState(402);
    match(MavkaParser::PAREN_OPEN);
    setState(403);
    nls();
    setState(405);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::DOT

    || _la == MavkaParser::ID) {
      setState(404);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_params = params();
    }
    setState(407);
    nls();
    setState(408);
    match(MavkaParser::PAREN_CLOSE);
    setState(410);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(409);
      antlrcpp::downCast<Mockup_diiaContext *>(_localctx)->md_type = type_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mockup_subjectContext ------------------------------------------------------------------

MavkaParser::Mockup_subjectContext::Mockup_subjectContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::KW_MOCKUP() {
  return getToken(MavkaParser::KW_MOCKUP, 0);
}

tree::TerminalNode* MavkaParser::Mockup_subjectContext::KW_SUBJECT() {
  return getToken(MavkaParser::KW_SUBJECT, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mockup_subjectContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::Mockup_subjectContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Mockup_subjectContext::getRuleIndex() const {
  return MavkaParser::RuleMockup_subject;
}

void MavkaParser::Mockup_subjectContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMockup_subject(this);
}

void MavkaParser::Mockup_subjectContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMockup_subject(this);
}


std::any MavkaParser::Mockup_subjectContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMockup_subject(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mockup_subjectContext* MavkaParser::mockup_subject() {
  Mockup_subjectContext *_localctx = _tracker.createInstance<Mockup_subjectContext>(_ctx, getState());
  enterRule(_localctx, 46, MavkaParser::RuleMockup_subject);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(412);
    match(MavkaParser::KW_MOCKUP);
    setState(413);
    match(MavkaParser::KW_SUBJECT);
    setState(414);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_name = identifier();
    setState(415);
    antlrcpp::downCast<Mockup_subjectContext *>(_localctx)->ms_type = type_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DiiaContext ------------------------------------------------------------------

MavkaParser::DiiaContext::DiiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_DIIA() {
  return getToken(MavkaParser::KW_DIIA, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::DiiaContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::DiiaContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::DiiaContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::DiiaContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

tree::TerminalNode* MavkaParser::DiiaContext::KW_SPEC() {
  return getToken(MavkaParser::KW_SPEC, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::DiiaContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::DiiaContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

MavkaParser::GenericsContext* MavkaParser::DiiaContext::generics() {
  return getRuleContext<MavkaParser::GenericsContext>(0);
}

MavkaParser::ParamsContext* MavkaParser::DiiaContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::DiiaContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::BodyContext* MavkaParser::DiiaContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}

tree::TerminalNode* MavkaParser::DiiaContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}


size_t MavkaParser::DiiaContext::getRuleIndex() const {
  return MavkaParser::RuleDiia;
}

void MavkaParser::DiiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDiia(this);
}

void MavkaParser::DiiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDiia(this);
}


std::any MavkaParser::DiiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDiia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::DiiaContext* MavkaParser::diia() {
  DiiaContext *_localctx = _tracker.createInstance<DiiaContext>(_ctx, getState());
  enterRule(_localctx, 48, MavkaParser::RuleDiia);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(418);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_ASYNC) {
      setState(417);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_async = match(MavkaParser::KW_ASYNC);
    }
    setState(421);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SPEC) {
      setState(420);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_static = match(MavkaParser::KW_SPEC);
    }
    setState(423);
    match(MavkaParser::KW_DIIA);
    setState(430);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(427);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
      case 1: {
        setState(424);
        antlrcpp::downCast<DiiaContext *>(_localctx)->d_structure = identifier();
        setState(425);
        match(MavkaParser::DOT);
        break;
      }

      default:
        break;
      }
      setState(429);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_name = identifier();
    }
    setState(436);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::LESSER) {
      setState(432);
      match(MavkaParser::LESSER);
      setState(433);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_generics = generics();
      setState(434);
      match(MavkaParser::GREATER);
    }
    setState(438);
    match(MavkaParser::PAREN_OPEN);
    setState(439);
    nls();
    setState(441);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::DOT

    || _la == MavkaParser::ID) {
      setState(440);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_params = params();
    }
    setState(443);
    nls();
    setState(444);
    match(MavkaParser::PAREN_CLOSE);
    setState(446);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(445);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_type = type_value();
    }
    setState(448);
    nl();
    setState(452);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2908111274025619340) != 0) || _la == MavkaParser::MRM_DIIA

    || _la == MavkaParser::NL) {
      setState(449);
      antlrcpp::downCast<DiiaContext *>(_localctx)->d_body = body();
      setState(450);
      nl();
    }
    setState(454);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IfContext ------------------------------------------------------------------

MavkaParser::IfContext::IfContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::IfContext::KW_IF() {
  return getToken(MavkaParser::KW_IF, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::IfContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::IfContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

MavkaParser::ExprContext* MavkaParser::IfContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::IfContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::IfContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

tree::TerminalNode* MavkaParser::IfContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

tree::TerminalNode* MavkaParser::IfContext::KW_ELSE() {
  return getToken(MavkaParser::KW_ELSE, 0);
}

MavkaParser::IfContext* MavkaParser::IfContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}


size_t MavkaParser::IfContext::getRuleIndex() const {
  return MavkaParser::RuleIf;
}

void MavkaParser::IfContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf(this);
}

void MavkaParser::IfContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf(this);
}


std::any MavkaParser::IfContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIf(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::IfContext* MavkaParser::if_() {
  IfContext *_localctx = _tracker.createInstance<IfContext>(_ctx, getState());
  enterRule(_localctx, 50, MavkaParser::RuleIf);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(456);
    match(MavkaParser::KW_IF);
    setState(457);
    antlrcpp::downCast<IfContext *>(_localctx)->i_value = expr();
    setState(458);
    nl();
    setState(462);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2908111274025619340) != 0) || _la == MavkaParser::MRM_DIIA

    || _la == MavkaParser::NL) {
      setState(459);
      antlrcpp::downCast<IfContext *>(_localctx)->i_body = body();
      setState(460);
      nl();
    }
    setState(474);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(469);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::KW_ELSE) {
        setState(464);
        match(MavkaParser::KW_ELSE);
        setState(465);
        nl();
        setState(466);
        antlrcpp::downCast<IfContext *>(_localctx)->i_else_body = body();
        setState(467);
        nl();
      }
      setState(471);
      match(MavkaParser::KW_END);
      break;
    }

    case 2: {
      setState(472);
      match(MavkaParser::KW_ELSE);
      setState(473);
      antlrcpp::downCast<IfContext *>(_localctx)->i_else_if = if_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EachContext ------------------------------------------------------------------

MavkaParser::EachContext::EachContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::EachContext::KW_FOR() {
  return getToken(MavkaParser::KW_FOR, 0);
}

tree::TerminalNode* MavkaParser::EachContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::EachContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::EachContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::EachContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::AtomContext* MavkaParser::EachContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::FromtoContext* MavkaParser::EachContext::fromto() {
  return getRuleContext<MavkaParser::FromtoContext>(0);
}

tree::TerminalNode* MavkaParser::EachContext::COMA() {
  return getToken(MavkaParser::COMA, 0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::EachContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::EachContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

MavkaParser::BodyContext* MavkaParser::EachContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::EachContext::getRuleIndex() const {
  return MavkaParser::RuleEach;
}

void MavkaParser::EachContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEach(this);
}

void MavkaParser::EachContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEach(this);
}


std::any MavkaParser::EachContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitEach(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::EachContext* MavkaParser::each() {
  EachContext *_localctx = _tracker.createInstance<EachContext>(_ctx, getState());
  enterRule(_localctx, 52, MavkaParser::RuleEach);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(476);
    match(MavkaParser::KW_FOR);
    setState(479);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      setState(477);
      antlrcpp::downCast<EachContext *>(_localctx)->e_iterator = atom(0);
      break;
    }

    case 2: {
      setState(478);
      antlrcpp::downCast<EachContext *>(_localctx)->e_fromto = fromto();
      break;
    }

    default:
      break;
    }
    setState(481);
    match(MavkaParser::KW_AS);
    setState(485);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 43, _ctx)) {
    case 1: {
      setState(482);
      antlrcpp::downCast<EachContext *>(_localctx)->e_key_name = identifier();
      setState(483);
      match(MavkaParser::COMA);
      break;
    }

    default:
      break;
    }
    setState(488);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(487);
      antlrcpp::downCast<EachContext *>(_localctx)->e_name = identifier();
    }
    setState(490);
    nl();
    setState(494);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2908111274025619340) != 0) || _la == MavkaParser::MRM_DIIA

    || _la == MavkaParser::NL) {
      setState(491);
      antlrcpp::downCast<EachContext *>(_localctx)->e_body = body();
      setState(492);
      nl();
    }
    setState(496);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FromtoContext ------------------------------------------------------------------

MavkaParser::FromtoContext::FromtoContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Fromto_simpleContext* MavkaParser::FromtoContext::fromto_simple() {
  return getRuleContext<MavkaParser::Fromto_simpleContext>(0);
}

MavkaParser::Fromto_complexContext* MavkaParser::FromtoContext::fromto_complex() {
  return getRuleContext<MavkaParser::Fromto_complexContext>(0);
}


size_t MavkaParser::FromtoContext::getRuleIndex() const {
  return MavkaParser::RuleFromto;
}

void MavkaParser::FromtoContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto(this);
}

void MavkaParser::FromtoContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto(this);
}


std::any MavkaParser::FromtoContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::FromtoContext* MavkaParser::fromto() {
  FromtoContext *_localctx = _tracker.createInstance<FromtoContext>(_ctx, getState());
  enterRule(_localctx, 54, MavkaParser::RuleFromto);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(500);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 46, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(498);
      fromto_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(499);
      fromto_complex();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_simpleContext ------------------------------------------------------------------

MavkaParser::Fromto_simpleContext::Fromto_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_simpleContext::DOT() {
  return getTokens(MavkaParser::DOT);
}

tree::TerminalNode* MavkaParser::Fromto_simpleContext::DOT(size_t i) {
  return getToken(MavkaParser::DOT, i);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_simpleContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_simpleContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_simpleContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_simple;
}

void MavkaParser::Fromto_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_simple(this);
}

void MavkaParser::Fromto_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_simple(this);
}


std::any MavkaParser::Fromto_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_simpleContext* MavkaParser::fromto_simple() {
  Fromto_simpleContext *_localctx = _tracker.createInstance<Fromto_simpleContext>(_ctx, getState());
  enterRule(_localctx, 56, MavkaParser::RuleFromto_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(502);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_from = fromto_value();
    setState(503);
    match(MavkaParser::DOT);
    setState(504);
    match(MavkaParser::DOT);
    setState(506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9007229319512064) != 0)) {
      setState(505);
      antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to_symbol = fromto_to_symbol();
    }
    setState(508);
    antlrcpp::downCast<Fromto_simpleContext *>(_localctx)->fs_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_complexContext ------------------------------------------------------------------

MavkaParser::Fromto_complexContext::Fromto_complexContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_complexContext::DOT() {
  return getTokens(MavkaParser::DOT);
}

tree::TerminalNode* MavkaParser::Fromto_complexContext::DOT(size_t i) {
  return getToken(MavkaParser::DOT, i);
}

std::vector<MavkaParser::Fromto_valueContext *> MavkaParser::Fromto_complexContext::fromto_value() {
  return getRuleContexts<MavkaParser::Fromto_valueContext>();
}

MavkaParser::Fromto_valueContext* MavkaParser::Fromto_complexContext::fromto_value(size_t i) {
  return getRuleContext<MavkaParser::Fromto_valueContext>(i);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::Fromto_complexContext::fromto_middle_symbol() {
  return getRuleContext<MavkaParser::Fromto_middle_symbolContext>(0);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::Fromto_complexContext::fromto_to_symbol() {
  return getRuleContext<MavkaParser::Fromto_to_symbolContext>(0);
}


size_t MavkaParser::Fromto_complexContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_complex;
}

void MavkaParser::Fromto_complexContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_complex(this);
}

void MavkaParser::Fromto_complexContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_complex(this);
}


std::any MavkaParser::Fromto_complexContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_complex(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_complexContext* MavkaParser::fromto_complex() {
  Fromto_complexContext *_localctx = _tracker.createInstance<Fromto_complexContext>(_ctx, getState());
  enterRule(_localctx, 58, MavkaParser::RuleFromto_complex);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(510);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_from = fromto_value();
    setState(511);
    match(MavkaParser::DOT);
    setState(512);
    match(MavkaParser::DOT);
    setState(514);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 2130303778816) != 0)) {
      setState(513);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle_symbol = fromto_middle_symbol();
    }
    setState(516);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_middle = fromto_value();
    setState(517);
    match(MavkaParser::DOT);
    setState(518);
    match(MavkaParser::DOT);
    setState(520);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 9007229319512064) != 0)) {
      setState(519);
      antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to_symbol = fromto_to_symbol();
    }
    setState(522);
    antlrcpp::downCast<Fromto_complexContext *>(_localctx)->fc_to = fromto_value();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_valueContext ------------------------------------------------------------------

MavkaParser::Fromto_valueContext::Fromto_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Fromto_valueContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_value;
}

void MavkaParser::Fromto_valueContext::copyFrom(Fromto_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Fromto_idContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Fromto_idContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Fromto_idContext::Fromto_idContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_id(this);
}
void MavkaParser::Fromto_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_id(this);
}

std::any MavkaParser::Fromto_idContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_id(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_numberContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext* MavkaParser::Fromto_numberContext::number_token() {
  return getRuleContext<MavkaParser::Number_tokenContext>(0);
}

MavkaParser::Fromto_numberContext::Fromto_numberContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_number(this);
}
void MavkaParser::Fromto_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_number(this);
}

std::any MavkaParser::Fromto_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Fromto_nestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Fromto_nestedContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Fromto_nestedContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Fromto_nestedContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Fromto_nestedContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::ExprContext* MavkaParser::Fromto_nestedContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::Fromto_nestedContext::Fromto_nestedContext(Fromto_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Fromto_nestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_nested(this);
}
void MavkaParser::Fromto_nestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_nested(this);
}

std::any MavkaParser::Fromto_nestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_nested(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Fromto_valueContext* MavkaParser::fromto_value() {
  Fromto_valueContext *_localctx = _tracker.createInstance<Fromto_valueContext>(_ctx, getState());
  enterRule(_localctx, 60, MavkaParser::RuleFromto_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(532);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::INTEGER:
      case MavkaParser::FLOAT:
      case MavkaParser::HEX:
      case MavkaParser::BIN: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(524);
        number_token();
        break;
      }

      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_idContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(525);
        identifier();
        break;
      }

      case MavkaParser::PAREN_OPEN: {
        _localctx = _tracker.createInstance<MavkaParser::Fromto_nestedContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(526);
        match(MavkaParser::PAREN_OPEN);
        setState(527);
        nls();
        setState(528);
        antlrcpp::downCast<Fromto_nestedContext *>(_localctx)->fn_value = expr();
        setState(529);
        nls();
        setState(530);
        match(MavkaParser::PAREN_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_middle_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_middle_symbolContext::Fromto_middle_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_middle_symbolContext::MULTIPLY() {
  return getTokens(MavkaParser::MULTIPLY);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MULTIPLY(size_t i) {
  return getToken(MavkaParser::MULTIPLY, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_middle_symbolContext::DIVIDE() {
  return getTokens(MavkaParser::DIVIDE);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::DIVIDE(size_t i) {
  return getToken(MavkaParser::DIVIDE, i);
}

tree::TerminalNode* MavkaParser::Fromto_middle_symbolContext::MOD() {
  return getToken(MavkaParser::MOD, 0);
}


size_t MavkaParser::Fromto_middle_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_middle_symbol;
}

void MavkaParser::Fromto_middle_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_middle_symbol(this);
}

void MavkaParser::Fromto_middle_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_middle_symbol(this);
}


std::any MavkaParser::Fromto_middle_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_middle_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_middle_symbolContext* MavkaParser::fromto_middle_symbol() {
  Fromto_middle_symbolContext *_localctx = _tracker.createInstance<Fromto_middle_symbolContext>(_ctx, getState());
  enterRule(_localctx, 62, MavkaParser::RuleFromto_middle_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(543);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 51, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(534);
      match(MavkaParser::PLUS);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(535);
      match(MavkaParser::MINUS);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(536);
      match(MavkaParser::MULTIPLY);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(537);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(538);
      match(MavkaParser::MOD);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(539);
      match(MavkaParser::DIVIDE);
      setState(540);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(541);
      match(MavkaParser::MULTIPLY);
      setState(542);
      match(MavkaParser::MULTIPLY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fromto_to_symbolContext ------------------------------------------------------------------

MavkaParser::Fromto_to_symbolContext::Fromto_to_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::EXCLAMATION() {
  return getToken(MavkaParser::EXCLAMATION, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Fromto_to_symbolContext::EQUAL() {
  return getTokens(MavkaParser::EQUAL);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::EQUAL(size_t i) {
  return getToken(MavkaParser::EQUAL, i);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Fromto_to_symbolContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}


size_t MavkaParser::Fromto_to_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleFromto_to_symbol;
}

void MavkaParser::Fromto_to_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFromto_to_symbol(this);
}

void MavkaParser::Fromto_to_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFromto_to_symbol(this);
}


std::any MavkaParser::Fromto_to_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFromto_to_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Fromto_to_symbolContext* MavkaParser::fromto_to_symbol() {
  Fromto_to_symbolContext *_localctx = _tracker.createInstance<Fromto_to_symbolContext>(_ctx, getState());
  enterRule(_localctx, 64, MavkaParser::RuleFromto_to_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(555);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(545);
      match(MavkaParser::EXCLAMATION);
      setState(546);
      match(MavkaParser::EQUAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(547);
      match(MavkaParser::EQUAL);
      setState(548);
      match(MavkaParser::EQUAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(549);
      match(MavkaParser::GREATER);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(550);
      match(MavkaParser::LESSER);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(551);
      match(MavkaParser::GREATER);
      setState(552);
      match(MavkaParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(553);
      match(MavkaParser::LESSER);
      setState(554);
      match(MavkaParser::EQUAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhileContext ------------------------------------------------------------------

MavkaParser::WhileContext::WhileContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::WhileContext::KW_WHILE() {
  return getToken(MavkaParser::KW_WHILE, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::WhileContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::WhileContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::WhileContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

MavkaParser::ExprContext* MavkaParser::WhileContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::BodyContext* MavkaParser::WhileContext::body() {
  return getRuleContext<MavkaParser::BodyContext>(0);
}


size_t MavkaParser::WhileContext::getRuleIndex() const {
  return MavkaParser::RuleWhile;
}

void MavkaParser::WhileContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhile(this);
}

void MavkaParser::WhileContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhile(this);
}


std::any MavkaParser::WhileContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWhile(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::WhileContext* MavkaParser::while_() {
  WhileContext *_localctx = _tracker.createInstance<WhileContext>(_ctx, getState());
  enterRule(_localctx, 66, MavkaParser::RuleWhile);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(557);
    match(MavkaParser::KW_WHILE);
    setState(558);
    antlrcpp::downCast<WhileContext *>(_localctx)->w_value = expr();
    setState(559);
    nl();
    setState(563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2908111274025619340) != 0) || _la == MavkaParser::MRM_DIIA

    || _la == MavkaParser::NL) {
      setState(560);
      antlrcpp::downCast<WhileContext *>(_localctx)->w_body = body();
      setState(561);
      nl();
    }
    setState(565);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryContext ------------------------------------------------------------------

MavkaParser::TryContext::TryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::TryContext::KW_TRY() {
  return getToken(MavkaParser::KW_TRY, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::TryContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::TryContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::TryContext::KW_CATCH() {
  return getToken(MavkaParser::KW_CATCH, 0);
}

tree::TerminalNode* MavkaParser::TryContext::KW_END() {
  return getToken(MavkaParser::KW_END, 0);
}

std::vector<MavkaParser::BodyContext *> MavkaParser::TryContext::body() {
  return getRuleContexts<MavkaParser::BodyContext>();
}

MavkaParser::BodyContext* MavkaParser::TryContext::body(size_t i) {
  return getRuleContext<MavkaParser::BodyContext>(i);
}

MavkaParser::IdentifierContext* MavkaParser::TryContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}


size_t MavkaParser::TryContext::getRuleIndex() const {
  return MavkaParser::RuleTry;
}

void MavkaParser::TryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry(this);
}

void MavkaParser::TryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry(this);
}


std::any MavkaParser::TryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTry(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::TryContext* MavkaParser::try_() {
  TryContext *_localctx = _tracker.createInstance<TryContext>(_ctx, getState());
  enterRule(_localctx, 68, MavkaParser::RuleTry);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(567);
    match(MavkaParser::KW_TRY);
    setState(568);
    nl();
    setState(572);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2908111274025619340) != 0) || _la == MavkaParser::MRM_DIIA

    || _la == MavkaParser::NL) {
      setState(569);
      antlrcpp::downCast<TryContext *>(_localctx)->t_body = body();
      setState(570);
      nl();
    }
    setState(574);
    match(MavkaParser::KW_CATCH);
    setState(576);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(575);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_name = identifier();
    }
    setState(578);
    nl();
    setState(582);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -2908111274025619340) != 0) || _la == MavkaParser::MRM_DIIA

    || _la == MavkaParser::NL) {
      setState(579);
      antlrcpp::downCast<TryContext *>(_localctx)->tc_body = body();
      setState(580);
      nl();
    }
    setState(584);
    match(MavkaParser::KW_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TakeContext ------------------------------------------------------------------

MavkaParser::TakeContext::TakeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::TakeContext::KW_TAKE() {
  return getToken(MavkaParser::KW_TAKE, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::TakeContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::TakeContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::TakeContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::TakeContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Take_elementsContext* MavkaParser::TakeContext::take_elements() {
  return getRuleContext<MavkaParser::Take_elementsContext>(0);
}

tree::TerminalNode* MavkaParser::TakeContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}


size_t MavkaParser::TakeContext::getRuleIndex() const {
  return MavkaParser::RuleTake;
}

void MavkaParser::TakeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake(this);
}

void MavkaParser::TakeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake(this);
}


std::any MavkaParser::TakeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::TakeContext* MavkaParser::take() {
  TakeContext *_localctx = _tracker.createInstance<TakeContext>(_ctx, getState());
  enterRule(_localctx, 70, MavkaParser::RuleTake);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(586);
    match(MavkaParser::KW_TAKE);
    setState(588);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 57, _ctx)) {
    case 1: {
      setState(587);
      antlrcpp::downCast<TakeContext *>(_localctx)->tm_repo = identifier();
      break;
    }

    default:
      break;
    }
    setState(591);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::DOT) {
      setState(590);
      antlrcpp::downCast<TakeContext *>(_localctx)->tm_relative = match(MavkaParser::DOT);
    }
    setState(593);
    antlrcpp::downCast<TakeContext *>(_localctx)->tm_name_chain = identifiers_chain(0);
    setState(597);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::BRACKET_OPEN: {
        setState(594);
        antlrcpp::downCast<TakeContext *>(_localctx)->tm_elements = take_elements();
        break;
      }

      case MavkaParser::KW_AS: {
        setState(595);
        match(MavkaParser::KW_AS);
        setState(596);
        antlrcpp::downCast<TakeContext *>(_localctx)->tm_as = identifier();
        break;
      }

      case MavkaParser::EOF:
      case MavkaParser::NL: {
        break;
      }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Take_elementsContext ------------------------------------------------------------------

MavkaParser::Take_elementsContext::Take_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Take_elementsContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::Take_elementContext *> MavkaParser::Take_elementsContext::take_element() {
  return getRuleContexts<MavkaParser::Take_elementContext>();
}

MavkaParser::Take_elementContext* MavkaParser::Take_elementsContext::take_element(size_t i) {
  return getRuleContext<MavkaParser::Take_elementContext>(i);
}

tree::TerminalNode* MavkaParser::Take_elementsContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Take_elementsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Take_elementsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Take_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleTake_elements;
}

void MavkaParser::Take_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_elements(this);
}

void MavkaParser::Take_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_elements(this);
}


std::any MavkaParser::Take_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Take_elementsContext* MavkaParser::take_elements() {
  Take_elementsContext *_localctx = _tracker.createInstance<Take_elementsContext>(_ctx, getState());
  enterRule(_localctx, 72, MavkaParser::RuleTake_elements);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(599);
    match(MavkaParser::BRACKET_OPEN);
    setState(600);
    take_element();
    setState(605);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMA) {
      setState(601);
      match(MavkaParser::COMA);
      setState(602);
      take_element();
      setState(607);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(608);
    match(MavkaParser::BRACKET_CLOSE);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Take_elementContext ------------------------------------------------------------------

MavkaParser::Take_elementContext::Take_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Take_elementContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Take_elementContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::Take_elementContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}


size_t MavkaParser::Take_elementContext::getRuleIndex() const {
  return MavkaParser::RuleTake_element;
}

void MavkaParser::Take_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTake_element(this);
}

void MavkaParser::Take_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTake_element(this);
}


std::any MavkaParser::Take_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTake_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Take_elementContext* MavkaParser::take_element() {
  Take_elementContext *_localctx = _tracker.createInstance<Take_elementContext>(_ctx, getState());
  enterRule(_localctx, 74, MavkaParser::RuleTake_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(610);
    antlrcpp::downCast<Take_elementContext *>(_localctx)->tme_name = identifier();
    setState(613);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_AS) {
      setState(611);
      match(MavkaParser::KW_AS);
      setState(612);
      antlrcpp::downCast<Take_elementContext *>(_localctx)->tme_as = identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GiveContext ------------------------------------------------------------------

MavkaParser::GiveContext::GiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::GiveContext::KW_GIVE() {
  return getToken(MavkaParser::KW_GIVE, 0);
}

std::vector<MavkaParser::Give_elementContext *> MavkaParser::GiveContext::give_element() {
  return getRuleContexts<MavkaParser::Give_elementContext>();
}

MavkaParser::Give_elementContext* MavkaParser::GiveContext::give_element(size_t i) {
  return getRuleContext<MavkaParser::Give_elementContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::GiveContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::GiveContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GiveContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::GiveContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::GiveContext::getRuleIndex() const {
  return MavkaParser::RuleGive;
}

void MavkaParser::GiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive(this);
}

void MavkaParser::GiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive(this);
}


std::any MavkaParser::GiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::GiveContext* MavkaParser::give() {
  GiveContext *_localctx = _tracker.createInstance<GiveContext>(_ctx, getState());
  enterRule(_localctx, 76, MavkaParser::RuleGive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(615);
    match(MavkaParser::KW_GIVE);
    setState(616);
    give_element();
    setState(624);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(617);
        nls();
        setState(618);
        match(MavkaParser::COMA);
        setState(619);
        nls();
        setState(620);
        give_element(); 
      }
      setState(626);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Give_elementContext ------------------------------------------------------------------

MavkaParser::Give_elementContext::Give_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::IdentifierContext *> MavkaParser::Give_elementContext::identifier() {
  return getRuleContexts<MavkaParser::IdentifierContext>();
}

MavkaParser::IdentifierContext* MavkaParser::Give_elementContext::identifier(size_t i) {
  return getRuleContext<MavkaParser::IdentifierContext>(i);
}

tree::TerminalNode* MavkaParser::Give_elementContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}


size_t MavkaParser::Give_elementContext::getRuleIndex() const {
  return MavkaParser::RuleGive_element;
}

void MavkaParser::Give_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGive_element(this);
}

void MavkaParser::Give_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGive_element(this);
}


std::any MavkaParser::Give_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGive_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Give_elementContext* MavkaParser::give_element() {
  Give_elementContext *_localctx = _tracker.createInstance<Give_elementContext>(_ctx, getState());
  enterRule(_localctx, 78, MavkaParser::RuleGive_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(627);
    antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_name = identifier();
    setState(630);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_AS) {
      setState(628);
      match(MavkaParser::KW_AS);
      setState(629);
      antlrcpp::downCast<Give_elementContext *>(_localctx)->ge_as = identifier();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MrmContext ------------------------------------------------------------------

MavkaParser::MrmContext::MrmContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Mrm_elementContext* MavkaParser::MrmContext::mrm_element() {
  return getRuleContext<MavkaParser::Mrm_elementContext>(0);
}

MavkaParser::Mrm_element_closedContext* MavkaParser::MrmContext::mrm_element_closed() {
  return getRuleContext<MavkaParser::Mrm_element_closedContext>(0);
}

MavkaParser::Mrm_diiaContext* MavkaParser::MrmContext::mrm_diia() {
  return getRuleContext<MavkaParser::Mrm_diiaContext>(0);
}


size_t MavkaParser::MrmContext::getRuleIndex() const {
  return MavkaParser::RuleMrm;
}

void MavkaParser::MrmContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm(this);
}

void MavkaParser::MrmContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm(this);
}


std::any MavkaParser::MrmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::MrmContext* MavkaParser::mrm() {
  MrmContext *_localctx = _tracker.createInstance<MrmContext>(_ctx, getState());
  enterRule(_localctx, 80, MavkaParser::RuleMrm);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(635);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 64, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(632);
      mrm_element();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(633);
      mrm_element_closed();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(634);
      mrm_diia();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_elementContext ------------------------------------------------------------------

MavkaParser::Mrm_elementContext::Mrm_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Mrm_elementContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Mrm_elementContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mrm_elementContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mrm_elementContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mrm_elementContext::DIVIDE() {
  return getToken(MavkaParser::DIVIDE, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Mrm_elementContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Mrm_elementContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

std::vector<MavkaParser::Identifiers_chainContext *> MavkaParser::Mrm_elementContext::identifiers_chain() {
  return getRuleContexts<MavkaParser::Identifiers_chainContext>();
}

MavkaParser::Identifiers_chainContext* MavkaParser::Mrm_elementContext::identifiers_chain(size_t i) {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(i);
}

MavkaParser::Mrm_contentContext* MavkaParser::Mrm_elementContext::mrm_content() {
  return getRuleContext<MavkaParser::Mrm_contentContext>(0);
}

MavkaParser::Mrm_argsContext* MavkaParser::Mrm_elementContext::mrm_args() {
  return getRuleContext<MavkaParser::Mrm_argsContext>(0);
}


size_t MavkaParser::Mrm_elementContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_element;
}

void MavkaParser::Mrm_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_element(this);
}

void MavkaParser::Mrm_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_element(this);
}


std::any MavkaParser::Mrm_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_elementContext* MavkaParser::mrm_element() {
  Mrm_elementContext *_localctx = _tracker.createInstance<Mrm_elementContext>(_ctx, getState());
  enterRule(_localctx, 82, MavkaParser::RuleMrm_element);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(637);
    match(MavkaParser::LESSER);
    setState(638);
    nls();
    setState(639);
    antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_name = identifiers_chain(0);
    setState(640);
    nls();
    setState(642);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(641);
      antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_args = mrm_args();
    }
    setState(644);
    nls();
    setState(645);
    antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_me = match(MavkaParser::GREATER);
    setState(646);
    antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_content = mrm_content();
    setState(647);
    match(MavkaParser::LESSER);
    setState(648);
    match(MavkaParser::DIVIDE);
    setState(649);
    nls();
    setState(650);
    antlrcpp::downCast<Mrm_elementContext *>(_localctx)->me_end_name = identifiers_chain(0);
    setState(651);
    nls();
    setState(652);
    match(MavkaParser::GREATER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_element_closedContext ------------------------------------------------------------------

MavkaParser::Mrm_element_closedContext::Mrm_element_closedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mrm_element_closedContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mrm_element_closedContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mrm_element_closedContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Mrm_element_closedContext::DIVIDE() {
  return getToken(MavkaParser::DIVIDE, 0);
}

tree::TerminalNode* MavkaParser::Mrm_element_closedContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Mrm_element_closedContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

MavkaParser::Mrm_argsContext* MavkaParser::Mrm_element_closedContext::mrm_args() {
  return getRuleContext<MavkaParser::Mrm_argsContext>(0);
}


size_t MavkaParser::Mrm_element_closedContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_element_closed;
}

void MavkaParser::Mrm_element_closedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_element_closed(this);
}

void MavkaParser::Mrm_element_closedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_element_closed(this);
}


std::any MavkaParser::Mrm_element_closedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_element_closed(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_element_closedContext* MavkaParser::mrm_element_closed() {
  Mrm_element_closedContext *_localctx = _tracker.createInstance<Mrm_element_closedContext>(_ctx, getState());
  enterRule(_localctx, 84, MavkaParser::RuleMrm_element_closed);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(654);
    match(MavkaParser::LESSER);
    setState(655);
    nls();
    setState(656);
    antlrcpp::downCast<Mrm_element_closedContext *>(_localctx)->me_name = identifiers_chain(0);
    setState(657);
    nls();
    setState(659);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::ID) {
      setState(658);
      antlrcpp::downCast<Mrm_element_closedContext *>(_localctx)->me_args = mrm_args();
    }
    setState(661);
    nls();
    setState(662);
    match(MavkaParser::DIVIDE);
    setState(663);
    match(MavkaParser::GREATER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_argsContext ------------------------------------------------------------------

MavkaParser::Mrm_argsContext::Mrm_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Mrm_argContext *> MavkaParser::Mrm_argsContext::mrm_arg() {
  return getRuleContexts<MavkaParser::Mrm_argContext>();
}

MavkaParser::Mrm_argContext* MavkaParser::Mrm_argsContext::mrm_arg(size_t i) {
  return getRuleContext<MavkaParser::Mrm_argContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Mrm_argsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Mrm_argsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}


size_t MavkaParser::Mrm_argsContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_args;
}

void MavkaParser::Mrm_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_args(this);
}

void MavkaParser::Mrm_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_args(this);
}


std::any MavkaParser::Mrm_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_argsContext* MavkaParser::mrm_args() {
  Mrm_argsContext *_localctx = _tracker.createInstance<Mrm_argsContext>(_ctx, getState());
  enterRule(_localctx, 86, MavkaParser::RuleMrm_args);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(665);
    mrm_arg();
    setState(671);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(666);
        nls();
        setState(667);
        mrm_arg(); 
      }
      setState(673);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_argContext ------------------------------------------------------------------

MavkaParser::Mrm_argContext::Mrm_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mrm_argContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Mrm_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::AtomContext* MavkaParser::Mrm_argContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}


size_t MavkaParser::Mrm_argContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_arg;
}

void MavkaParser::Mrm_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_arg(this);
}

void MavkaParser::Mrm_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_arg(this);
}


std::any MavkaParser::Mrm_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_argContext* MavkaParser::mrm_arg() {
  Mrm_argContext *_localctx = _tracker.createInstance<Mrm_argContext>(_ctx, getState());
  enterRule(_localctx, 88, MavkaParser::RuleMrm_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(674);
    antlrcpp::downCast<Mrm_argContext *>(_localctx)->ma_name = identifier();
    setState(675);
    match(MavkaParser::EQUAL);
    setState(676);
    antlrcpp::downCast<Mrm_argContext *>(_localctx)->ma_value = atom(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_contentContext ------------------------------------------------------------------

MavkaParser::Mrm_contentContext::Mrm_contentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Mrm_chardataContext *> MavkaParser::Mrm_contentContext::mrm_chardata() {
  return getRuleContexts<MavkaParser::Mrm_chardataContext>();
}

MavkaParser::Mrm_chardataContext* MavkaParser::Mrm_contentContext::mrm_chardata(size_t i) {
  return getRuleContext<MavkaParser::Mrm_chardataContext>(i);
}

std::vector<MavkaParser::MrmContext *> MavkaParser::Mrm_contentContext::mrm() {
  return getRuleContexts<MavkaParser::MrmContext>();
}

MavkaParser::MrmContext* MavkaParser::Mrm_contentContext::mrm(size_t i) {
  return getRuleContext<MavkaParser::MrmContext>(i);
}


size_t MavkaParser::Mrm_contentContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_content;
}

void MavkaParser::Mrm_contentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_content(this);
}

void MavkaParser::Mrm_contentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_content(this);
}


std::any MavkaParser::Mrm_contentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_content(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_contentContext* MavkaParser::mrm_content() {
  Mrm_contentContext *_localctx = _tracker.createInstance<Mrm_contentContext>(_ctx, getState());
  enterRule(_localctx, 90, MavkaParser::RuleMrm_content);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(679);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17179869186) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 223) != 0)) {
      setState(678);
      mrm_chardata();
    }
    setState(687);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(681);
        mrm();
        setState(683);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & -17179869186) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 64)) & 223) != 0)) {
          setState(682);
          mrm_chardata();
        } 
      }
      setState(689);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_chardataContext ------------------------------------------------------------------

MavkaParser::Mrm_chardataContext::Mrm_chardataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Mrm_chardataContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Mrm_chardataContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Mrm_chardataContext::MRM_DIIA() {
  return getTokens(MavkaParser::MRM_DIIA);
}

tree::TerminalNode* MavkaParser::Mrm_chardataContext::MRM_DIIA(size_t i) {
  return getToken(MavkaParser::MRM_DIIA, i);
}


size_t MavkaParser::Mrm_chardataContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_chardata;
}

void MavkaParser::Mrm_chardataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_chardata(this);
}

void MavkaParser::Mrm_chardataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_chardata(this);
}


std::any MavkaParser::Mrm_chardataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_chardata(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_chardataContext* MavkaParser::mrm_chardata() {
  Mrm_chardataContext *_localctx = _tracker.createInstance<Mrm_chardataContext>(_ctx, getState());
  enterRule(_localctx, 92, MavkaParser::RuleMrm_chardata);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(691); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(690);
      _la = _input->LA(1);
      if (_la == 0 || _la == Token::EOF || (_la == MavkaParser::LESSER

      || _la == MavkaParser::MRM_DIIA)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(693); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & -17179869186) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & 223) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Mrm_diiaContext ------------------------------------------------------------------

MavkaParser::Mrm_diiaContext::Mrm_diiaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Mrm_diiaContext::MRM_DIIA() {
  return getToken(MavkaParser::MRM_DIIA, 0);
}


size_t MavkaParser::Mrm_diiaContext::getRuleIndex() const {
  return MavkaParser::RuleMrm_diia;
}

void MavkaParser::Mrm_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMrm_diia(this);
}

void MavkaParser::Mrm_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMrm_diia(this);
}


std::any MavkaParser::Mrm_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitMrm_diia(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Mrm_diiaContext* MavkaParser::mrm_diia() {
  Mrm_diiaContext *_localctx = _tracker.createInstance<Mrm_diiaContext>(_ctx, getState());
  enterRule(_localctx, 94, MavkaParser::RuleMrm_diia);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(695);
    match(MavkaParser::MRM_DIIA);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AtomContext ------------------------------------------------------------------

MavkaParser::AtomContext::AtomContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::AtomContext::getRuleIndex() const {
  return MavkaParser::RuleAtom;
}

void MavkaParser::AtomContext::copyFrom(AtomContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Get_elementContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Get_elementContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Get_elementContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Get_elementContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Get_elementContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::AtomContext* MavkaParser::Get_elementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Get_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::Get_elementContext::Get_elementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Get_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGet_element(this);
}
void MavkaParser::Get_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGet_element(this);
}

std::any MavkaParser::Get_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGet_element(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ChainContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::ChainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ChainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::ChainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::AtomContext* MavkaParser::ChainContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::ChainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ChainContext::ChainContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::ChainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain(this);
}
void MavkaParser::ChainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain(this);
}

std::any MavkaParser::ChainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitChain(this);
  else
    return visitor->visitChildren(this);
}
//----------------- String_valueContext ------------------------------------------------------------------

MavkaParser::StringContext* MavkaParser::String_valueContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}

MavkaParser::String_valueContext::String_valueContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::String_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterString_value(this);
}
void MavkaParser::String_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitString_value(this);
}

std::any MavkaParser::String_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitString_value(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Pre_incrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Pre_incrementContext::PLUS() {
  return getTokens(MavkaParser::PLUS);
}

tree::TerminalNode* MavkaParser::Pre_incrementContext::PLUS(size_t i) {
  return getToken(MavkaParser::PLUS, i);
}

MavkaParser::AtomContext* MavkaParser::Pre_incrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Pre_incrementContext::Pre_incrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_increment(this);
}
void MavkaParser::Pre_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_increment(this);
}

std::any MavkaParser::Pre_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_increment(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Bitwise_notContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Bitwise_notContext::TILDA() {
  return getToken(MavkaParser::TILDA, 0);
}

MavkaParser::AtomContext* MavkaParser::Bitwise_notContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Bitwise_notContext::Bitwise_notContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Bitwise_notContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_not(this);
}
void MavkaParser::Bitwise_notContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_not(this);
}

std::any MavkaParser::Bitwise_notContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_not(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Typeless_dictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Typeless_dictionaryContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Typeless_dictionaryContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Typeless_dictionaryContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Typeless_dictionaryContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::Dictionary_argsContext* MavkaParser::Typeless_dictionaryContext::dictionary_args() {
  return getRuleContext<MavkaParser::Dictionary_argsContext>(0);
}

MavkaParser::Typeless_dictionaryContext::Typeless_dictionaryContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Typeless_dictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeless_dictionary(this);
}
void MavkaParser::Typeless_dictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeless_dictionary(this);
}

std::any MavkaParser::Typeless_dictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTypeless_dictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PositiveContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::PositiveContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

MavkaParser::AtomContext* MavkaParser::PositiveContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::PositiveContext::PositiveContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::PositiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositive(this);
}
void MavkaParser::PositiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositive(this);
}

std::any MavkaParser::PositiveContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPositive(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NestedContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NestedContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::NestedContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::NestedContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::NestedContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::ExprContext* MavkaParser::NestedContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::NestedContext::NestedContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NestedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNested(this);
}
void MavkaParser::NestedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNested(this);
}

std::any MavkaParser::NestedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNested(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CallContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::CallContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::CallContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::CallContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::CallContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::AtomContext* MavkaParser::CallContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

tree::TerminalNode* MavkaParser::CallContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

MavkaParser::Call_genericsContext* MavkaParser::CallContext::call_generics() {
  return getRuleContext<MavkaParser::Call_genericsContext>(0);
}

tree::TerminalNode* MavkaParser::CallContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::ArgsContext* MavkaParser::CallContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::CallContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::CallContext::CallContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::CallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall(this);
}
void MavkaParser::CallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall(this);
}

std::any MavkaParser::CallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumberContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext* MavkaParser::NumberContext::number_token() {
  return getRuleContext<MavkaParser::Number_tokenContext>(0);
}

MavkaParser::NumberContext::NumberContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NumberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumber(this);
}
void MavkaParser::NumberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumber(this);
}

std::any MavkaParser::NumberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNumber(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NegativeContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NegativeContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

MavkaParser::AtomContext* MavkaParser::NegativeContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::NegativeContext::NegativeContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NegativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNegative(this);
}
void MavkaParser::NegativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNegative(this);
}

std::any MavkaParser::NegativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNegative(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NotContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::NotContext::EXCLAMATION() {
  return getToken(MavkaParser::EXCLAMATION, 0);
}

MavkaParser::AtomContext* MavkaParser::NotContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::NotContext::NotContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::NotContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNot(this);
}
void MavkaParser::NotContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNot(this);
}

std::any MavkaParser::NotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Typeless_arrayContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Typeless_arrayContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Typeless_arrayContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Typeless_arrayContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Typeless_arrayContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Array_elementsContext* MavkaParser::Typeless_arrayContext::array_elements() {
  return getRuleContext<MavkaParser::Array_elementsContext>(0);
}

MavkaParser::Typeless_arrayContext::Typeless_arrayContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Typeless_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeless_array(this);
}
void MavkaParser::Typeless_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeless_array(this);
}

std::any MavkaParser::Typeless_arrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTypeless_array(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Pre_decrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Pre_decrementContext::MINUS() {
  return getTokens(MavkaParser::MINUS);
}

tree::TerminalNode* MavkaParser::Pre_decrementContext::MINUS(size_t i) {
  return getToken(MavkaParser::MINUS, i);
}

MavkaParser::AtomContext* MavkaParser::Pre_decrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Pre_decrementContext::Pre_decrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Pre_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPre_decrement(this);
}
void MavkaParser::Pre_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPre_decrement(this);
}

std::any MavkaParser::Pre_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPre_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_decrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Post_decrementContext::MINUS() {
  return getTokens(MavkaParser::MINUS);
}

tree::TerminalNode* MavkaParser::Post_decrementContext::MINUS(size_t i) {
  return getToken(MavkaParser::MINUS, i);
}

MavkaParser::AtomContext* MavkaParser::Post_decrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Post_decrementContext::Post_decrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_decrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_decrement(this);
}
void MavkaParser::Post_decrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_decrement(this);
}

std::any MavkaParser::Post_decrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_decrement(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IdContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::IdContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::IdContext::IdContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::IdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterId(this);
}
void MavkaParser::IdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitId(this);
}

std::any MavkaParser::IdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitId(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Post_incrementContext ------------------------------------------------------------------

std::vector<tree::TerminalNode *> MavkaParser::Post_incrementContext::PLUS() {
  return getTokens(MavkaParser::PLUS);
}

tree::TerminalNode* MavkaParser::Post_incrementContext::PLUS(size_t i) {
  return getToken(MavkaParser::PLUS, i);
}

MavkaParser::AtomContext* MavkaParser::Post_incrementContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Post_incrementContext::Post_incrementContext(AtomContext *ctx) { copyFrom(ctx); }

void MavkaParser::Post_incrementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPost_increment(this);
}
void MavkaParser::Post_incrementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPost_increment(this);
}

std::any MavkaParser::Post_incrementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitPost_increment(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::AtomContext* MavkaParser::atom() {
   return atom(0);
}

MavkaParser::AtomContext* MavkaParser::atom(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::AtomContext *_localctx = _tracker.createInstance<AtomContext>(_ctx, parentState);
  MavkaParser::AtomContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 96;
  enterRecursionRule(_localctx, 96, MavkaParser::RuleAtom, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(737);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<NumberContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(698);
      number_token();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<String_valueContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(699);
      string();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<IdContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(700);
      identifier();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<Typeless_arrayContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(701);
      match(MavkaParser::BRACKET_OPEN);
      setState(702);
      nls();
      setState(704);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -2908111274032213948) != 0) || _la == MavkaParser::MRM_DIIA) {
        setState(703);
        antlrcpp::downCast<Typeless_arrayContext *>(_localctx)->a_elements = array_elements();
      }
      setState(706);
      nls();
      setState(707);
      match(MavkaParser::BRACKET_CLOSE);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<Typeless_dictionaryContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(709);
      match(MavkaParser::PAREN_OPEN);
      setState(710);
      nls();
      setState(712);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::ID

      || _la == MavkaParser::STRING) {
        setState(711);
        antlrcpp::downCast<Typeless_dictionaryContext *>(_localctx)->d_args = dictionary_args();
      }
      setState(714);
      nls();
      setState(715);
      match(MavkaParser::PAREN_CLOSE);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<PositiveContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(717);
      match(MavkaParser::PLUS);
      setState(718);
      antlrcpp::downCast<PositiveContext *>(_localctx)->p_value = atom(9);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<NegativeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(719);
      match(MavkaParser::MINUS);
      setState(720);
      antlrcpp::downCast<NegativeContext *>(_localctx)->n_value = atom(8);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<Pre_decrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(721);
      match(MavkaParser::MINUS);
      setState(722);
      match(MavkaParser::MINUS);
      setState(723);
      antlrcpp::downCast<Pre_decrementContext *>(_localctx)->pd_value = atom(7);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<Pre_incrementContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(724);
      match(MavkaParser::PLUS);
      setState(725);
      match(MavkaParser::PLUS);
      setState(726);
      antlrcpp::downCast<Pre_incrementContext *>(_localctx)->pi_value = atom(6);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<NotContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(727);
      match(MavkaParser::EXCLAMATION);
      setState(728);
      antlrcpp::downCast<NotContext *>(_localctx)->n_value = atom(3);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<Bitwise_notContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(729);
      match(MavkaParser::TILDA);
      setState(730);
      antlrcpp::downCast<Bitwise_notContext *>(_localctx)->bn_value = atom(2);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<NestedContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(731);
      match(MavkaParser::PAREN_OPEN);
      setState(732);
      nls();
      setState(733);
      antlrcpp::downCast<NestedContext *>(_localctx)->n_value = expr();
      setState(734);
      nls();
      setState(735);
      match(MavkaParser::PAREN_CLOSE);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(776);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(774);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ChainContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(739);

          if (!(precpred(_ctx, 14))) throw FailedPredicateException(this, "precpred(_ctx, 14)");
          setState(740);
          nls();
          setState(741);
          match(MavkaParser::DOT);
          setState(742);
          nls();
          setState(743);
          antlrcpp::downCast<ChainContext *>(_localctx)->c_right = identifier();
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<CallContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(745);

          if (!(precpred(_ctx, 13))) throw FailedPredicateException(this, "precpred(_ctx, 13)");
          setState(750);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MavkaParser::LESSER) {
            setState(746);
            match(MavkaParser::LESSER);
            setState(747);
            call_generics();
            setState(748);
            match(MavkaParser::GREATER);
          }
          setState(752);
          match(MavkaParser::PAREN_OPEN);
          setState(753);
          nls();
          setState(756);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 76, _ctx)) {
          case 1: {
            setState(754);
            antlrcpp::downCast<CallContext *>(_localctx)->c_args = args();
            break;
          }

          case 2: {
            setState(755);
            antlrcpp::downCast<CallContext *>(_localctx)->c_named_args = named_args();
            break;
          }

          default:
            break;
          }
          setState(758);
          nls();
          setState(759);
          match(MavkaParser::PAREN_CLOSE);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<Get_elementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->ge_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(761);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(762);
          match(MavkaParser::BRACKET_OPEN);
          setState(763);
          nls();
          setState(764);
          antlrcpp::downCast<Get_elementContext *>(_localctx)->ge_element = expr();
          setState(765);
          nls();
          setState(766);
          match(MavkaParser::BRACKET_CLOSE);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<Post_decrementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pd_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(768);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(769);
          match(MavkaParser::MINUS);
          setState(770);
          match(MavkaParser::MINUS);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<Post_incrementContext>(_tracker.createInstance<AtomContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->pi_value = previousContext;
          pushNewRecursionContext(newContext, startState, RuleAtom);
          setState(771);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(772);
          match(MavkaParser::PLUS);
          setState(773);
          match(MavkaParser::PLUS);
          break;
        }

        default:
          break;
        } 
      }
      setState(778);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ValueContext ------------------------------------------------------------------

MavkaParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ValueContext::getRuleIndex() const {
  return MavkaParser::RuleValue;
}

void MavkaParser::ValueContext::copyFrom(ValueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Arithmetic_mulContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::Arithmetic_mulContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Arithmetic_mulContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_mulContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_mulContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::Arithmetic_mulContext::arithmetic_op_mul() {
  return getRuleContext<MavkaParser::Arithmetic_op_mulContext>(0);
}

MavkaParser::Arithmetic_mulContext::Arithmetic_mulContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_mul(this);
}
void MavkaParser::Arithmetic_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_mul(this);
}

std::any MavkaParser::Arithmetic_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_mul(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Arithmetic_addContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::Arithmetic_addContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Arithmetic_addContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::Arithmetic_addContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::Arithmetic_addContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::Arithmetic_addContext::arithmetic_op_add() {
  return getRuleContext<MavkaParser::Arithmetic_op_addContext>(0);
}

MavkaParser::Arithmetic_addContext::Arithmetic_addContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Arithmetic_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_add(this);
}
void MavkaParser::Arithmetic_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_add(this);
}

std::any MavkaParser::Arithmetic_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_add(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ComparisonContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::ComparisonContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ComparisonContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::ComparisonContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::ComparisonContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Comparison_opContext* MavkaParser::ComparisonContext::comparison_op() {
  return getRuleContext<MavkaParser::Comparison_opContext>(0);
}

MavkaParser::ComparisonContext::ComparisonContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::ComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison(this);
}
void MavkaParser::ComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison(this);
}

std::any MavkaParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TestContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::TestContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::TestContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::TestContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::TestContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Test_opContext* MavkaParser::TestContext::test_op() {
  return getRuleContext<MavkaParser::Test_opContext>(0);
}

MavkaParser::TestContext::TestContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::TestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest(this);
}
void MavkaParser::TestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest(this);
}

std::any MavkaParser::TestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BitwiseContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::BitwiseContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::BitwiseContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<MavkaParser::ValueContext *> MavkaParser::BitwiseContext::value() {
  return getRuleContexts<MavkaParser::ValueContext>();
}

MavkaParser::ValueContext* MavkaParser::BitwiseContext::value(size_t i) {
  return getRuleContext<MavkaParser::ValueContext>(i);
}

MavkaParser::Bitwise_opContext* MavkaParser::BitwiseContext::bitwise_op() {
  return getRuleContext<MavkaParser::Bitwise_opContext>(0);
}

MavkaParser::BitwiseContext::BitwiseContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::BitwiseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise(this);
}
void MavkaParser::BitwiseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise(this);
}

std::any MavkaParser::BitwiseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Value_atomContext ------------------------------------------------------------------

MavkaParser::AtomContext* MavkaParser::Value_atomContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Value_atomContext::Value_atomContext(ValueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Value_atomContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue_atom(this);
}
void MavkaParser::Value_atomContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue_atom(this);
}

std::any MavkaParser::Value_atomContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitValue_atom(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ValueContext* MavkaParser::value() {
   return value(0);
}

MavkaParser::ValueContext* MavkaParser::value(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, parentState);
  MavkaParser::ValueContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 98;
  enterRecursionRule(_localctx, 98, MavkaParser::RuleValue, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<Value_atomContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(780);
    atom(0);
    _ctx->stop = _input->LT(-1);
    setState(814);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(812);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<Arithmetic_mulContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(782);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(783);
          nls();
          setState(784);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_operation = arithmetic_op_mul();
          setState(785);
          nls();
          setState(786);
          antlrcpp::downCast<Arithmetic_mulContext *>(_localctx)->a_right = value(6);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<Arithmetic_addContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->a_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(788);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(789);
          nls();
          setState(790);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_operation = arithmetic_op_add();
          setState(791);
          nls();
          setState(792);
          antlrcpp::downCast<Arithmetic_addContext *>(_localctx)->a_right = value(5);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<BitwiseContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->b_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(794);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(795);
          nls();
          setState(796);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_operation = bitwise_op();
          setState(797);
          nls();
          setState(798);
          antlrcpp::downCast<BitwiseContext *>(_localctx)->b_right = value(4);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<ComparisonContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->c_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(800);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(801);
          nls();
          setState(802);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_operation = comparison_op();
          setState(803);
          nls();
          setState(804);
          antlrcpp::downCast<ComparisonContext *>(_localctx)->c_right = value(3);
          break;
        }

        case 5: {
          auto newContext = _tracker.createInstance<TestContext>(_tracker.createInstance<ValueContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->t_left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValue);
          setState(806);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(807);
          nls();
          setState(808);
          antlrcpp::downCast<TestContext *>(_localctx)->t_operation = test_op();
          setState(809);
          nls();
          setState(810);
          antlrcpp::downCast<TestContext *>(_localctx)->t_right = value(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(816);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Call_genericsContext ------------------------------------------------------------------

MavkaParser::Call_genericsContext::Call_genericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_valueContext *> MavkaParser::Call_genericsContext::type_value() {
  return getRuleContexts<MavkaParser::Type_valueContext>();
}

MavkaParser::Type_valueContext* MavkaParser::Call_genericsContext::type_value(size_t i) {
  return getRuleContext<MavkaParser::Type_valueContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Call_genericsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Call_genericsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Call_genericsContext::getRuleIndex() const {
  return MavkaParser::RuleCall_generics;
}

void MavkaParser::Call_genericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_generics(this);
}

void MavkaParser::Call_genericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_generics(this);
}


std::any MavkaParser::Call_genericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_generics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Call_genericsContext* MavkaParser::call_generics() {
  Call_genericsContext *_localctx = _tracker.createInstance<Call_genericsContext>(_ctx, getState());
  enterRule(_localctx, 100, MavkaParser::RuleCall_generics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(817);
    type_value();
    setState(822);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMA) {
      setState(818);
      match(MavkaParser::COMA);
      setState(819);
      type_value();
      setState(824);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_elementsContext ------------------------------------------------------------------

MavkaParser::Array_elementsContext::Array_elementsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Array_elementContext *> MavkaParser::Array_elementsContext::array_element() {
  return getRuleContexts<MavkaParser::Array_elementContext>();
}

MavkaParser::Array_elementContext* MavkaParser::Array_elementsContext::array_element(size_t i) {
  return getRuleContext<MavkaParser::Array_elementContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Array_elementsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Array_elementsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Array_elementsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Array_elementsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Array_elementsContext::getRuleIndex() const {
  return MavkaParser::RuleArray_elements;
}

void MavkaParser::Array_elementsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_elements(this);
}

void MavkaParser::Array_elementsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_elements(this);
}


std::any MavkaParser::Array_elementsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_elements(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementsContext* MavkaParser::array_elements() {
  Array_elementsContext *_localctx = _tracker.createInstance<Array_elementsContext>(_ctx, getState());
  enterRule(_localctx, 102, MavkaParser::RuleArray_elements);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(825);
    array_element();
    setState(833);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(826);
        nls();
        setState(827);
        match(MavkaParser::COMA);
        setState(828);
        nls();
        setState(829);
        array_element(); 
      }
      setState(835);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_elementContext ------------------------------------------------------------------

MavkaParser::Array_elementContext::Array_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ExprContext* MavkaParser::Array_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Array_elementContext::getRuleIndex() const {
  return MavkaParser::RuleArray_element;
}

void MavkaParser::Array_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_element(this);
}

void MavkaParser::Array_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_element(this);
}


std::any MavkaParser::Array_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArray_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Array_elementContext* MavkaParser::array_element() {
  Array_elementContext *_localctx = _tracker.createInstance<Array_elementContext>(_ctx, getState());
  enterRule(_localctx, 104, MavkaParser::RuleArray_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(836);
    antlrcpp::downCast<Array_elementContext *>(_localctx)->ae_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argsContext ------------------------------------------------------------------

MavkaParser::Dictionary_argsContext::Dictionary_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Dictionary_argContext *> MavkaParser::Dictionary_argsContext::dictionary_arg() {
  return getRuleContexts<MavkaParser::Dictionary_argContext>();
}

MavkaParser::Dictionary_argContext* MavkaParser::Dictionary_argsContext::dictionary_arg(size_t i) {
  return getRuleContext<MavkaParser::Dictionary_argContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Dictionary_argsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Dictionary_argsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Dictionary_argsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Dictionary_argsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Dictionary_argsContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_args;
}

void MavkaParser::Dictionary_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_args(this);
}

void MavkaParser::Dictionary_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_args(this);
}


std::any MavkaParser::Dictionary_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argsContext* MavkaParser::dictionary_args() {
  Dictionary_argsContext *_localctx = _tracker.createInstance<Dictionary_argsContext>(_ctx, getState());
  enterRule(_localctx, 106, MavkaParser::RuleDictionary_args);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(838);
    dictionary_arg();
    setState(846);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(839);
        nls();
        setState(840);
        match(MavkaParser::COMA);
        setState(841);
        nls();
        setState(842);
        dictionary_arg(); 
      }
      setState(848);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Dictionary_argContext ------------------------------------------------------------------

MavkaParser::Dictionary_argContext::Dictionary_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::ExprContext* MavkaParser::Dictionary_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Dictionary_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Dictionary_argContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}


size_t MavkaParser::Dictionary_argContext::getRuleIndex() const {
  return MavkaParser::RuleDictionary_arg;
}

void MavkaParser::Dictionary_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDictionary_arg(this);
}

void MavkaParser::Dictionary_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDictionary_arg(this);
}


std::any MavkaParser::Dictionary_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitDictionary_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Dictionary_argContext* MavkaParser::dictionary_arg() {
  Dictionary_argContext *_localctx = _tracker.createInstance<Dictionary_argContext>(_ctx, getState());
  enterRule(_localctx, 108, MavkaParser::RuleDictionary_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(851);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        setState(849);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_id = identifier();
        break;
      }

      case MavkaParser::STRING: {
        setState(850);
        antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_name_string = match(MavkaParser::STRING);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(853);
    match(MavkaParser::EQUAL);
    setState(854);
    antlrcpp::downCast<Dictionary_argContext *>(_localctx)->da_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

MavkaParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::ExprContext::getRuleIndex() const {
  return MavkaParser::RuleExpr;
}

void MavkaParser::ExprContext::copyFrom(ExprContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Anonymous_diiaContext ------------------------------------------------------------------

MavkaParser::DiiaContext* MavkaParser::Anonymous_diiaContext::diia() {
  return getRuleContext<MavkaParser::DiiaContext>(0);
}

MavkaParser::Anonymous_diiaContext::Anonymous_diiaContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Anonymous_diiaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnonymous_diia(this);
}
void MavkaParser::Anonymous_diiaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnonymous_diia(this);
}

std::any MavkaParser::Anonymous_diiaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAnonymous_diia(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AsContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::AsContext::KW_AS() {
  return getToken(MavkaParser::KW_AS, 0);
}

MavkaParser::AtomContext* MavkaParser::AsContext::atom() {
  return getRuleContext<MavkaParser::AtomContext>(0);
}

MavkaParser::Type_value_itemContext* MavkaParser::AsContext::type_value_item() {
  return getRuleContext<MavkaParser::Type_value_itemContext>(0);
}

MavkaParser::AsContext::AsContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::AsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAs(this);
}
void MavkaParser::AsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAs(this);
}

std::any MavkaParser::AsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAs(this);
  else
    return visitor->visitChildren(this);
}
//----------------- WaitContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::WaitContext::KW_WAIT() {
  return getToken(MavkaParser::KW_WAIT, 0);
}

MavkaParser::ValueContext* MavkaParser::WaitContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::WaitContext::WaitContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::WaitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait(this);
}
void MavkaParser::WaitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait(this);
}

std::any MavkaParser::WaitContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Call_parentContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Call_parentContext::KW_PARENT() {
  return getToken(MavkaParser::KW_PARENT, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Call_parentContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Call_parentContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Call_parentContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Call_parentContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Call_parentContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ArgsContext* MavkaParser::Call_parentContext::args() {
  return getRuleContext<MavkaParser::ArgsContext>(0);
}

MavkaParser::Named_argsContext* MavkaParser::Call_parentContext::named_args() {
  return getRuleContext<MavkaParser::Named_argsContext>(0);
}

MavkaParser::Call_parentContext::Call_parentContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Call_parentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_parent(this);
}
void MavkaParser::Call_parentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_parent(this);
}

std::any MavkaParser::Call_parentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitCall_parent(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FunctionContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::FunctionContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::FunctionContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::FunctionContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::FunctionContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

tree::TerminalNode* MavkaParser::FunctionContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ExprContext* MavkaParser::FunctionContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::FunctionContext::KW_ASYNC() {
  return getToken(MavkaParser::KW_ASYNC, 0);
}

MavkaParser::ParamsContext* MavkaParser::FunctionContext::params() {
  return getRuleContext<MavkaParser::ParamsContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::FunctionContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::FunctionContext::FunctionContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::FunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunction(this);
}
void MavkaParser::FunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunction(this);
}

std::any MavkaParser::FunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleContext ------------------------------------------------------------------

MavkaParser::ValueContext* MavkaParser::SimpleContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

MavkaParser::SimpleContext::SimpleContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::SimpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimple(this);
}
void MavkaParser::SimpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimple(this);
}

std::any MavkaParser::SimpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSimple(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Expr_mrmContext ------------------------------------------------------------------

MavkaParser::MrmContext* MavkaParser::Expr_mrmContext::mrm() {
  return getRuleContext<MavkaParser::MrmContext>(0);
}

MavkaParser::Expr_mrmContext::Expr_mrmContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::Expr_mrmContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr_mrm(this);
}
void MavkaParser::Expr_mrmContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr_mrm(this);
}

std::any MavkaParser::Expr_mrmContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitExpr_mrm(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TernaryContext ------------------------------------------------------------------

std::vector<MavkaParser::NlsContext *> MavkaParser::TernaryContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::TernaryContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::TernaryContext::QUESTION() {
  return getToken(MavkaParser::QUESTION, 0);
}

tree::TerminalNode* MavkaParser::TernaryContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

MavkaParser::ValueContext* MavkaParser::TernaryContext::value() {
  return getRuleContext<MavkaParser::ValueContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::TernaryContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::TernaryContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::TernaryContext::TernaryContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::TernaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTernary(this);
}
void MavkaParser::TernaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTernary(this);
}

std::any MavkaParser::TernaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTernary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- GodContext ------------------------------------------------------------------

std::vector<MavkaParser::AtomContext *> MavkaParser::GodContext::atom() {
  return getRuleContexts<MavkaParser::AtomContext>();
}

MavkaParser::AtomContext* MavkaParser::GodContext::atom(size_t i) {
  return getRuleContext<MavkaParser::AtomContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::GodContext::KW_TA() {
  return getTokens(MavkaParser::KW_TA);
}

tree::TerminalNode* MavkaParser::GodContext::KW_TA(size_t i) {
  return getToken(MavkaParser::KW_TA, i);
}

MavkaParser::GodContext::GodContext(ExprContext *ctx) { copyFrom(ctx); }

void MavkaParser::GodContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGod(this);
}
void MavkaParser::GodContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGod(this);
}

std::any MavkaParser::GodContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitGod(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::ExprContext* MavkaParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 110, MavkaParser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(913);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<MavkaParser::Call_parentContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(856);
      match(MavkaParser::KW_PARENT);
      setState(857);
      nls();
      setState(858);
      match(MavkaParser::DOT);
      setState(859);
      nls();
      setState(860);
      antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_id = identifier();
      setState(861);
      match(MavkaParser::PAREN_OPEN);
      setState(862);
      nls();
      setState(865);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
      case 1: {
        setState(863);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_args = args();
        break;
      }

      case 2: {
        setState(864);
        antlrcpp::downCast<Call_parentContext *>(_localctx)->cp_named_args = named_args();
        break;
      }

      default:
        break;
      }
      setState(867);
      nls();
      setState(868);
      match(MavkaParser::PAREN_CLOSE);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<MavkaParser::SimpleContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(870);
      value(0);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<MavkaParser::AsContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(871);
      antlrcpp::downCast<AsContext *>(_localctx)->a_left = atom(0);
      setState(872);
      match(MavkaParser::KW_AS);
      setState(873);
      antlrcpp::downCast<AsContext *>(_localctx)->a_right = type_value_item();
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<MavkaParser::TernaryContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(875);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_value = value(0);
      setState(876);
      nls();
      setState(877);
      match(MavkaParser::QUESTION);
      setState(878);
      nls();
      setState(879);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_positive = expr();
      setState(880);
      nls();
      setState(881);
      match(MavkaParser::COLON);
      setState(882);
      nls();
      setState(883);
      antlrcpp::downCast<TernaryContext *>(_localctx)->t_negative = expr();
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<MavkaParser::GodContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(885);
      atom(0);
      setState(888); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(886);
        match(MavkaParser::KW_TA);
        setState(887);
        atom(0);
        setState(890); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == MavkaParser::KW_TA);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<MavkaParser::WaitContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(892);
      match(MavkaParser::KW_WAIT);
      setState(893);
      antlrcpp::downCast<WaitContext *>(_localctx)->w_value = value(0);
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<MavkaParser::FunctionContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(895);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::KW_ASYNC) {
        setState(894);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_async = match(MavkaParser::KW_ASYNC);
      }
      setState(897);
      match(MavkaParser::PAREN_OPEN);
      setState(898);
      nls();
      setState(900);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::DOT

      || _la == MavkaParser::ID) {
        setState(899);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_params = params();
      }
      setState(902);
      nls();
      setState(903);
      match(MavkaParser::PAREN_CLOSE);
      setState(905);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == MavkaParser::BRACKET_OPEN

      || _la == MavkaParser::ID) {
        setState(904);
        antlrcpp::downCast<FunctionContext *>(_localctx)->f_type = type_value();
      }
      setState(907);
      match(MavkaParser::COLON);
      setState(908);
      nls();
      setState(909);
      antlrcpp::downCast<FunctionContext *>(_localctx)->f_body = expr();
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<MavkaParser::Anonymous_diiaContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(911);
      diia();
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<MavkaParser::Expr_mrmContext>(_localctx);
      enterOuterAlt(_localctx, 9);
      setState(912);
      mrm();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowContext ------------------------------------------------------------------

MavkaParser::ThrowContext::ThrowContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::ThrowContext::KW_THROW() {
  return getToken(MavkaParser::KW_THROW, 0);
}

MavkaParser::ExprContext* MavkaParser::ThrowContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::ThrowContext::getRuleIndex() const {
  return MavkaParser::RuleThrow;
}

void MavkaParser::ThrowContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow(this);
}

void MavkaParser::ThrowContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow(this);
}


std::any MavkaParser::ThrowContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitThrow(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ThrowContext* MavkaParser::throw_() {
  ThrowContext *_localctx = _tracker.createInstance<ThrowContext>(_ctx, getState());
  enterRule(_localctx, 112, MavkaParser::RuleThrow);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(915);
    match(MavkaParser::KW_THROW);
    setState(916);
    antlrcpp::downCast<ThrowContext *>(_localctx)->t_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignContext ------------------------------------------------------------------

MavkaParser::AssignContext::AssignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Assign_simpleContext* MavkaParser::AssignContext::assign_simple() {
  return getRuleContext<MavkaParser::Assign_simpleContext>(0);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::AssignContext::assign_by_identifier() {
  return getRuleContext<MavkaParser::Assign_by_identifierContext>(0);
}

MavkaParser::Assign_by_elementContext* MavkaParser::AssignContext::assign_by_element() {
  return getRuleContext<MavkaParser::Assign_by_elementContext>(0);
}


size_t MavkaParser::AssignContext::getRuleIndex() const {
  return MavkaParser::RuleAssign;
}

void MavkaParser::AssignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign(this);
}

void MavkaParser::AssignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign(this);
}


std::any MavkaParser::AssignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::AssignContext* MavkaParser::assign() {
  AssignContext *_localctx = _tracker.createInstance<AssignContext>(_ctx, getState());
  enterRule(_localctx, 114, MavkaParser::RuleAssign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(921);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(918);
      assign_simple();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(919);
      assign_by_identifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(920);
      assign_by_element();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_simpleContext ------------------------------------------------------------------

MavkaParser::Assign_simpleContext::Assign_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Assign_simpleContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_simpleContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_simpleContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

tree::TerminalNode* MavkaParser::Assign_simpleContext::KW_SUBJECT() {
  return getToken(MavkaParser::KW_SUBJECT, 0);
}

MavkaParser::Type_valueContext* MavkaParser::Assign_simpleContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::Assign_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_simple;
}

void MavkaParser::Assign_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_simple(this);
}

void MavkaParser::Assign_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_simple(this);
}


std::any MavkaParser::Assign_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_simpleContext* MavkaParser::assign_simple() {
  Assign_simpleContext *_localctx = _tracker.createInstance<Assign_simpleContext>(_ctx, getState());
  enterRule(_localctx, 116, MavkaParser::RuleAssign_simple);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(924);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::KW_SUBJECT) {
      setState(923);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_subject = match(MavkaParser::KW_SUBJECT);
    }
    setState(926);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_identifier = identifier();
    setState(928);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(927);
      antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_type = type_value();
    }
    setState(930);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_symbol = assign_symbol();
    setState(931);
    antlrcpp::downCast<Assign_simpleContext *>(_localctx)->as_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_identifierContext ------------------------------------------------------------------

MavkaParser::Assign_by_identifierContext::Assign_by_identifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Assign_by_identifierContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Assign_by_identifierContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Assign_by_identifierContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_identifierContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

MavkaParser::IdentifierContext* MavkaParser::Assign_by_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_identifierContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Assign_by_identifierContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Assign_by_identifierContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_identifier;
}

void MavkaParser::Assign_by_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_identifier(this);
}

void MavkaParser::Assign_by_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_identifier(this);
}


std::any MavkaParser::Assign_by_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_identifier(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_identifierContext* MavkaParser::assign_by_identifier() {
  Assign_by_identifierContext *_localctx = _tracker.createInstance<Assign_by_identifierContext>(_ctx, getState());
  enterRule(_localctx, 118, MavkaParser::RuleAssign_by_identifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(933);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_left = super_identifiers_chain(0);
    setState(934);
    nls();
    setState(935);
    match(MavkaParser::DOT);
    setState(936);
    nls();
    setState(937);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_identifier = identifier();
    setState(938);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_symbol = assign_symbol();
    setState(939);
    antlrcpp::downCast<Assign_by_identifierContext *>(_localctx)->abi_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_by_elementContext ------------------------------------------------------------------

MavkaParser::Assign_by_elementContext::Assign_by_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Assign_by_elementContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Assign_by_elementContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Assign_by_elementContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Assign_by_elementContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

std::vector<MavkaParser::ExprContext *> MavkaParser::Assign_by_elementContext::expr() {
  return getRuleContexts<MavkaParser::ExprContext>();
}

MavkaParser::ExprContext* MavkaParser::Assign_by_elementContext::expr(size_t i) {
  return getRuleContext<MavkaParser::ExprContext>(i);
}

MavkaParser::Assign_symbolContext* MavkaParser::Assign_by_elementContext::assign_symbol() {
  return getRuleContext<MavkaParser::Assign_symbolContext>(0);
}


size_t MavkaParser::Assign_by_elementContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_by_element;
}

void MavkaParser::Assign_by_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_by_element(this);
}

void MavkaParser::Assign_by_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_by_element(this);
}


std::any MavkaParser::Assign_by_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_by_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_by_elementContext* MavkaParser::assign_by_element() {
  Assign_by_elementContext *_localctx = _tracker.createInstance<Assign_by_elementContext>(_ctx, getState());
  enterRule(_localctx, 120, MavkaParser::RuleAssign_by_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(941);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_left = super_identifiers_chain(0);
    setState(942);
    match(MavkaParser::BRACKET_OPEN);
    setState(943);
    nls();
    setState(944);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_index = expr();
    setState(945);
    nls();
    setState(946);
    match(MavkaParser::BRACKET_CLOSE);
    setState(947);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_symbol = assign_symbol();
    setState(948);
    antlrcpp::downCast<Assign_by_elementContext *>(_localctx)->abe_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Assign_symbolContext ------------------------------------------------------------------

MavkaParser::Assign_symbolContext::Assign_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::KW_TSE() {
  return getToken(MavkaParser::KW_TSE, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::COLON() {
  return getToken(MavkaParser::COLON, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::MULTIPLY() {
  return getTokens(MavkaParser::MULTIPLY);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::MULTIPLY(size_t i) {
  return getToken(MavkaParser::MULTIPLY, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::DIVIDE() {
  return getTokens(MavkaParser::DIVIDE);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::DIVIDE(size_t i) {
  return getToken(MavkaParser::DIVIDE, i);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::MOD() {
  return getToken(MavkaParser::MOD, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::AND() {
  return getTokens(MavkaParser::AND);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::AND(size_t i) {
  return getToken(MavkaParser::AND, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::POWER() {
  return getToken(MavkaParser::POWER, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Assign_symbolContext::QUESTION() {
  return getTokens(MavkaParser::QUESTION);
}

tree::TerminalNode* MavkaParser::Assign_symbolContext::QUESTION(size_t i) {
  return getToken(MavkaParser::QUESTION, i);
}


size_t MavkaParser::Assign_symbolContext::getRuleIndex() const {
  return MavkaParser::RuleAssign_symbol;
}

void MavkaParser::Assign_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssign_symbol(this);
}

void MavkaParser::Assign_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssign_symbol(this);
}


std::any MavkaParser::Assign_symbolContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitAssign_symbol(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Assign_symbolContext* MavkaParser::assign_symbol() {
  Assign_symbolContext *_localctx = _tracker.createInstance<Assign_symbolContext>(_ctx, getState());
  enterRule(_localctx, 122, MavkaParser::RuleAssign_symbol);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(991);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(950);
      match(MavkaParser::KW_TSE);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(951);
      match(MavkaParser::EQUAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(952);
      match(MavkaParser::COLON);
      setState(953);
      match(MavkaParser::EQUAL);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(954);
      match(MavkaParser::PLUS);
      setState(955);
      match(MavkaParser::EQUAL);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(956);
      match(MavkaParser::MINUS);
      setState(957);
      match(MavkaParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(958);
      match(MavkaParser::MULTIPLY);
      setState(959);
      match(MavkaParser::EQUAL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(960);
      match(MavkaParser::DIVIDE);
      setState(961);
      match(MavkaParser::EQUAL);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(962);
      match(MavkaParser::DIVIDE);
      setState(963);
      match(MavkaParser::DIVIDE);
      setState(964);
      match(MavkaParser::EQUAL);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(965);
      match(MavkaParser::MOD);
      setState(966);
      match(MavkaParser::EQUAL);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(967);
      match(MavkaParser::MULTIPLY);
      setState(968);
      match(MavkaParser::MULTIPLY);
      setState(969);
      match(MavkaParser::EQUAL);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(970);
      match(MavkaParser::AND);
      setState(971);
      match(MavkaParser::EQUAL);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(972);
      match(MavkaParser::OR);
      setState(973);
      match(MavkaParser::EQUAL);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(974);
      match(MavkaParser::LESSER);
      setState(975);
      match(MavkaParser::LESSER);
      setState(976);
      match(MavkaParser::EQUAL);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(977);
      match(MavkaParser::GREATER);
      setState(978);
      match(MavkaParser::GREATER);
      setState(979);
      match(MavkaParser::EQUAL);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(980);
      match(MavkaParser::POWER);
      setState(981);
      match(MavkaParser::EQUAL);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(982);
      match(MavkaParser::AND);
      setState(983);
      match(MavkaParser::AND);
      setState(984);
      match(MavkaParser::EQUAL);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(985);
      match(MavkaParser::OR);
      setState(986);
      match(MavkaParser::OR);
      setState(987);
      match(MavkaParser::EQUAL);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(988);
      match(MavkaParser::QUESTION);
      setState(989);
      match(MavkaParser::QUESTION);
      setState(990);
      match(MavkaParser::EQUAL);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Wait_assignContext ------------------------------------------------------------------

MavkaParser::Wait_assignContext::Wait_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Wait_assignContext::KW_WAIT() {
  return getToken(MavkaParser::KW_WAIT, 0);
}

MavkaParser::AssignContext* MavkaParser::Wait_assignContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}


size_t MavkaParser::Wait_assignContext::getRuleIndex() const {
  return MavkaParser::RuleWait_assign;
}

void MavkaParser::Wait_assignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWait_assign(this);
}

void MavkaParser::Wait_assignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWait_assign(this);
}


std::any MavkaParser::Wait_assignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitWait_assign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Wait_assignContext* MavkaParser::wait_assign() {
  Wait_assignContext *_localctx = _tracker.createInstance<Wait_assignContext>(_ctx, getState());
  enterRule(_localctx, 124, MavkaParser::RuleWait_assign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(993);
    match(MavkaParser::KW_WAIT);
    setState(994);
    antlrcpp::downCast<Wait_assignContext *>(_localctx)->wa_assign = assign();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Identifiers_chainContext::Identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Identifiers_chainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Identifiers_chainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::Identifiers_chainContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}


size_t MavkaParser::Identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleIdentifiers_chain;
}

void MavkaParser::Identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdentifiers_chain(this);
}

void MavkaParser::Identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdentifiers_chain(this);
}


std::any MavkaParser::Identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitIdentifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain() {
   return identifiers_chain(0);
}

MavkaParser::Identifiers_chainContext* MavkaParser::identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Identifiers_chainContext *_localctx = _tracker.createInstance<Identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 126;
  enterRecursionRule(_localctx, 126, MavkaParser::RuleIdentifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(997);
    antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(1007);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<Identifiers_chainContext>(parentContext, parentState);
        _localctx->ic_left = previousContext;
        pushNewRecursionContext(_localctx, startState, RuleIdentifiers_chain);
        setState(999);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(1000);
        nls();
        setState(1001);
        match(MavkaParser::DOT);
        setState(1002);
        nls();
        setState(1003);
        antlrcpp::downCast<Identifiers_chainContext *>(_localctx)->ic_right = identifier(); 
      }
      setState(1009);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Super_identifiers_chainContext ------------------------------------------------------------------

MavkaParser::Super_identifiers_chainContext::Super_identifiers_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::Super_identifiers_chainContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Super_identifiers_chainContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Super_identifiers_chainContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::DOT() {
  return getToken(MavkaParser::DOT, 0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::Super_identifiers_chainContext::super_identifiers_chain() {
  return getRuleContext<MavkaParser::Super_identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Super_identifiers_chainContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::ExprContext* MavkaParser::Super_identifiers_chainContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Super_identifiers_chainContext::getRuleIndex() const {
  return MavkaParser::RuleSuper_identifiers_chain;
}

void MavkaParser::Super_identifiers_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSuper_identifiers_chain(this);
}

void MavkaParser::Super_identifiers_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSuper_identifiers_chain(this);
}


std::any MavkaParser::Super_identifiers_chainContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitSuper_identifiers_chain(this);
  else
    return visitor->visitChildren(this);
}


MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain() {
   return super_identifiers_chain(0);
}

MavkaParser::Super_identifiers_chainContext* MavkaParser::super_identifiers_chain(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  MavkaParser::Super_identifiers_chainContext *_localctx = _tracker.createInstance<Super_identifiers_chainContext>(_ctx, parentState);
  MavkaParser::Super_identifiers_chainContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 128;
  enterRecursionRule(_localctx, 128, MavkaParser::RuleSuper_identifiers_chain, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1011);
    antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_identifier = identifier();
    _ctx->stop = _input->LT(-1);
    setState(1028);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(1026);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 96, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(1013);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(1014);
          nls();
          setState(1015);
          match(MavkaParser::DOT);
          setState(1016);
          nls();
          setState(1017);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_right = identifier();
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<Super_identifiers_chainContext>(parentContext, parentState);
          _localctx->sic_left = previousContext;
          pushNewRecursionContext(_localctx, startState, RuleSuper_identifiers_chain);
          setState(1019);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(1020);
          match(MavkaParser::BRACKET_OPEN);
          setState(1021);
          nls();
          setState(1022);
          antlrcpp::downCast<Super_identifiers_chainContext *>(_localctx)->sic_index = expr();
          setState(1023);
          nls();
          setState(1024);
          match(MavkaParser::BRACKET_CLOSE);
          break;
        }

        default:
          break;
        } 
      }
      setState(1030);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- Type_valueContext ------------------------------------------------------------------

MavkaParser::Type_valueContext::Type_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_value_itemContext *> MavkaParser::Type_valueContext::type_value_item() {
  return getRuleContexts<MavkaParser::Type_value_itemContext>();
}

MavkaParser::Type_value_itemContext* MavkaParser::Type_valueContext::type_value_item(size_t i) {
  return getRuleContext<MavkaParser::Type_value_itemContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Type_valueContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_valueContext::KW_OR() {
  return getTokens(MavkaParser::KW_OR);
}

tree::TerminalNode* MavkaParser::Type_valueContext::KW_OR(size_t i) {
  return getToken(MavkaParser::KW_OR, i);
}


size_t MavkaParser::Type_valueContext::getRuleIndex() const {
  return MavkaParser::RuleType_value;
}

void MavkaParser::Type_valueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value(this);
}

void MavkaParser::Type_valueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value(this);
}


std::any MavkaParser::Type_valueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_valueContext* MavkaParser::type_value() {
  Type_valueContext *_localctx = _tracker.createInstance<Type_valueContext>(_ctx, getState());
  enterRule(_localctx, 130, MavkaParser::RuleType_value);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1031);
    type_value_item();
    setState(1036);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1032);
        _la = _input->LA(1);
        if (!(_la == MavkaParser::KW_OR

        || _la == MavkaParser::OR)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(1033);
        type_value_item(); 
      }
      setState(1038);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_itemContext ------------------------------------------------------------------

MavkaParser::Type_value_itemContext::Type_value_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Type_value_item_simpleContext* MavkaParser::Type_value_itemContext::type_value_item_simple() {
  return getRuleContext<MavkaParser::Type_value_item_simpleContext>(0);
}

MavkaParser::Type_value_item_arrayContext* MavkaParser::Type_value_itemContext::type_value_item_array() {
  return getRuleContext<MavkaParser::Type_value_item_arrayContext>(0);
}


size_t MavkaParser::Type_value_itemContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item;
}

void MavkaParser::Type_value_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item(this);
}

void MavkaParser::Type_value_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item(this);
}


std::any MavkaParser::Type_value_itemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_itemContext* MavkaParser::type_value_item() {
  Type_value_itemContext *_localctx = _tracker.createInstance<Type_value_itemContext>(_ctx, getState());
  enterRule(_localctx, 132, MavkaParser::RuleType_value_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1041);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1039);
        type_value_item_simple();
        break;
      }

      case MavkaParser::BRACKET_OPEN: {
        enterOuterAlt(_localctx, 2);
        setState(1040);
        type_value_item_array();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_simpleContext ------------------------------------------------------------------

MavkaParser::Type_value_item_simpleContext::Type_value_item_simpleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Identifiers_chainContext* MavkaParser::Type_value_item_simpleContext::identifiers_chain() {
  return getRuleContext<MavkaParser::Identifiers_chainContext>(0);
}

tree::TerminalNode* MavkaParser::Type_value_item_simpleContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Type_value_item_simpleContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

MavkaParser::Type_value_item_genericsContext* MavkaParser::Type_value_item_simpleContext::type_value_item_generics() {
  return getRuleContext<MavkaParser::Type_value_item_genericsContext>(0);
}


size_t MavkaParser::Type_value_item_simpleContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_simple;
}

void MavkaParser::Type_value_item_simpleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_simple(this);
}

void MavkaParser::Type_value_item_simpleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_simple(this);
}


std::any MavkaParser::Type_value_item_simpleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_simple(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_simpleContext* MavkaParser::type_value_item_simple() {
  Type_value_item_simpleContext *_localctx = _tracker.createInstance<Type_value_item_simpleContext>(_ctx, getState());
  enterRule(_localctx, 134, MavkaParser::RuleType_value_item_simple);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1043);
    antlrcpp::downCast<Type_value_item_simpleContext *>(_localctx)->tvi_value = identifiers_chain(0);
    setState(1048);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx)) {
    case 1: {
      setState(1044);
      match(MavkaParser::LESSER);
      setState(1045);
      antlrcpp::downCast<Type_value_item_simpleContext *>(_localctx)->tvi_generics = type_value_item_generics();
      setState(1046);
      match(MavkaParser::GREATER);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_genericsContext ------------------------------------------------------------------

MavkaParser::Type_value_item_genericsContext::Type_value_item_genericsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Type_valueContext *> MavkaParser::Type_value_item_genericsContext::type_value() {
  return getRuleContexts<MavkaParser::Type_valueContext>();
}

MavkaParser::Type_valueContext* MavkaParser::Type_value_item_genericsContext::type_value(size_t i) {
  return getRuleContext<MavkaParser::Type_valueContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Type_value_item_genericsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Type_value_item_genericsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Type_value_item_genericsContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_generics;
}

void MavkaParser::Type_value_item_genericsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_generics(this);
}

void MavkaParser::Type_value_item_genericsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_generics(this);
}


std::any MavkaParser::Type_value_item_genericsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_generics(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_genericsContext* MavkaParser::type_value_item_generics() {
  Type_value_item_genericsContext *_localctx = _tracker.createInstance<Type_value_item_genericsContext>(_ctx, getState());
  enterRule(_localctx, 136, MavkaParser::RuleType_value_item_generics);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1050);
    type_value();
    setState(1055);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == MavkaParser::COMA) {
      setState(1051);
      match(MavkaParser::COMA);
      setState(1052);
      type_value();
      setState(1057);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_value_item_arrayContext ------------------------------------------------------------------

MavkaParser::Type_value_item_arrayContext::Type_value_item_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Type_value_item_arrayContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Type_value_item_arrayContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Type_value_itemContext* MavkaParser::Type_value_item_arrayContext::type_value_item() {
  return getRuleContext<MavkaParser::Type_value_itemContext>(0);
}


size_t MavkaParser::Type_value_item_arrayContext::getRuleIndex() const {
  return MavkaParser::RuleType_value_item_array;
}

void MavkaParser::Type_value_item_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_value_item_array(this);
}

void MavkaParser::Type_value_item_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_value_item_array(this);
}


std::any MavkaParser::Type_value_item_arrayContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitType_value_item_array(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Type_value_item_arrayContext* MavkaParser::type_value_item_array() {
  Type_value_item_arrayContext *_localctx = _tracker.createInstance<Type_value_item_arrayContext>(_ctx, getState());
  enterRule(_localctx, 138, MavkaParser::RuleType_value_item_array);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1058);
    match(MavkaParser::BRACKET_OPEN);
    setState(1059);
    match(MavkaParser::BRACKET_CLOSE);
    setState(1060);
    type_value_item();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgsContext ------------------------------------------------------------------

MavkaParser::ArgsContext::ArgsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ArgContext *> MavkaParser::ArgsContext::arg() {
  return getRuleContexts<MavkaParser::ArgContext>();
}

MavkaParser::ArgContext* MavkaParser::ArgsContext::arg(size_t i) {
  return getRuleContext<MavkaParser::ArgContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ArgsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ArgsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ArgsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::ArgsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::ArgsContext::getRuleIndex() const {
  return MavkaParser::RuleArgs;
}

void MavkaParser::ArgsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArgs(this);
}

void MavkaParser::ArgsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArgs(this);
}


std::any MavkaParser::ArgsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArgs(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgsContext* MavkaParser::args() {
  ArgsContext *_localctx = _tracker.createInstance<ArgsContext>(_ctx, getState());
  enterRule(_localctx, 140, MavkaParser::RuleArgs);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1062);
    arg();
    setState(1070);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1063);
        nls();
        setState(1064);
        match(MavkaParser::COMA);
        setState(1065);
        nls();
        setState(1066);
        arg(); 
      }
      setState(1072);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ArgContext ------------------------------------------------------------------

MavkaParser::ArgContext::ArgContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::ExprContext* MavkaParser::ArgContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::ArgContext::getRuleIndex() const {
  return MavkaParser::RuleArg;
}

void MavkaParser::ArgContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArg(this);
}

void MavkaParser::ArgContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArg(this);
}


std::any MavkaParser::ArgContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ArgContext* MavkaParser::arg() {
  ArgContext *_localctx = _tracker.createInstance<ArgContext>(_ctx, getState());
  enterRule(_localctx, 142, MavkaParser::RuleArg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1073);
    antlrcpp::downCast<ArgContext *>(_localctx)->a_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argsContext ------------------------------------------------------------------

MavkaParser::Named_argsContext::Named_argsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Named_argContext *> MavkaParser::Named_argsContext::named_arg() {
  return getRuleContexts<MavkaParser::Named_argContext>();
}

MavkaParser::Named_argContext* MavkaParser::Named_argsContext::named_arg(size_t i) {
  return getRuleContext<MavkaParser::Named_argContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::Named_argsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::Named_argsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::Named_argsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::Named_argsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}


size_t MavkaParser::Named_argsContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_args;
}

void MavkaParser::Named_argsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_args(this);
}

void MavkaParser::Named_argsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_args(this);
}


std::any MavkaParser::Named_argsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_args(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argsContext* MavkaParser::named_args() {
  Named_argsContext *_localctx = _tracker.createInstance<Named_argsContext>(_ctx, getState());
  enterRule(_localctx, 144, MavkaParser::RuleNamed_args);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1075);
    named_arg();
    setState(1083);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1076);
        nls();
        setState(1077);
        match(MavkaParser::COMA);
        setState(1078);
        nls();
        setState(1079);
        named_arg(); 
      }
      setState(1085);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Named_argContext ------------------------------------------------------------------

MavkaParser::Named_argContext::Named_argContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Named_argContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Named_argContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Named_argContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Named_argContext::getRuleIndex() const {
  return MavkaParser::RuleNamed_arg;
}

void MavkaParser::Named_argContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamed_arg(this);
}

void MavkaParser::Named_argContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamed_arg(this);
}


std::any MavkaParser::Named_argContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitNamed_arg(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Named_argContext* MavkaParser::named_arg() {
  Named_argContext *_localctx = _tracker.createInstance<Named_argContext>(_ctx, getState());
  enterRule(_localctx, 146, MavkaParser::RuleNamed_arg);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1086);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_name = identifier();
    setState(1087);
    match(MavkaParser::EQUAL);
    setState(1088);
    antlrcpp::downCast<Named_argContext *>(_localctx)->na_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamsContext ------------------------------------------------------------------

MavkaParser::ParamsContext::ParamsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::ParamContext *> MavkaParser::ParamsContext::param() {
  return getRuleContexts<MavkaParser::ParamContext>();
}

MavkaParser::ParamContext* MavkaParser::ParamsContext::param(size_t i) {
  return getRuleContext<MavkaParser::ParamContext>(i);
}

std::vector<MavkaParser::NlsContext *> MavkaParser::ParamsContext::nls() {
  return getRuleContexts<MavkaParser::NlsContext>();
}

MavkaParser::NlsContext* MavkaParser::ParamsContext::nls(size_t i) {
  return getRuleContext<MavkaParser::NlsContext>(i);
}

std::vector<tree::TerminalNode *> MavkaParser::ParamsContext::COMA() {
  return getTokens(MavkaParser::COMA);
}

tree::TerminalNode* MavkaParser::ParamsContext::COMA(size_t i) {
  return getToken(MavkaParser::COMA, i);
}

std::vector<tree::TerminalNode *> MavkaParser::ParamsContext::DOT() {
  return getTokens(MavkaParser::DOT);
}

tree::TerminalNode* MavkaParser::ParamsContext::DOT(size_t i) {
  return getToken(MavkaParser::DOT, i);
}

MavkaParser::IdentifierContext* MavkaParser::ParamsContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamsContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}


size_t MavkaParser::ParamsContext::getRuleIndex() const {
  return MavkaParser::RuleParams;
}

void MavkaParser::ParamsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParams(this);
}

void MavkaParser::ParamsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParams(this);
}


std::any MavkaParser::ParamsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParams(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamsContext* MavkaParser::params() {
  ParamsContext *_localctx = _tracker.createInstance<ParamsContext>(_ctx, getState());
  enterRule(_localctx, 148, MavkaParser::RuleParams);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1120);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::ID: {
        enterOuterAlt(_localctx, 1);
        setState(1090);
        param();
        setState(1098);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(1091);
            nls();
            setState(1092);
            match(MavkaParser::COMA);
            setState(1093);
            nls();
            setState(1094);
            param(); 
          }
          setState(1100);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
        }
        setState(1111);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
        case 1: {
          setState(1101);
          nls();
          setState(1102);
          match(MavkaParser::COMA);
          setState(1103);
          nls();
          setState(1104);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::DOT);
          setState(1105);
          match(MavkaParser::DOT);
          setState(1106);
          match(MavkaParser::DOT);
          setState(1107);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
          setState(1109);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == MavkaParser::BRACKET_OPEN

          || _la == MavkaParser::ID) {
            setState(1108);
            antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
          }
          break;
        }

        default:
          break;
        }
        break;
      }

      case MavkaParser::DOT: {
        enterOuterAlt(_localctx, 2);
        setState(1113);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic = match(MavkaParser::DOT);
        setState(1114);
        match(MavkaParser::DOT);
        setState(1115);
        match(MavkaParser::DOT);
        setState(1116);
        antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_name = identifier();
        setState(1118);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == MavkaParser::BRACKET_OPEN

        || _la == MavkaParser::ID) {
          setState(1117);
          antlrcpp::downCast<ParamsContext *>(_localctx)->p_variadic_type = type_value();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParamContext ------------------------------------------------------------------

MavkaParser::ParamContext::ParamContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IdentifierContext* MavkaParser::ParamContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::ParamContext::EQUAL() {
  return getToken(MavkaParser::EQUAL, 0);
}

MavkaParser::Type_valueContext* MavkaParser::ParamContext::type_value() {
  return getRuleContext<MavkaParser::Type_valueContext>(0);
}

MavkaParser::Param_valueContext* MavkaParser::ParamContext::param_value() {
  return getRuleContext<MavkaParser::Param_valueContext>(0);
}


size_t MavkaParser::ParamContext::getRuleIndex() const {
  return MavkaParser::RuleParam;
}

void MavkaParser::ParamContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam(this);
}

void MavkaParser::ParamContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam(this);
}


std::any MavkaParser::ParamContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::ParamContext* MavkaParser::param() {
  ParamContext *_localctx = _tracker.createInstance<ParamContext>(_ctx, getState());
  enterRule(_localctx, 150, MavkaParser::RuleParam);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1122);
    antlrcpp::downCast<ParamContext *>(_localctx)->p_name = identifier();
    setState(1124);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::BRACKET_OPEN

    || _la == MavkaParser::ID) {
      setState(1123);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_type = type_value();
    }
    setState(1128);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == MavkaParser::EQUAL) {
      setState(1126);
      match(MavkaParser::EQUAL);
      setState(1127);
      antlrcpp::downCast<ParamContext *>(_localctx)->p_value = param_value();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Param_valueContext ------------------------------------------------------------------

MavkaParser::Param_valueContext::Param_valueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t MavkaParser::Param_valueContext::getRuleIndex() const {
  return MavkaParser::RuleParam_value;
}

void MavkaParser::Param_valueContext::copyFrom(Param_valueContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- Param_value_empty_listContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::BRACKET_OPEN() {
  return getToken(MavkaParser::BRACKET_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_listContext::BRACKET_CLOSE() {
  return getToken(MavkaParser::BRACKET_CLOSE, 0);
}

MavkaParser::Param_value_empty_listContext::Param_value_empty_listContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_list(this);
}
void MavkaParser::Param_value_empty_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_list(this);
}

std::any MavkaParser::Param_value_empty_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_list(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_identifierContext ------------------------------------------------------------------

MavkaParser::IdentifierContext* MavkaParser::Param_value_identifierContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

MavkaParser::Param_value_identifierContext::Param_value_identifierContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_identifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_identifier(this);
}
void MavkaParser::Param_value_identifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_identifier(this);
}

std::any MavkaParser::Param_value_identifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_identifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_empty_dictionaryContext ------------------------------------------------------------------

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::PAREN_OPEN() {
  return getToken(MavkaParser::PAREN_OPEN, 0);
}

tree::TerminalNode* MavkaParser::Param_value_empty_dictionaryContext::PAREN_CLOSE() {
  return getToken(MavkaParser::PAREN_CLOSE, 0);
}

MavkaParser::Param_value_empty_dictionaryContext::Param_value_empty_dictionaryContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_empty_dictionaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_empty_dictionary(this);
}
void MavkaParser::Param_value_empty_dictionaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_empty_dictionary(this);
}

std::any MavkaParser::Param_value_empty_dictionaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_empty_dictionary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_numberContext ------------------------------------------------------------------

MavkaParser::Number_tokenContext* MavkaParser::Param_value_numberContext::number_token() {
  return getRuleContext<MavkaParser::Number_tokenContext>(0);
}

MavkaParser::Param_value_numberContext::Param_value_numberContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_numberContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_number(this);
}
void MavkaParser::Param_value_numberContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_number(this);
}

std::any MavkaParser::Param_value_numberContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_number(this);
  else
    return visitor->visitChildren(this);
}
//----------------- Param_value_stringContext ------------------------------------------------------------------

MavkaParser::StringContext* MavkaParser::Param_value_stringContext::string() {
  return getRuleContext<MavkaParser::StringContext>(0);
}

MavkaParser::Param_value_stringContext::Param_value_stringContext(Param_valueContext *ctx) { copyFrom(ctx); }

void MavkaParser::Param_value_stringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParam_value_string(this);
}
void MavkaParser::Param_value_stringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParam_value_string(this);
}

std::any MavkaParser::Param_value_stringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitParam_value_string(this);
  else
    return visitor->visitChildren(this);
}
MavkaParser::Param_valueContext* MavkaParser::param_value() {
  Param_valueContext *_localctx = _tracker.createInstance<Param_valueContext>(_ctx, getState());
  enterRule(_localctx, 152, MavkaParser::RuleParam_value);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1137);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::INTEGER:
      case MavkaParser::FLOAT:
      case MavkaParser::HEX:
      case MavkaParser::BIN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_numberContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1130);
        number_token();
        break;
      }

      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_stringContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1131);
        string();
        break;
      }

      case MavkaParser::ID: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_identifierContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1132);
        identifier();
        break;
      }

      case MavkaParser::PAREN_OPEN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_dictionaryContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(1133);
        match(MavkaParser::PAREN_OPEN);
        setState(1134);
        match(MavkaParser::PAREN_CLOSE);
        break;
      }

      case MavkaParser::BRACKET_OPEN: {
        _localctx = _tracker.createInstance<MavkaParser::Param_value_empty_listContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(1135);
        match(MavkaParser::BRACKET_OPEN);
        setState(1136);
        match(MavkaParser::BRACKET_CLOSE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BodyContext ------------------------------------------------------------------

MavkaParser::BodyContext::BodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<MavkaParser::Body_element_or_returnContext *> MavkaParser::BodyContext::body_element_or_return() {
  return getRuleContexts<MavkaParser::Body_element_or_returnContext>();
}

MavkaParser::Body_element_or_returnContext* MavkaParser::BodyContext::body_element_or_return(size_t i) {
  return getRuleContext<MavkaParser::Body_element_or_returnContext>(i);
}

std::vector<MavkaParser::NlContext *> MavkaParser::BodyContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::BodyContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}


size_t MavkaParser::BodyContext::getRuleIndex() const {
  return MavkaParser::RuleBody;
}

void MavkaParser::BodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody(this);
}

void MavkaParser::BodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody(this);
}


std::any MavkaParser::BodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::BodyContext* MavkaParser::body() {
  BodyContext *_localctx = _tracker.createInstance<BodyContext>(_ctx, getState());
  enterRule(_localctx, 154, MavkaParser::RuleBody);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1139);
    body_element_or_return();
    setState(1145);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1140);
        nl();
        setState(1141);
        body_element_or_return(); 
      }
      setState(1147);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_element_or_returnContext ------------------------------------------------------------------

MavkaParser::Body_element_or_returnContext::Body_element_or_returnContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::Body_elementContext* MavkaParser::Body_element_or_returnContext::body_element() {
  return getRuleContext<MavkaParser::Body_elementContext>(0);
}

MavkaParser::Return_body_lineContext* MavkaParser::Body_element_or_returnContext::return_body_line() {
  return getRuleContext<MavkaParser::Return_body_lineContext>(0);
}


size_t MavkaParser::Body_element_or_returnContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element_or_return;
}

void MavkaParser::Body_element_or_returnContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element_or_return(this);
}

void MavkaParser::Body_element_or_returnContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element_or_return(this);
}


std::any MavkaParser::Body_element_or_returnContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element_or_return(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_element_or_returnContext* MavkaParser::body_element_or_return() {
  Body_element_or_returnContext *_localctx = _tracker.createInstance<Body_element_or_returnContext>(_ctx, getState());
  enterRule(_localctx, 156, MavkaParser::RuleBody_element_or_return);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1150);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::KW_DIIA:
      case MavkaParser::KW_FOR:
      case MavkaParser::KW_IF:
      case MavkaParser::KW_WAIT:
      case MavkaParser::KW_SPEC:
      case MavkaParser::KW_ASYNC:
      case MavkaParser::KW_SUBJECT:
      case MavkaParser::KW_TRY:
      case MavkaParser::KW_THROW:
      case MavkaParser::KW_WHILE:
      case MavkaParser::KW_PARENT:
      case MavkaParser::LESSER:
      case MavkaParser::PLUS:
      case MavkaParser::MINUS:
      case MavkaParser::PAREN_OPEN:
      case MavkaParser::BRACKET_OPEN:
      case MavkaParser::TILDA:
      case MavkaParser::EXCLAMATION:
      case MavkaParser::INTEGER:
      case MavkaParser::FLOAT:
      case MavkaParser::HEX:
      case MavkaParser::BIN:
      case MavkaParser::ID:
      case MavkaParser::STRING_MULTILINE:
      case MavkaParser::STRING:
      case MavkaParser::MRM_DIIA:
      case MavkaParser::NL: {
        enterOuterAlt(_localctx, 1);
        setState(1148);
        body_element();
        break;
      }

      case MavkaParser::KW_RETURN: {
        enterOuterAlt(_localctx, 2);
        setState(1149);
        return_body_line();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Body_elementContext ------------------------------------------------------------------

MavkaParser::Body_elementContext::Body_elementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

MavkaParser::IfContext* MavkaParser::Body_elementContext::if_() {
  return getRuleContext<MavkaParser::IfContext>(0);
}

MavkaParser::EachContext* MavkaParser::Body_elementContext::each() {
  return getRuleContext<MavkaParser::EachContext>(0);
}

MavkaParser::WhileContext* MavkaParser::Body_elementContext::while_() {
  return getRuleContext<MavkaParser::WhileContext>(0);
}

MavkaParser::TryContext* MavkaParser::Body_elementContext::try_() {
  return getRuleContext<MavkaParser::TryContext>(0);
}

MavkaParser::ExprContext* MavkaParser::Body_elementContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}

MavkaParser::ThrowContext* MavkaParser::Body_elementContext::throw_() {
  return getRuleContext<MavkaParser::ThrowContext>(0);
}

MavkaParser::Wait_assignContext* MavkaParser::Body_elementContext::wait_assign() {
  return getRuleContext<MavkaParser::Wait_assignContext>(0);
}

MavkaParser::AssignContext* MavkaParser::Body_elementContext::assign() {
  return getRuleContext<MavkaParser::AssignContext>(0);
}

MavkaParser::NlsContext* MavkaParser::Body_elementContext::nls() {
  return getRuleContext<MavkaParser::NlsContext>(0);
}


size_t MavkaParser::Body_elementContext::getRuleIndex() const {
  return MavkaParser::RuleBody_element;
}

void MavkaParser::Body_elementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBody_element(this);
}

void MavkaParser::Body_elementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBody_element(this);
}


std::any MavkaParser::Body_elementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBody_element(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Body_elementContext* MavkaParser::body_element() {
  Body_elementContext *_localctx = _tracker.createInstance<Body_elementContext>(_ctx, getState());
  enterRule(_localctx, 158, MavkaParser::RuleBody_element);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1161);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1152);
      if_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1153);
      each();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1154);
      while_();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1155);
      try_();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1156);
      expr();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1157);
      throw_();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1158);
      wait_assign();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1159);
      assign();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1160);
      nls();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Return_body_lineContext ------------------------------------------------------------------

MavkaParser::Return_body_lineContext::Return_body_lineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Return_body_lineContext::KW_RETURN() {
  return getToken(MavkaParser::KW_RETURN, 0);
}

MavkaParser::ExprContext* MavkaParser::Return_body_lineContext::expr() {
  return getRuleContext<MavkaParser::ExprContext>(0);
}


size_t MavkaParser::Return_body_lineContext::getRuleIndex() const {
  return MavkaParser::RuleReturn_body_line;
}

void MavkaParser::Return_body_lineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReturn_body_line(this);
}

void MavkaParser::Return_body_lineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReturn_body_line(this);
}


std::any MavkaParser::Return_body_lineContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitReturn_body_line(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Return_body_lineContext* MavkaParser::return_body_line() {
  Return_body_lineContext *_localctx = _tracker.createInstance<Return_body_lineContext>(_ctx, getState());
  enterRule(_localctx, 160, MavkaParser::RuleReturn_body_line);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1163);
    match(MavkaParser::KW_RETURN);
    setState(1164);
    antlrcpp::downCast<Return_body_lineContext *>(_localctx)->rbl_value = expr();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_mulContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_mulContext::Arithmetic_op_mulContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Arithmetic_op_mulContext::MULTIPLY() {
  return getTokens(MavkaParser::MULTIPLY);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::MULTIPLY(size_t i) {
  return getToken(MavkaParser::MULTIPLY, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Arithmetic_op_mulContext::DIVIDE() {
  return getTokens(MavkaParser::DIVIDE);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::DIVIDE(size_t i) {
  return getToken(MavkaParser::DIVIDE, i);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_mulContext::MOD() {
  return getToken(MavkaParser::MOD, 0);
}


size_t MavkaParser::Arithmetic_op_mulContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_mul;
}

void MavkaParser::Arithmetic_op_mulContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_mul(this);
}

void MavkaParser::Arithmetic_op_mulContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_mul(this);
}


std::any MavkaParser::Arithmetic_op_mulContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_mul(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_mulContext* MavkaParser::arithmetic_op_mul() {
  Arithmetic_op_mulContext *_localctx = _tracker.createInstance<Arithmetic_op_mulContext>(_ctx, getState());
  enterRule(_localctx, 162, MavkaParser::RuleArithmetic_op_mul);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1173);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1166);
      match(MavkaParser::MULTIPLY);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1167);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1168);
      match(MavkaParser::MOD);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1169);
      match(MavkaParser::DIVIDE);
      setState(1170);
      match(MavkaParser::DIVIDE);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1171);
      match(MavkaParser::MULTIPLY);
      setState(1172);
      match(MavkaParser::MULTIPLY);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Arithmetic_op_addContext ------------------------------------------------------------------

MavkaParser::Arithmetic_op_addContext::Arithmetic_op_addContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::PLUS() {
  return getToken(MavkaParser::PLUS, 0);
}

tree::TerminalNode* MavkaParser::Arithmetic_op_addContext::MINUS() {
  return getToken(MavkaParser::MINUS, 0);
}


size_t MavkaParser::Arithmetic_op_addContext::getRuleIndex() const {
  return MavkaParser::RuleArithmetic_op_add;
}

void MavkaParser::Arithmetic_op_addContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmetic_op_add(this);
}

void MavkaParser::Arithmetic_op_addContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmetic_op_add(this);
}


std::any MavkaParser::Arithmetic_op_addContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitArithmetic_op_add(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Arithmetic_op_addContext* MavkaParser::arithmetic_op_add() {
  Arithmetic_op_addContext *_localctx = _tracker.createInstance<Arithmetic_op_addContext>(_ctx, getState());
  enterRule(_localctx, 164, MavkaParser::RuleArithmetic_op_add);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1175);
    _la = _input->LA(1);
    if (!(_la == MavkaParser::PLUS

    || _la == MavkaParser::MINUS)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bitwise_opContext ------------------------------------------------------------------

MavkaParser::Bitwise_opContext::Bitwise_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::POWER() {
  return getToken(MavkaParser::POWER, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::OR() {
  return getToken(MavkaParser::OR, 0);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::AND() {
  return getToken(MavkaParser::AND, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Bitwise_opContext::LESSER() {
  return getTokens(MavkaParser::LESSER);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::LESSER(size_t i) {
  return getToken(MavkaParser::LESSER, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Bitwise_opContext::GREATER() {
  return getTokens(MavkaParser::GREATER);
}

tree::TerminalNode* MavkaParser::Bitwise_opContext::GREATER(size_t i) {
  return getToken(MavkaParser::GREATER, i);
}


size_t MavkaParser::Bitwise_opContext::getRuleIndex() const {
  return MavkaParser::RuleBitwise_op;
}

void MavkaParser::Bitwise_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBitwise_op(this);
}

void MavkaParser::Bitwise_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBitwise_op(this);
}


std::any MavkaParser::Bitwise_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitBitwise_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Bitwise_opContext* MavkaParser::bitwise_op() {
  Bitwise_opContext *_localctx = _tracker.createInstance<Bitwise_opContext>(_ctx, getState());
  enterRule(_localctx, 166, MavkaParser::RuleBitwise_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1184);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::POWER: {
        enterOuterAlt(_localctx, 1);
        setState(1177);
        match(MavkaParser::POWER);
        break;
      }

      case MavkaParser::OR: {
        enterOuterAlt(_localctx, 2);
        setState(1178);
        match(MavkaParser::OR);
        break;
      }

      case MavkaParser::AND: {
        enterOuterAlt(_localctx, 3);
        setState(1179);
        match(MavkaParser::AND);
        break;
      }

      case MavkaParser::LESSER: {
        enterOuterAlt(_localctx, 4);
        setState(1180);
        match(MavkaParser::LESSER);
        setState(1181);
        match(MavkaParser::LESSER);
        break;
      }

      case MavkaParser::GREATER: {
        enterOuterAlt(_localctx, 5);
        setState(1182);
        match(MavkaParser::GREATER);
        setState(1183);
        match(MavkaParser::GREATER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Test_opContext ------------------------------------------------------------------

MavkaParser::Test_opContext::Test_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Test_opContext::KW_AND() {
  return getToken(MavkaParser::KW_AND, 0);
}

tree::TerminalNode* MavkaParser::Test_opContext::KW_OR() {
  return getToken(MavkaParser::KW_OR, 0);
}

std::vector<tree::TerminalNode *> MavkaParser::Test_opContext::OR() {
  return getTokens(MavkaParser::OR);
}

tree::TerminalNode* MavkaParser::Test_opContext::OR(size_t i) {
  return getToken(MavkaParser::OR, i);
}

std::vector<tree::TerminalNode *> MavkaParser::Test_opContext::AND() {
  return getTokens(MavkaParser::AND);
}

tree::TerminalNode* MavkaParser::Test_opContext::AND(size_t i) {
  return getToken(MavkaParser::AND, i);
}


size_t MavkaParser::Test_opContext::getRuleIndex() const {
  return MavkaParser::RuleTest_op;
}

void MavkaParser::Test_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTest_op(this);
}

void MavkaParser::Test_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTest_op(this);
}


std::any MavkaParser::Test_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitTest_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Test_opContext* MavkaParser::test_op() {
  Test_opContext *_localctx = _tracker.createInstance<Test_opContext>(_ctx, getState());
  enterRule(_localctx, 168, MavkaParser::RuleTest_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1192);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case MavkaParser::KW_AND: {
        enterOuterAlt(_localctx, 1);
        setState(1186);
        match(MavkaParser::KW_AND);
        break;
      }

      case MavkaParser::KW_OR: {
        enterOuterAlt(_localctx, 2);
        setState(1187);
        match(MavkaParser::KW_OR);
        break;
      }

      case MavkaParser::OR: {
        enterOuterAlt(_localctx, 3);
        setState(1188);
        match(MavkaParser::OR);
        setState(1189);
        match(MavkaParser::OR);
        break;
      }

      case MavkaParser::AND: {
        enterOuterAlt(_localctx, 4);
        setState(1190);
        match(MavkaParser::AND);
        setState(1191);
        match(MavkaParser::AND);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comparison_opContext ------------------------------------------------------------------

MavkaParser::Comparison_opContext::Comparison_opContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> MavkaParser::Comparison_opContext::EQUAL() {
  return getTokens(MavkaParser::EQUAL);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EQUAL(size_t i) {
  return getToken(MavkaParser::EQUAL, i);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::EXCLAMATION() {
  return getToken(MavkaParser::EXCLAMATION, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::GREATER() {
  return getToken(MavkaParser::GREATER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::LESSER() {
  return getToken(MavkaParser::LESSER, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_IS() {
  return getToken(MavkaParser::KW_IS, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_NOT() {
  return getToken(MavkaParser::KW_NOT, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_EQ_WORD() {
  return getToken(MavkaParser::KW_EQ_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_GR_WORD() {
  return getToken(MavkaParser::KW_GR_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_SM_WORD() {
  return getToken(MavkaParser::KW_SM_WORD, 0);
}

tree::TerminalNode* MavkaParser::Comparison_opContext::KW_HAS_IS_WORD() {
  return getToken(MavkaParser::KW_HAS_IS_WORD, 0);
}


size_t MavkaParser::Comparison_opContext::getRuleIndex() const {
  return MavkaParser::RuleComparison_op;
}

void MavkaParser::Comparison_opContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison_op(this);
}

void MavkaParser::Comparison_opContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison_op(this);
}


std::any MavkaParser::Comparison_opContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComparison_op(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comparison_opContext* MavkaParser::comparison_op() {
  Comparison_opContext *_localctx = _tracker.createInstance<Comparison_opContext>(_ctx, getState());
  enterRule(_localctx, 170, MavkaParser::RuleComparison_op);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1219);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1194);
      match(MavkaParser::EQUAL);
      setState(1195);
      match(MavkaParser::EQUAL);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1196);
      match(MavkaParser::EXCLAMATION);
      setState(1197);
      match(MavkaParser::EQUAL);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1198);
      match(MavkaParser::GREATER);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1199);
      match(MavkaParser::LESSER);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1200);
      match(MavkaParser::GREATER);
      setState(1201);
      match(MavkaParser::EQUAL);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1202);
      match(MavkaParser::LESSER);
      setState(1203);
      match(MavkaParser::EQUAL);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1204);
      match(MavkaParser::KW_IS);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1205);
      match(MavkaParser::KW_NOT);
      setState(1206);
      match(MavkaParser::KW_IS);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1207);
      match(MavkaParser::KW_EQ_WORD);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1208);
      match(MavkaParser::KW_NOT);
      setState(1209);
      match(MavkaParser::KW_EQ_WORD);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1210);
      match(MavkaParser::KW_GR_WORD);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1211);
      match(MavkaParser::KW_NOT);
      setState(1212);
      match(MavkaParser::KW_GR_WORD);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1213);
      match(MavkaParser::KW_SM_WORD);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1214);
      match(MavkaParser::KW_NOT);
      setState(1215);
      match(MavkaParser::KW_SM_WORD);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1216);
      match(MavkaParser::KW_HAS_IS_WORD);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(1217);
      match(MavkaParser::KW_NOT);
      setState(1218);
      match(MavkaParser::KW_HAS_IS_WORD);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_inst_block_programContext ------------------------------------------------------------------

MavkaParser::Comp_inst_block_programContext::Comp_inst_block_programContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Comp_inst_block_programContext::COMP_INST_START() {
  return getToken(MavkaParser::COMP_INST_START, 0);
}

std::vector<MavkaParser::NlContext *> MavkaParser::Comp_inst_block_programContext::nl() {
  return getRuleContexts<MavkaParser::NlContext>();
}

MavkaParser::NlContext* MavkaParser::Comp_inst_block_programContext::nl(size_t i) {
  return getRuleContext<MavkaParser::NlContext>(i);
}

tree::TerminalNode* MavkaParser::Comp_inst_block_programContext::COMP_INST_END() {
  return getToken(MavkaParser::COMP_INST_END, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Comp_inst_block_programContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Comp_inst_block_programContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}

MavkaParser::ProgramContext* MavkaParser::Comp_inst_block_programContext::program() {
  return getRuleContext<MavkaParser::ProgramContext>(0);
}


size_t MavkaParser::Comp_inst_block_programContext::getRuleIndex() const {
  return MavkaParser::RuleComp_inst_block_program;
}

void MavkaParser::Comp_inst_block_programContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_inst_block_program(this);
}

void MavkaParser::Comp_inst_block_programContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_inst_block_program(this);
}


std::any MavkaParser::Comp_inst_block_programContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComp_inst_block_program(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comp_inst_block_programContext* MavkaParser::comp_inst_block_program() {
  Comp_inst_block_programContext *_localctx = _tracker.createInstance<Comp_inst_block_programContext>(_ctx, getState());
  enterRule(_localctx, 172, MavkaParser::RuleComp_inst_block_program);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1221);
    match(MavkaParser::COMP_INST_START);
    setState(1222);
    antlrcpp::downCast<Comp_inst_block_programContext *>(_localctx)->cibp_name = identifier();
    setState(1223);
    antlrcpp::downCast<Comp_inst_block_programContext *>(_localctx)->cibp_value = match(MavkaParser::STRING);
    setState(1224);
    nl();
    setState(1225);
    antlrcpp::downCast<Comp_inst_block_programContext *>(_localctx)->cibp_program = program();
    setState(1226);
    nl();
    setState(1227);
    match(MavkaParser::COMP_INST_END);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Comp_inst_assignContext ------------------------------------------------------------------

MavkaParser::Comp_inst_assignContext::Comp_inst_assignContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* MavkaParser::Comp_inst_assignContext::COMP_INST_ASSIGN() {
  return getToken(MavkaParser::COMP_INST_ASSIGN, 0);
}

MavkaParser::IdentifierContext* MavkaParser::Comp_inst_assignContext::identifier() {
  return getRuleContext<MavkaParser::IdentifierContext>(0);
}

tree::TerminalNode* MavkaParser::Comp_inst_assignContext::STRING() {
  return getToken(MavkaParser::STRING, 0);
}


size_t MavkaParser::Comp_inst_assignContext::getRuleIndex() const {
  return MavkaParser::RuleComp_inst_assign;
}

void MavkaParser::Comp_inst_assignContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComp_inst_assign(this);
}

void MavkaParser::Comp_inst_assignContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<MavkaParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComp_inst_assign(this);
}


std::any MavkaParser::Comp_inst_assignContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<MavkaParserVisitor*>(visitor))
    return parserVisitor->visitComp_inst_assign(this);
  else
    return visitor->visitChildren(this);
}

MavkaParser::Comp_inst_assignContext* MavkaParser::comp_inst_assign() {
  Comp_inst_assignContext *_localctx = _tracker.createInstance<Comp_inst_assignContext>(_ctx, getState());
  enterRule(_localctx, 174, MavkaParser::RuleComp_inst_assign);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1229);
    match(MavkaParser::COMP_INST_ASSIGN);
    setState(1230);
    antlrcpp::downCast<Comp_inst_assignContext *>(_localctx)->cia_name = identifier();
    setState(1231);
    antlrcpp::downCast<Comp_inst_assignContext *>(_localctx)->cia_value = match(MavkaParser::STRING);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool MavkaParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 48: return atomSempred(antlrcpp::downCast<AtomContext *>(context), predicateIndex);
    case 49: return valueSempred(antlrcpp::downCast<ValueContext *>(context), predicateIndex);
    case 63: return identifiers_chainSempred(antlrcpp::downCast<Identifiers_chainContext *>(context), predicateIndex);
    case 64: return super_identifiers_chainSempred(antlrcpp::downCast<Super_identifiers_chainContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool MavkaParser::atomSempred(AtomContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 14);
    case 1: return precpred(_ctx, 13);
    case 2: return precpred(_ctx, 12);
    case 3: return precpred(_ctx, 5);
    case 4: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool MavkaParser::valueSempred(ValueContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 5);
    case 6: return precpred(_ctx, 4);
    case 7: return precpred(_ctx, 3);
    case 8: return precpred(_ctx, 2);
    case 9: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::identifiers_chainSempred(Identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool MavkaParser::super_identifiers_chainSempred(Super_identifiers_chainContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 2);
    case 12: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

void MavkaParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  mavkaparserParserInitialize();
#else
  ::antlr4::internal::call_once(mavkaparserParserOnceFlag, mavkaparserParserInitialize);
#endif
}
