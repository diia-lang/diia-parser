
// Generated from DiiaLexer.g4 by ANTLR 4.11.1


#include "DiiaLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct DiiaLexerStaticData final {
  DiiaLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  DiiaLexerStaticData(const DiiaLexerStaticData&) = delete;
  DiiaLexerStaticData(DiiaLexerStaticData&&) = delete;
  DiiaLexerStaticData& operator=(const DiiaLexerStaticData&) = delete;
  DiiaLexerStaticData& operator=(DiiaLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag diialexerLexerOnceFlag;
DiiaLexerStaticData *diialexerLexerStaticData = nullptr;

void diialexerLexerInitialize() {
  assert(diialexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<DiiaLexerStaticData>(
    std::vector<std::string>{
      "DEF", "END", "EACH", "TAKING", "STRUCTURE", "EQ", "NOT_EQ", "GREATER", 
      "SMALLER", "YES", "NO", "NONE", "FOR", "IF", "WAIT", "TAKE", "GIVE", 
      "PAK", "AS", "IS", "RETURN", "ASYNC", "AND", "OR", "SKIP_SPACES", 
      "NL", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", "COMMA", 
      "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", "COLON", "DOT", "NOT", "ID", 
      "NUMBER", "INTEGER", "FLOAT", "STRING", "DIGIT", "ID_START", "ID_CONTINUE", 
      "STRING_SEQ"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'\\u0434\\u0456\\u044F'", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", 
      "'\\u043A\\u043E\\u0436\\u043D\\u0456\\u0439'", "'\\u0431\\u0435\\u0440\\u0443\\u0447\\u0438'", 
      "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
      "'=='", "'!='", "'>='", "'<='", "'\\u0442\\u0430\\u043A'", "'\\u043D\\u0456'", 
      "'\\u043F\\u0443\\u0441\\u0442\\u043E'", "'\\u0434\\u043B\\u044F'", 
      "'\\u044F\\u043A\\u0449\\u043E'", "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
      "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0434\\u0430\\u0442\\u0438'", 
      "'\\u043F\\u0430\\u043A'", "'\\u044F\\u043A'", "'\\u0454'", "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", 
      "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", "'\\u0456'", 
      "'\\u0430\\u0431\\u043E'", "", "", "'('", "')'", "'['", "']'", "','", 
      "'='", "'+'", "'-'", "'*'", "'/'", "':'", "'.'", "'!'"
    },
    std::vector<std::string>{
      "", "DEF", "END", "EACH", "TAKING", "STRUCTURE", "EQ", "NOT_EQ", "GREATER", 
      "SMALLER", "YES", "NO", "NONE", "FOR", "IF", "WAIT", "TAKE", "GIVE", 
      "PAK", "AS", "IS", "RETURN", "ASYNC", "AND", "OR", "SKIP_SPACES", 
      "NL", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", "COMMA", 
      "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", "COLON", "DOT", "NOT", "ID", 
      "NUMBER", "INTEGER", "FLOAT", "STRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,44,291,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,
  	0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
  	1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
  	6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
  	1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
  	1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,
  	1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,3,25,221,
  	8,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
  	1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,
  	1,38,1,39,1,39,5,39,253,8,39,10,39,12,39,256,9,39,1,40,1,40,3,40,260,
  	8,40,1,41,4,41,263,8,41,11,41,12,41,264,1,42,1,42,1,42,1,42,1,43,1,43,
  	5,43,273,8,43,10,43,12,43,276,9,43,1,43,1,43,1,44,1,44,1,45,1,45,1,46,
  	1,46,1,46,1,46,3,46,288,8,46,1,47,1,47,1,274,0,48,1,1,3,2,5,3,7,4,9,5,
  	11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
  	18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
  	59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
  	41,83,42,85,43,87,44,89,0,91,0,93,0,95,0,1,0,2,2,0,9,9,32,32,9,0,65,90,
  	95,95,97,122,1028,1028,1030,1031,1040,1103,1108,1108,1110,1111,1168,1169,
  	293,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
  	1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
  	0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
  	0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
  	1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
  	0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
  	0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
  	1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
  	0,0,0,87,1,0,0,0,1,97,1,0,0,0,3,101,1,0,0,0,5,108,1,0,0,0,7,115,1,0,0,
  	0,9,122,1,0,0,0,11,132,1,0,0,0,13,135,1,0,0,0,15,138,1,0,0,0,17,141,1,
  	0,0,0,19,144,1,0,0,0,21,148,1,0,0,0,23,151,1,0,0,0,25,157,1,0,0,0,27,
  	161,1,0,0,0,29,166,1,0,0,0,31,173,1,0,0,0,33,179,1,0,0,0,35,184,1,0,0,
  	0,37,188,1,0,0,0,39,191,1,0,0,0,41,193,1,0,0,0,43,201,1,0,0,0,45,209,
  	1,0,0,0,47,211,1,0,0,0,49,215,1,0,0,0,51,220,1,0,0,0,53,224,1,0,0,0,55,
  	226,1,0,0,0,57,228,1,0,0,0,59,230,1,0,0,0,61,232,1,0,0,0,63,234,1,0,0,
  	0,65,236,1,0,0,0,67,238,1,0,0,0,69,240,1,0,0,0,71,242,1,0,0,0,73,244,
  	1,0,0,0,75,246,1,0,0,0,77,248,1,0,0,0,79,250,1,0,0,0,81,259,1,0,0,0,83,
  	262,1,0,0,0,85,266,1,0,0,0,87,270,1,0,0,0,89,279,1,0,0,0,91,281,1,0,0,
  	0,93,287,1,0,0,0,95,289,1,0,0,0,97,98,5,1076,0,0,98,99,5,1110,0,0,99,
  	100,5,1103,0,0,100,2,1,0,0,0,101,102,5,1082,0,0,102,103,5,1110,0,0,103,
  	104,5,1085,0,0,104,105,5,1077,0,0,105,106,5,1094,0,0,106,107,5,1100,0,
  	0,107,4,1,0,0,0,108,109,5,1082,0,0,109,110,5,1086,0,0,110,111,5,1078,
  	0,0,111,112,5,1085,0,0,112,113,5,1110,0,0,113,114,5,1081,0,0,114,6,1,
  	0,0,0,115,116,5,1073,0,0,116,117,5,1077,0,0,117,118,5,1088,0,0,118,119,
  	5,1091,0,0,119,120,5,1095,0,0,120,121,5,1080,0,0,121,8,1,0,0,0,122,123,
  	5,1089,0,0,123,124,5,1090,0,0,124,125,5,1088,0,0,125,126,5,1091,0,0,126,
  	127,5,1082,0,0,127,128,5,1090,0,0,128,129,5,1091,0,0,129,130,5,1088,0,
  	0,130,131,5,1072,0,0,131,10,1,0,0,0,132,133,5,61,0,0,133,134,5,61,0,0,
  	134,12,1,0,0,0,135,136,5,33,0,0,136,137,5,61,0,0,137,14,1,0,0,0,138,139,
  	5,62,0,0,139,140,5,61,0,0,140,16,1,0,0,0,141,142,5,60,0,0,142,143,5,61,
  	0,0,143,18,1,0,0,0,144,145,5,1090,0,0,145,146,5,1072,0,0,146,147,5,1082,
  	0,0,147,20,1,0,0,0,148,149,5,1085,0,0,149,150,5,1110,0,0,150,22,1,0,0,
  	0,151,152,5,1087,0,0,152,153,5,1091,0,0,153,154,5,1089,0,0,154,155,5,
  	1090,0,0,155,156,5,1086,0,0,156,24,1,0,0,0,157,158,5,1076,0,0,158,159,
  	5,1083,0,0,159,160,5,1103,0,0,160,26,1,0,0,0,161,162,5,1103,0,0,162,163,
  	5,1082,0,0,163,164,5,1097,0,0,164,165,5,1086,0,0,165,28,1,0,0,0,166,167,
  	5,1095,0,0,167,168,5,1077,0,0,168,169,5,1082,0,0,169,170,5,1072,0,0,170,
  	171,5,1090,0,0,171,172,5,1080,0,0,172,30,1,0,0,0,173,174,5,1074,0,0,174,
  	175,5,1079,0,0,175,176,5,1103,0,0,176,177,5,1090,0,0,177,178,5,1080,0,
  	0,178,32,1,0,0,0,179,180,5,1076,0,0,180,181,5,1072,0,0,181,182,5,1090,
  	0,0,182,183,5,1080,0,0,183,34,1,0,0,0,184,185,5,1087,0,0,185,186,5,1072,
  	0,0,186,187,5,1082,0,0,187,36,1,0,0,0,188,189,5,1103,0,0,189,190,5,1082,
  	0,0,190,38,1,0,0,0,191,192,5,1108,0,0,192,40,1,0,0,0,193,194,5,1074,0,
  	0,194,195,5,1077,0,0,195,196,5,1088,0,0,196,197,5,1085,0,0,197,198,5,
  	1091,0,0,198,199,5,1090,0,0,199,200,5,1080,0,0,200,42,1,0,0,0,201,202,
  	5,1090,0,0,202,203,5,1088,0,0,203,204,5,1080,0,0,204,205,5,1074,0,0,205,
  	206,5,1072,0,0,206,207,5,1083,0,0,207,208,5,1072,0,0,208,44,1,0,0,0,209,
  	210,5,1110,0,0,210,46,1,0,0,0,211,212,5,1072,0,0,212,213,5,1073,0,0,213,
  	214,5,1086,0,0,214,48,1,0,0,0,215,216,7,0,0,0,216,217,1,0,0,0,217,218,
  	6,24,0,0,218,50,1,0,0,0,219,221,5,13,0,0,220,219,1,0,0,0,220,221,1,0,
  	0,0,221,222,1,0,0,0,222,223,5,10,0,0,223,52,1,0,0,0,224,225,5,40,0,0,
  	225,54,1,0,0,0,226,227,5,41,0,0,227,56,1,0,0,0,228,229,5,91,0,0,229,58,
  	1,0,0,0,230,231,5,93,0,0,231,60,1,0,0,0,232,233,5,44,0,0,233,62,1,0,0,
  	0,234,235,5,61,0,0,235,64,1,0,0,0,236,237,5,43,0,0,237,66,1,0,0,0,238,
  	239,5,45,0,0,239,68,1,0,0,0,240,241,5,42,0,0,241,70,1,0,0,0,242,243,5,
  	47,0,0,243,72,1,0,0,0,244,245,5,58,0,0,245,74,1,0,0,0,246,247,5,46,0,
  	0,247,76,1,0,0,0,248,249,5,33,0,0,249,78,1,0,0,0,250,254,3,91,45,0,251,
  	253,3,93,46,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,254,255,
  	1,0,0,0,255,80,1,0,0,0,256,254,1,0,0,0,257,260,3,85,42,0,258,260,3,83,
  	41,0,259,257,1,0,0,0,259,258,1,0,0,0,260,82,1,0,0,0,261,263,3,89,44,0,
  	262,261,1,0,0,0,263,264,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,84,
  	1,0,0,0,266,267,3,83,41,0,267,268,5,46,0,0,268,269,3,83,41,0,269,86,1,
  	0,0,0,270,274,5,34,0,0,271,273,3,95,47,0,272,271,1,0,0,0,273,276,1,0,
  	0,0,274,275,1,0,0,0,274,272,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,
  	278,5,34,0,0,278,88,1,0,0,0,279,280,2,48,57,0,280,90,1,0,0,0,281,282,
  	7,1,0,0,282,92,1,0,0,0,283,288,3,91,45,0,284,288,2,48,57,0,285,286,5,
  	39,0,0,286,288,3,91,45,0,287,283,1,0,0,0,287,284,1,0,0,0,287,285,1,0,
  	0,0,288,94,1,0,0,0,289,290,9,0,0,0,290,96,1,0,0,0,7,0,220,254,259,264,
  	274,287,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  diialexerLexerStaticData = staticData.release();
}

}

DiiaLexer::DiiaLexer(CharStream *input) : Lexer(input) {
  DiiaLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *diialexerLexerStaticData->atn, diialexerLexerStaticData->decisionToDFA, diialexerLexerStaticData->sharedContextCache);
}

DiiaLexer::~DiiaLexer() {
  delete _interpreter;
}

std::string DiiaLexer::getGrammarFileName() const {
  return "DiiaLexer.g4";
}

const std::vector<std::string>& DiiaLexer::getRuleNames() const {
  return diialexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& DiiaLexer::getChannelNames() const {
  return diialexerLexerStaticData->channelNames;
}

const std::vector<std::string>& DiiaLexer::getModeNames() const {
  return diialexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& DiiaLexer::getVocabulary() const {
  return diialexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView DiiaLexer::getSerializedATN() const {
  return diialexerLexerStaticData->serializedATN;
}

const atn::ATN& DiiaLexer::getATN() const {
  return *diialexerLexerStaticData->atn;
}




void DiiaLexer::initialize() {
  ::antlr4::internal::call_once(diialexerLexerOnceFlag, diialexerLexerInitialize);
}
