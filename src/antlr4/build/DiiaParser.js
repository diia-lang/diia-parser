// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';
import DiiaParserListener from './DiiaParserListener.js';
import DiiaParserVisitor from './DiiaParserVisitor.js';

const serializedATN = [4,1,112,948,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,1,
0,1,0,1,0,1,1,1,1,1,1,1,1,5,1,164,8,1,10,1,12,1,167,9,1,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,185,8,2,1,3,1,3,3,3,
189,8,3,1,3,1,3,1,3,1,3,3,3,195,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,204,
8,4,10,4,12,4,207,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,3,5,223,8,5,1,6,1,6,1,6,1,6,3,6,229,8,6,1,6,1,6,1,6,1,6,3,6,235,8,
6,1,7,1,7,1,7,1,7,3,7,241,8,7,1,7,1,7,1,7,1,7,3,7,247,8,7,1,7,1,7,1,7,1,
8,1,8,1,8,1,8,5,8,256,8,8,10,8,12,8,259,9,8,1,9,1,9,3,9,263,8,9,1,10,1,10,
3,10,267,8,10,1,10,1,10,3,10,271,8,10,1,11,1,11,1,11,1,11,3,11,277,8,11,
1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,287,8,12,1,12,1,12,1,12,3,12,
292,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,302,8,13,1,13,1,13,
1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,315,8,14,1,14,1,14,1,14,
1,15,1,15,3,15,322,8,15,1,15,1,15,1,15,1,15,1,15,3,15,329,8,15,1,15,1,15,
1,15,1,15,3,15,335,8,15,1,16,1,16,1,16,1,16,5,16,341,8,16,10,16,12,16,344,
9,16,1,17,1,17,1,17,3,17,349,8,17,1,18,3,18,352,8,18,1,18,1,18,1,18,1,18,
3,18,358,8,18,1,18,1,18,1,18,1,18,3,18,364,8,18,1,18,1,18,1,18,1,18,3,18,
370,8,18,1,18,1,18,1,18,1,18,3,18,376,8,18,1,18,1,18,1,18,1,19,1,19,1,19,
1,19,1,19,1,19,3,19,387,8,19,1,19,1,19,1,19,1,19,3,19,393,8,19,1,19,1,19,
1,19,3,19,398,8,19,1,20,1,20,1,20,3,20,403,8,20,1,20,1,20,1,20,1,20,3,20,
409,8,20,1,20,3,20,412,8,20,1,20,1,20,1,20,1,20,3,20,418,8,20,1,20,1,20,
1,21,1,21,3,21,424,8,21,1,22,1,22,1,22,3,22,429,8,22,1,22,1,22,1,23,1,23,
1,23,3,23,436,8,23,1,23,1,23,1,23,3,23,441,8,23,1,23,1,23,1,24,1,24,1,24,
1,24,1,24,1,24,1,24,3,24,452,8,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,
1,27,1,27,3,27,464,8,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
1,29,3,29,477,8,29,1,29,1,29,1,29,3,29,482,8,29,1,29,1,29,1,30,1,30,3,30,
488,8,30,1,30,1,30,3,30,492,8,30,1,30,1,30,3,30,496,8,30,1,30,1,30,1,30,
1,30,1,30,1,30,1,30,1,30,3,30,506,8,30,3,30,508,8,30,1,31,1,31,1,31,1,31,
5,31,514,8,31,10,31,12,31,517,9,31,1,32,1,32,1,32,3,32,522,8,32,1,33,1,33,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,552,8,34,
1,34,1,34,1,34,1,34,3,34,558,8,34,1,34,1,34,1,34,3,34,563,8,34,1,34,3,34,
566,8,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,3,34,601,8,34,1,34,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
34,1,34,1,34,4,34,626,8,34,11,34,12,34,627,5,34,630,8,34,10,34,12,34,633,
9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,644,8,35,10,35,12,
35,647,9,35,1,36,1,36,1,37,1,37,1,37,5,37,654,8,37,10,37,12,37,657,9,37,
1,38,1,38,1,38,3,38,662,8,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,3,39,
672,8,39,1,39,1,39,3,39,676,8,39,1,39,1,39,3,39,680,8,39,1,39,1,39,1,39,
3,39,685,8,39,1,39,1,39,1,39,1,39,3,39,691,8,39,1,39,1,39,1,39,1,39,3,39,
697,8,39,1,39,1,39,1,39,1,39,3,39,703,8,39,1,39,1,39,1,39,3,39,708,8,39,
1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,723,
8,41,10,41,12,41,726,9,41,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,43,5,43,736,
8,43,10,43,12,43,739,9,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,
45,1,45,3,45,752,8,45,1,46,3,46,755,8,46,1,46,1,46,3,46,759,8,46,1,46,1,
46,1,46,1,47,1,47,1,47,3,47,767,8,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,
1,49,1,49,1,49,1,49,1,49,1,49,5,49,782,8,49,10,49,12,49,785,9,49,1,50,1,
50,1,50,1,50,1,50,1,50,3,50,793,8,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,
1,52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,57,1,57,1,
57,1,57,5,57,818,8,57,10,57,12,57,821,9,57,1,58,1,58,3,58,825,8,58,1,58,
1,58,1,58,1,58,1,58,1,58,5,58,833,8,58,10,58,12,58,836,9,58,1,59,1,59,1,
59,1,60,1,60,1,60,5,60,844,8,60,10,60,12,60,847,9,60,1,61,1,61,3,61,851,
8,61,1,61,1,61,1,61,1,62,1,62,1,62,5,62,859,8,62,10,62,12,62,862,9,62,1,
63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,5,64,876,8,64,
10,64,12,64,879,9,64,1,65,3,65,882,8,65,1,65,1,65,1,65,3,65,887,8,65,1,65,
3,65,890,8,65,1,65,1,65,3,65,894,8,65,1,66,1,66,1,66,1,66,1,66,3,66,901,
8,66,1,67,1,67,1,67,1,67,5,67,907,8,67,10,67,12,67,910,9,67,1,68,1,68,3,
68,914,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,925,8,69,1,
70,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,76,1,76,
1,77,5,77,943,8,77,10,77,12,77,946,9,77,1,77,0,4,68,98,114,116,78,0,2,4,
6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
140,142,144,146,148,150,152,154,0,10,2,0,80,83,88,90,1,0,5,10,1,0,108,109,
2,0,48,48,63,79,8,0,1,4,11,13,16,21,23,30,32,34,42,43,45,46,99,99,2,0,82,
83,88,90,1,0,80,81,2,0,91,91,94,97,2,0,23,24,92,93,3,0,5,10,19,19,32,40,
1034,0,156,1,0,0,0,2,159,1,0,0,0,4,184,1,0,0,0,6,186,1,0,0,0,8,199,1,0,0,
0,10,222,1,0,0,0,12,224,1,0,0,0,14,236,1,0,0,0,16,251,1,0,0,0,18,262,1,0,
0,0,20,264,1,0,0,0,22,276,1,0,0,0,24,278,1,0,0,0,26,293,1,0,0,0,28,306,1,
0,0,0,30,319,1,0,0,0,32,336,1,0,0,0,34,348,1,0,0,0,36,351,1,0,0,0,38,380,
1,0,0,0,40,399,1,0,0,0,42,423,1,0,0,0,44,425,1,0,0,0,46,432,1,0,0,0,48,451,
1,0,0,0,50,453,1,0,0,0,52,455,1,0,0,0,54,457,1,0,0,0,56,467,1,0,0,0,58,470,
1,0,0,0,60,507,1,0,0,0,62,509,1,0,0,0,64,518,1,0,0,0,66,523,1,0,0,0,68,565,
1,0,0,0,70,634,1,0,0,0,72,648,1,0,0,0,74,650,1,0,0,0,76,658,1,0,0,0,78,707,
1,0,0,0,80,709,1,0,0,0,82,712,1,0,0,0,84,729,1,0,0,0,86,731,1,0,0,0,88,742,
1,0,0,0,90,751,1,0,0,0,92,754,1,0,0,0,94,763,1,0,0,0,96,768,1,0,0,0,98,773,
1,0,0,0,100,792,1,0,0,0,102,794,1,0,0,0,104,798,1,0,0,0,106,802,1,0,0,0,
108,804,1,0,0,0,110,807,1,0,0,0,112,809,1,0,0,0,114,811,1,0,0,0,116,822,
1,0,0,0,118,837,1,0,0,0,120,840,1,0,0,0,122,848,1,0,0,0,124,855,1,0,0,0,
126,863,1,0,0,0,128,869,1,0,0,0,130,886,1,0,0,0,132,900,1,0,0,0,134,902,
1,0,0,0,136,913,1,0,0,0,138,924,1,0,0,0,140,926,1,0,0,0,142,929,1,0,0,0,
144,931,1,0,0,0,146,933,1,0,0,0,148,935,1,0,0,0,150,937,1,0,0,0,152,939,
1,0,0,0,154,944,1,0,0,0,156,157,3,2,1,0,157,158,5,0,0,1,158,1,1,0,0,0,159,
165,3,4,2,0,160,161,3,152,76,0,161,162,3,4,2,0,162,164,1,0,0,0,163,160,1,
0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,3,1,0,0,0,167,
165,1,0,0,0,168,185,3,6,3,0,169,185,3,14,7,0,170,185,3,22,11,0,171,185,3,
36,18,0,172,185,3,38,19,0,173,185,3,40,20,0,174,185,3,54,27,0,175,185,3,
58,29,0,176,185,3,78,39,0,177,185,3,80,40,0,178,185,3,56,28,0,179,185,3,
108,54,0,180,185,3,90,45,0,181,185,3,154,77,0,182,185,3,60,30,0,183,185,
3,62,31,0,184,168,1,0,0,0,184,169,1,0,0,0,184,170,1,0,0,0,184,171,1,0,0,
0,184,172,1,0,0,0,184,173,1,0,0,0,184,174,1,0,0,0,184,175,1,0,0,0,184,176,
1,0,0,0,184,177,1,0,0,0,184,178,1,0,0,0,184,179,1,0,0,0,184,180,1,0,0,0,
184,181,1,0,0,0,184,182,1,0,0,0,184,183,1,0,0,0,185,5,1,0,0,0,186,188,5,
30,0,0,187,189,3,110,55,0,188,187,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,
0,190,194,3,152,76,0,191,192,3,8,4,0,192,193,3,152,76,0,193,195,1,0,0,0,
194,191,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,3,154,77,0,197,198,
5,1,0,0,198,7,1,0,0,0,199,205,3,10,5,0,200,201,3,152,76,0,201,202,3,10,5,
0,202,204,1,0,0,0,203,200,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,
1,0,0,0,206,9,1,0,0,0,207,205,1,0,0,0,208,223,3,6,3,0,209,223,3,14,7,0,210,
223,3,22,11,0,211,223,3,36,18,0,212,223,3,38,19,0,213,223,3,40,20,0,214,
223,3,54,27,0,215,223,3,58,29,0,216,223,3,78,39,0,217,223,3,80,40,0,218,
223,3,108,54,0,219,223,3,90,45,0,220,223,3,154,77,0,221,223,3,62,31,0,222,
208,1,0,0,0,222,209,1,0,0,0,222,210,1,0,0,0,222,211,1,0,0,0,222,212,1,0,
0,0,222,213,1,0,0,0,222,214,1,0,0,0,222,215,1,0,0,0,222,216,1,0,0,0,222,
217,1,0,0,0,222,218,1,0,0,0,222,219,1,0,0,0,222,220,1,0,0,0,222,221,1,0,
0,0,223,11,1,0,0,0,224,225,3,110,55,0,225,226,5,58,0,0,226,228,3,154,77,
0,227,229,3,128,64,0,228,227,1,0,0,0,228,229,1,0,0,0,229,230,1,0,0,0,230,
231,3,154,77,0,231,232,1,0,0,0,232,234,5,59,0,0,233,235,3,116,58,0,234,233,
1,0,0,0,234,235,1,0,0,0,235,13,1,0,0,0,236,237,5,3,0,0,237,240,3,110,55,
0,238,239,5,19,0,0,239,241,3,114,57,0,240,238,1,0,0,0,240,241,1,0,0,0,241,
242,1,0,0,0,242,246,3,152,76,0,243,244,3,16,8,0,244,245,3,152,76,0,245,247,
1,0,0,0,246,243,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,3,154,77,
0,249,250,5,1,0,0,250,15,1,0,0,0,251,257,3,18,9,0,252,253,3,152,76,0,253,
254,3,18,9,0,254,256,1,0,0,0,255,252,1,0,0,0,256,259,1,0,0,0,257,255,1,0,
0,0,257,258,1,0,0,0,258,17,1,0,0,0,259,257,1,0,0,0,260,263,3,20,10,0,261,
263,3,154,77,0,262,260,1,0,0,0,262,261,1,0,0,0,263,19,1,0,0,0,264,266,3,
110,55,0,265,267,3,116,58,0,266,265,1,0,0,0,266,267,1,0,0,0,267,270,1,0,
0,0,268,269,5,63,0,0,269,271,3,132,66,0,270,268,1,0,0,0,270,271,1,0,0,0,
271,21,1,0,0,0,272,277,3,24,12,0,273,277,3,26,13,0,274,277,3,28,14,0,275,
277,3,30,15,0,276,272,1,0,0,0,276,273,1,0,0,0,276,274,1,0,0,0,276,275,1,
0,0,0,277,23,1,0,0,0,278,279,5,42,0,0,279,291,3,110,55,0,280,292,3,116,58,
0,281,282,3,152,76,0,282,286,3,154,77,0,283,284,3,32,16,0,284,285,3,152,
76,0,285,287,1,0,0,0,286,283,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,
289,3,154,77,0,289,290,5,1,0,0,290,292,1,0,0,0,291,280,1,0,0,0,291,281,1,
0,0,0,292,25,1,0,0,0,293,294,5,42,0,0,294,295,5,3,0,0,295,296,3,110,55,0,
296,297,3,152,76,0,297,301,3,154,77,0,298,299,3,32,16,0,299,300,3,152,76,
0,300,302,1,0,0,0,301,298,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,304,
3,154,77,0,304,305,5,1,0,0,305,27,1,0,0,0,306,307,5,42,0,0,307,308,5,30,
0,0,308,309,3,110,55,0,309,310,3,152,76,0,310,314,3,154,77,0,311,312,3,32,
16,0,312,313,3,152,76,0,313,315,1,0,0,0,314,311,1,0,0,0,314,315,1,0,0,0,
315,316,1,0,0,0,316,317,3,154,77,0,317,318,5,1,0,0,318,29,1,0,0,0,319,321,
5,42,0,0,320,322,5,21,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,
0,323,324,5,2,0,0,324,325,3,110,55,0,325,326,5,58,0,0,326,328,3,154,77,0,
327,329,3,128,64,0,328,327,1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,331,
3,154,77,0,331,332,1,0,0,0,332,334,5,59,0,0,333,335,3,116,58,0,334,333,1,
0,0,0,334,335,1,0,0,0,335,31,1,0,0,0,336,342,3,34,17,0,337,338,3,152,76,
0,338,339,3,34,17,0,339,341,1,0,0,0,340,337,1,0,0,0,341,344,1,0,0,0,342,
340,1,0,0,0,342,343,1,0,0,0,343,33,1,0,0,0,344,342,1,0,0,0,345,349,3,20,
10,0,346,349,3,12,6,0,347,349,3,154,77,0,348,345,1,0,0,0,348,346,1,0,0,0,
348,347,1,0,0,0,349,35,1,0,0,0,350,352,5,21,0,0,351,350,1,0,0,0,351,352,
1,0,0,0,352,353,1,0,0,0,353,357,5,2,0,0,354,355,3,110,55,0,355,356,5,85,
0,0,356,358,1,0,0,0,357,354,1,0,0,0,357,358,1,0,0,0,358,359,1,0,0,0,359,
360,3,110,55,0,360,361,5,58,0,0,361,363,3,154,77,0,362,364,3,128,64,0,363,
362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,3,154,77,0,366,367,1,
0,0,0,367,369,5,59,0,0,368,370,3,116,58,0,369,368,1,0,0,0,369,370,1,0,0,
0,370,371,1,0,0,0,371,375,3,152,76,0,372,373,3,134,67,0,373,374,3,152,76,
0,374,376,1,0,0,0,375,372,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,
3,154,77,0,378,379,5,1,0,0,379,37,1,0,0,0,380,381,5,11,0,0,381,382,3,78,
39,0,382,386,3,152,76,0,383,384,3,134,67,0,384,385,3,152,76,0,385,387,1,
0,0,0,386,383,1,0,0,0,386,387,1,0,0,0,387,397,1,0,0,0,388,389,5,27,0,0,389,
390,3,134,67,0,390,391,3,152,76,0,391,393,1,0,0,0,392,388,1,0,0,0,392,393,
1,0,0,0,393,394,1,0,0,0,394,398,5,1,0,0,395,396,5,27,0,0,396,398,3,38,19,
0,397,392,1,0,0,0,397,395,1,0,0,0,398,39,1,0,0,0,399,402,5,4,0,0,400,403,
3,78,39,0,401,403,3,42,21,0,402,400,1,0,0,0,402,401,1,0,0,0,403,404,1,0,
0,0,404,408,5,17,0,0,405,406,3,110,55,0,406,407,5,62,0,0,407,409,1,0,0,0,
408,405,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,412,3,110,55,0,411,410,
1,0,0,0,411,412,1,0,0,0,412,413,1,0,0,0,413,417,3,152,76,0,414,415,3,134,
67,0,415,416,3,152,76,0,416,418,1,0,0,0,417,414,1,0,0,0,417,418,1,0,0,0,
418,419,1,0,0,0,419,420,5,1,0,0,420,41,1,0,0,0,421,424,3,44,22,0,422,424,
3,46,23,0,423,421,1,0,0,0,423,422,1,0,0,0,424,43,1,0,0,0,425,426,3,48,24,
0,426,428,5,52,0,0,427,429,3,52,26,0,428,427,1,0,0,0,428,429,1,0,0,0,429,
430,1,0,0,0,430,431,3,48,24,0,431,45,1,0,0,0,432,433,3,48,24,0,433,435,5,
52,0,0,434,436,3,50,25,0,435,434,1,0,0,0,435,436,1,0,0,0,436,437,1,0,0,0,
437,438,3,48,24,0,438,440,5,52,0,0,439,441,3,52,26,0,440,439,1,0,0,0,440,
441,1,0,0,0,441,442,1,0,0,0,442,443,3,48,24,0,443,47,1,0,0,0,444,452,5,100,
0,0,445,452,5,109,0,0,446,452,3,110,55,0,447,448,5,58,0,0,448,449,3,68,34,
0,449,450,5,59,0,0,450,452,1,0,0,0,451,444,1,0,0,0,451,445,1,0,0,0,451,446,
1,0,0,0,451,447,1,0,0,0,452,49,1,0,0,0,453,454,7,0,0,0,454,51,1,0,0,0,455,
456,7,1,0,0,456,53,1,0,0,0,457,458,5,29,0,0,458,459,3,78,39,0,459,463,3,
152,76,0,460,461,3,134,67,0,461,462,3,152,76,0,462,464,1,0,0,0,463,460,1,
0,0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,466,5,1,0,0,466,55,1,0,0,0,467,
468,5,45,0,0,468,469,3,68,34,0,469,57,1,0,0,0,470,471,5,25,0,0,471,472,3,
152,76,0,472,473,3,134,67,0,473,474,3,152,76,0,474,476,5,26,0,0,475,477,
3,110,55,0,476,475,1,0,0,0,476,477,1,0,0,0,477,481,1,0,0,0,478,479,3,134,
67,0,479,480,3,152,76,0,480,482,1,0,0,0,481,478,1,0,0,0,481,482,1,0,0,0,
482,483,1,0,0,0,483,484,5,1,0,0,484,59,1,0,0,0,485,487,5,13,0,0,486,488,
5,85,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,491,3,114,57,
0,490,492,5,41,0,0,491,490,1,0,0,0,491,492,1,0,0,0,492,495,1,0,0,0,493,494,
5,17,0,0,494,496,3,110,55,0,495,493,1,0,0,0,495,496,1,0,0,0,496,508,1,0,
0,0,497,498,5,15,0,0,498,499,5,109,0,0,499,500,5,17,0,0,500,508,3,110,55,
0,501,502,5,13,0,0,502,505,5,109,0,0,503,504,5,17,0,0,504,506,3,110,55,0,
505,503,1,0,0,0,505,506,1,0,0,0,506,508,1,0,0,0,507,485,1,0,0,0,507,497,
1,0,0,0,507,501,1,0,0,0,508,61,1,0,0,0,509,510,5,16,0,0,510,515,3,64,32,
0,511,512,5,62,0,0,512,514,3,64,32,0,513,511,1,0,0,0,514,517,1,0,0,0,515,
513,1,0,0,0,515,516,1,0,0,0,516,63,1,0,0,0,517,515,1,0,0,0,518,521,3,110,
55,0,519,520,5,17,0,0,520,522,3,110,55,0,521,519,1,0,0,0,521,522,1,0,0,0,
522,65,1,0,0,0,523,524,7,2,0,0,524,67,1,0,0,0,525,526,6,34,-1,0,526,566,
5,100,0,0,527,566,3,66,33,0,528,566,3,110,55,0,529,530,5,80,0,0,530,566,
3,68,34,21,531,532,5,81,0,0,532,566,3,68,34,20,533,534,5,56,0,0,534,566,
3,68,34,19,535,536,5,57,0,0,536,566,3,68,34,18,537,538,5,86,0,0,538,566,
3,68,34,15,539,540,5,87,0,0,540,566,3,68,34,14,541,542,5,58,0,0,542,543,
3,78,39,0,543,544,5,59,0,0,544,566,1,0,0,0,545,546,5,58,0,0,546,547,3,78,
39,0,547,548,5,59,0,0,548,551,5,58,0,0,549,552,3,120,60,0,550,552,3,124,
62,0,551,549,1,0,0,0,551,550,1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,
554,5,59,0,0,554,566,1,0,0,0,555,557,5,60,0,0,556,558,3,70,35,0,557,556,
1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,559,566,5,61,0,0,560,562,5,58,0,
0,561,563,3,74,37,0,562,561,1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,
566,5,59,0,0,565,525,1,0,0,0,565,527,1,0,0,0,565,528,1,0,0,0,565,529,1,0,
0,0,565,531,1,0,0,0,565,533,1,0,0,0,565,535,1,0,0,0,565,537,1,0,0,0,565,
539,1,0,0,0,565,541,1,0,0,0,565,545,1,0,0,0,565,555,1,0,0,0,565,560,1,0,
0,0,566,631,1,0,0,0,567,568,10,10,0,0,568,569,5,17,0,0,569,630,3,68,34,11,
570,571,10,9,0,0,571,572,3,142,71,0,572,573,3,68,34,10,573,630,1,0,0,0,574,
575,10,8,0,0,575,576,3,144,72,0,576,577,3,68,34,9,577,630,1,0,0,0,578,579,
10,7,0,0,579,580,3,146,73,0,580,581,3,68,34,8,581,630,1,0,0,0,582,583,10,
6,0,0,583,584,3,150,75,0,584,585,3,68,34,7,585,630,1,0,0,0,586,587,10,5,
0,0,587,588,3,148,74,0,588,589,3,68,34,6,589,630,1,0,0,0,590,591,10,23,0,
0,591,592,3,154,77,0,592,593,5,85,0,0,593,594,3,154,77,0,594,595,3,112,56,
0,595,630,1,0,0,0,596,597,10,22,0,0,597,600,5,58,0,0,598,601,3,120,60,0,
599,601,3,124,62,0,600,598,1,0,0,0,600,599,1,0,0,0,600,601,1,0,0,0,601,602,
1,0,0,0,602,630,5,59,0,0,603,604,10,17,0,0,604,630,5,56,0,0,605,606,10,16,
0,0,606,630,5,57,0,0,607,608,10,13,0,0,608,609,5,60,0,0,609,610,3,78,39,
0,610,611,5,61,0,0,611,630,1,0,0,0,612,613,10,4,0,0,613,614,3,154,77,0,614,
615,5,31,0,0,615,616,3,154,77,0,616,617,3,78,39,0,617,618,3,154,77,0,618,
619,5,84,0,0,619,620,3,154,77,0,620,621,3,78,39,0,621,630,1,0,0,0,622,625,
10,1,0,0,623,624,5,18,0,0,624,626,3,68,34,0,625,623,1,0,0,0,626,627,1,0,
0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,630,1,0,0,0,629,567,1,0,0,0,629,
570,1,0,0,0,629,574,1,0,0,0,629,578,1,0,0,0,629,582,1,0,0,0,629,586,1,0,
0,0,629,590,1,0,0,0,629,596,1,0,0,0,629,603,1,0,0,0,629,605,1,0,0,0,629,
607,1,0,0,0,629,612,1,0,0,0,629,622,1,0,0,0,630,633,1,0,0,0,631,629,1,0,
0,0,631,632,1,0,0,0,632,69,1,0,0,0,633,631,1,0,0,0,634,635,3,154,77,0,635,
636,3,72,36,0,636,645,3,154,77,0,637,638,3,154,77,0,638,639,5,62,0,0,639,
640,3,154,77,0,640,641,3,72,36,0,641,642,3,154,77,0,642,644,1,0,0,0,643,
637,1,0,0,0,644,647,1,0,0,0,645,643,1,0,0,0,645,646,1,0,0,0,646,71,1,0,0,
0,647,645,1,0,0,0,648,649,3,78,39,0,649,73,1,0,0,0,650,655,3,76,38,0,651,
652,5,62,0,0,652,654,3,76,38,0,653,651,1,0,0,0,654,657,1,0,0,0,655,653,1,
0,0,0,655,656,1,0,0,0,656,75,1,0,0,0,657,655,1,0,0,0,658,661,3,154,77,0,
659,662,3,110,55,0,660,662,5,109,0,0,661,659,1,0,0,0,661,660,1,0,0,0,662,
663,1,0,0,0,663,664,5,63,0,0,664,665,3,78,39,0,665,666,3,154,77,0,666,77,
1,0,0,0,667,708,3,68,34,0,668,669,5,12,0,0,669,708,3,68,34,0,670,672,5,21,
0,0,671,670,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,675,5,58,0,0,674,
676,3,128,64,0,675,674,1,0,0,0,675,676,1,0,0,0,676,677,1,0,0,0,677,679,5,
59,0,0,678,680,3,116,58,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,
0,681,682,5,84,0,0,682,708,3,78,39,0,683,685,5,21,0,0,684,683,1,0,0,0,684,
685,1,0,0,0,685,686,1,0,0,0,686,687,5,2,0,0,687,688,5,58,0,0,688,690,3,154,
77,0,689,691,3,128,64,0,690,689,1,0,0,0,690,691,1,0,0,0,691,692,1,0,0,0,
692,693,3,154,77,0,693,694,1,0,0,0,694,696,5,59,0,0,695,697,3,116,58,0,696,
695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,702,3,152,76,0,699,700,3,
134,67,0,700,701,3,152,76,0,701,703,1,0,0,0,702,699,1,0,0,0,702,703,1,0,
0,0,703,704,1,0,0,0,704,705,3,154,77,0,705,706,5,1,0,0,706,708,1,0,0,0,707,
667,1,0,0,0,707,668,1,0,0,0,707,671,1,0,0,0,707,684,1,0,0,0,708,79,1,0,0,
0,709,710,5,28,0,0,710,711,3,78,39,0,711,81,1,0,0,0,712,713,5,60,0,0,713,
714,3,154,77,0,714,715,3,84,42,0,715,724,3,154,77,0,716,717,3,154,77,0,717,
718,5,62,0,0,718,719,3,154,77,0,719,720,3,84,42,0,720,721,3,154,77,0,721,
723,1,0,0,0,722,716,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,1,0,
0,0,725,727,1,0,0,0,726,724,1,0,0,0,727,728,5,61,0,0,728,83,1,0,0,0,729,
730,3,110,55,0,730,85,1,0,0,0,731,732,5,58,0,0,732,737,3,88,44,0,733,734,
5,62,0,0,734,736,3,88,44,0,735,733,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,
0,737,738,1,0,0,0,738,740,1,0,0,0,739,737,1,0,0,0,740,741,5,59,0,0,741,87,
1,0,0,0,742,743,3,154,77,0,743,744,3,110,55,0,744,745,3,154,77,0,745,89,
1,0,0,0,746,752,3,92,46,0,747,752,3,94,47,0,748,752,3,96,48,0,749,752,3,
102,51,0,750,752,3,104,52,0,751,746,1,0,0,0,751,747,1,0,0,0,751,748,1,0,
0,0,751,749,1,0,0,0,751,750,1,0,0,0,752,91,1,0,0,0,753,755,5,22,0,0,754,
753,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,758,3,110,55,0,757,759,3,
116,58,0,758,757,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,761,3,106,53,
0,761,762,3,78,39,0,762,93,1,0,0,0,763,764,5,22,0,0,764,766,3,110,55,0,765,
767,3,116,58,0,766,765,1,0,0,0,766,767,1,0,0,0,767,95,1,0,0,0,768,769,3,
98,49,0,769,770,3,100,50,0,770,771,3,106,53,0,771,772,3,78,39,0,772,97,1,
0,0,0,773,774,6,49,-1,0,774,775,3,114,57,0,775,783,1,0,0,0,776,777,10,1,
0,0,777,778,5,60,0,0,778,779,3,78,39,0,779,780,5,61,0,0,780,782,1,0,0,0,
781,776,1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,784,99,1,
0,0,0,785,783,1,0,0,0,786,787,5,85,0,0,787,793,3,110,55,0,788,789,5,60,0,
0,789,790,3,78,39,0,790,791,5,61,0,0,791,793,1,0,0,0,792,786,1,0,0,0,792,
788,1,0,0,0,793,101,1,0,0,0,794,795,3,82,41,0,795,796,5,63,0,0,796,797,3,
78,39,0,797,103,1,0,0,0,798,799,3,86,43,0,799,800,5,63,0,0,800,801,3,78,
39,0,801,105,1,0,0,0,802,803,7,3,0,0,803,107,1,0,0,0,804,805,5,12,0,0,805,
806,3,90,45,0,806,109,1,0,0,0,807,808,5,99,0,0,808,111,1,0,0,0,809,810,7,
4,0,0,810,113,1,0,0,0,811,812,6,57,-1,0,812,813,3,110,55,0,813,819,1,0,0,
0,814,815,10,1,0,0,815,816,5,85,0,0,816,818,3,114,57,2,817,814,1,0,0,0,818,
821,1,0,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,115,1,0,0,0,821,819,1,0,
0,0,822,824,6,58,-1,0,823,825,3,118,59,0,824,823,1,0,0,0,824,825,1,0,0,0,
825,826,1,0,0,0,826,827,3,114,57,0,827,834,1,0,0,0,828,829,10,1,0,0,829,
830,3,148,74,0,830,831,3,116,58,2,831,833,1,0,0,0,832,828,1,0,0,0,833,836,
1,0,0,0,834,832,1,0,0,0,834,835,1,0,0,0,835,117,1,0,0,0,836,834,1,0,0,0,
837,838,5,60,0,0,838,839,5,61,0,0,839,119,1,0,0,0,840,845,3,122,61,0,841,
842,5,62,0,0,842,844,3,122,61,0,843,841,1,0,0,0,844,847,1,0,0,0,845,843,
1,0,0,0,845,846,1,0,0,0,846,121,1,0,0,0,847,845,1,0,0,0,848,850,3,154,77,
0,849,851,5,51,0,0,850,849,1,0,0,0,850,851,1,0,0,0,851,852,1,0,0,0,852,853,
3,78,39,0,853,854,3,154,77,0,854,123,1,0,0,0,855,860,3,126,63,0,856,857,
5,62,0,0,857,859,3,126,63,0,858,856,1,0,0,0,859,862,1,0,0,0,860,858,1,0,
0,0,860,861,1,0,0,0,861,125,1,0,0,0,862,860,1,0,0,0,863,864,3,154,77,0,864,
865,3,110,55,0,865,866,5,63,0,0,866,867,3,78,39,0,867,868,3,154,77,0,868,
127,1,0,0,0,869,877,3,130,65,0,870,871,3,154,77,0,871,872,5,62,0,0,872,873,
3,154,77,0,873,874,3,130,65,0,874,876,1,0,0,0,875,870,1,0,0,0,876,879,1,
0,0,0,877,875,1,0,0,0,877,878,1,0,0,0,878,129,1,0,0,0,879,877,1,0,0,0,880,
882,5,51,0,0,881,880,1,0,0,0,881,882,1,0,0,0,882,883,1,0,0,0,883,887,3,110,
55,0,884,887,3,82,41,0,885,887,3,86,43,0,886,881,1,0,0,0,886,884,1,0,0,0,
886,885,1,0,0,0,887,889,1,0,0,0,888,890,3,116,58,0,889,888,1,0,0,0,889,890,
1,0,0,0,890,893,1,0,0,0,891,892,5,63,0,0,892,894,3,132,66,0,893,891,1,0,
0,0,893,894,1,0,0,0,894,131,1,0,0,0,895,901,5,100,0,0,896,901,7,2,0,0,897,
901,3,110,55,0,898,899,5,58,0,0,899,901,5,59,0,0,900,895,1,0,0,0,900,896,
1,0,0,0,900,897,1,0,0,0,900,898,1,0,0,0,901,133,1,0,0,0,902,908,3,136,68,
0,903,904,3,152,76,0,904,905,3,136,68,0,905,907,1,0,0,0,906,903,1,0,0,0,
907,910,1,0,0,0,908,906,1,0,0,0,908,909,1,0,0,0,909,135,1,0,0,0,910,908,
1,0,0,0,911,914,3,138,69,0,912,914,3,140,70,0,913,911,1,0,0,0,913,912,1,
0,0,0,914,137,1,0,0,0,915,925,3,38,19,0,916,925,3,40,20,0,917,925,3,54,27,
0,918,925,3,58,29,0,919,925,3,78,39,0,920,925,3,80,40,0,921,925,3,108,54,
0,922,925,3,90,45,0,923,925,3,154,77,0,924,915,1,0,0,0,924,916,1,0,0,0,924,
917,1,0,0,0,924,918,1,0,0,0,924,919,1,0,0,0,924,920,1,0,0,0,924,921,1,0,
0,0,924,922,1,0,0,0,924,923,1,0,0,0,925,139,1,0,0,0,926,927,5,20,0,0,927,
928,3,138,69,0,928,141,1,0,0,0,929,930,7,5,0,0,930,143,1,0,0,0,931,932,7,
6,0,0,932,145,1,0,0,0,933,934,7,7,0,0,934,147,1,0,0,0,935,936,7,8,0,0,936,
149,1,0,0,0,937,938,7,9,0,0,938,151,1,0,0,0,939,940,5,55,0,0,940,153,1,0,
0,0,941,943,3,152,76,0,942,941,1,0,0,0,943,946,1,0,0,0,944,942,1,0,0,0,944,
945,1,0,0,0,945,155,1,0,0,0,946,944,1,0,0,0,94,165,184,188,194,205,222,228,
234,240,246,257,262,266,270,276,286,291,301,314,321,328,334,342,348,351,
357,363,369,375,386,392,397,402,408,411,417,423,428,435,440,451,463,476,
481,487,491,495,505,507,515,521,551,557,562,565,600,627,629,631,645,655,
661,671,675,679,684,690,696,702,707,724,737,751,754,758,766,783,792,819,
824,834,845,850,860,877,881,886,889,893,900,908,913,924,944];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class DiiaParser extends antlr4.Parser {

    static grammarFileName = "java-escape";
    static literalNames = [ null, "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", 
                            "'\\u0434\\u0456\\u044F'", "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
                            "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
                            "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", 
                            "'\\u044F\\u043A\\u0449\\u043E'", "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
                            "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0432\\u0437\\u044F\\u0442\\u0438 \\u043F\\u0430\\u043A'", 
                            "'\\u0432\\u0437\\u044F\\u0442\\u0438 \\u0444\\u0430\\u0439\\u043B'", 
                            "'\\u0434\\u0430\\u0442\\u0438'", "'\\u044F\\u043A'", 
                            "'\\u0442\\u0430'", "'\\u0454'", "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", 
                            "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", 
                            "'\\u0441\\u0443\\u0431\\u02BC\\u0454\\u043A\\u0442'", 
                            "'\\u0456'", "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
                            "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", 
                            "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
                            "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", 
                            "'\\u043F\\u043E\\u043A\\u0438'", "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", 
                            "'?'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
                            "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", 
                            "'\\u043C\\u0435\\u043D\\u0448\\u0435'", "'\\u043D\\u0435 \\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", 
                            "'\\u043D\\u0435 \\u043C\\u0435\\u043D\\u0448\\u0435'", 
                            "'\\u043D\\u0435 \\u0440\\u0456\\u0432\\u043D\\u043E'", 
                            "'\\u043D\\u0435 \\u0454'", "'\\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", 
                            "'\\u043D\\u0435 \\u043C\\u0456\\u0441\\u0442\\u0438\\u0442\\u044C'", 
                            "'.*'", "'\\u043C\\u0430\\u043A\\u0435\\u0442'", 
                            "'\\u0432\\u0442\\u0456\\u043B\\u044E\\u0454'", 
                            "'\\u0432\\u0442\\u0456\\u043B\\u0438\\u0442\\u0438'", 
                            "'js'", "'\\u043A\\u043E\\u043B\\u0438'", "'\\u0442\\u0430\\u043A\\u043E\\u0436'", 
                            "'\\u0446\\u0435'", "'\\u0442\\u0435\\u0441\\u0442'", 
                            "'\\u0439'", "'...'", "'..'", "'->'", null, 
                            null, "'--'", "'++'", "'('", "')'", "'['", "']'", 
                            "','", "'='", "':='", "'+='", "'-='", "'*='", 
                            "'/='", "'//='", "'%='", "'|='", "'&='", "'<<='", 
                            "'>>='", "'^='", "'**='", "'||='", "'&&='", 
                            "'??='", "'+'", "'-'", "'*'", "'/'", "':'", 
                            "'.'", "'!'", "'~'", "'%'", "'//'", "'**'", 
                            "'^'", "'||'", "'&&'", "'|'", "'&'", "'<<'", 
                            "'>>'", "'0x'", null, null, null, null, null, 
                            null, null, null, "'\"\"\"'" ];
    static symbolicNames = [ null, "END", "DIIA", "STRUCTURE", "FOR", "EQ", 
                             "NOT_EQ", "GREATER_EQ", "SMALLER_EQ", "GREATER", 
                             "SMALLER", "IF", "WAIT", "TAKE", "TAKE_PAK", 
                             "TAKE_FILE", "GIVE", "AS", "TA", "IS", "RETURN", 
                             "ASYNC", "SUBJECT", "AND", "OR", "TRY", "CATCH", 
                             "ELSE", "THROW", "WHILE", "MODULE", "TERNARY", 
                             "EQ_WORD", "GR_WORD", "SM_WORD", "NOT_GR_WORD", 
                             "NOT_SM_WORD", "NOT_EQ_WORD", "NOT_IS_WORD", 
                             "HAS_IS_WORD", "NOT_HAS_IS_WORD", "STAR_ALL", 
                             "MOCKUP", "IMPLEMENTS", "IMPLEMENT", "EVAL", 
                             "WHEN", "ALSO", "TSE", "TEST", "IY", "SPREAD", 
                             "FROMTO", "FARROW", "SKIP_SPACES", "NL", "DECREMENT", 
                             "INCREMENT", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", 
                             "CLOSE_ARRAY", "COMMA", "ASSIGN", "ASSIGN_PARENT", 
                             "ASSIGN_ADD", "ASSIGN_SUB", "ASSIGN_MUL", "ASSIGN_DIV", 
                             "ASSIGN_DIVDIV", "ASSIGN_MOD", "ASSIGN_BW_OR", 
                             "ASSIGN_BW_AND", "ASSIGN_BW_SHIFT_LEFT", "ASSIGN_BW_SHIFT_RIGHT", 
                             "ASSIGN_XOR", "ASSIGN_POW", "ASSIGN_OR", "ASSIGN_AND", 
                             "ASSIGN_IF", "PLUS", "MINUS", "MUL", "DIV", 
                             "COLON", "DOT", "NOT", "TILDA", "PERCENT", 
                             "DIVDIV", "POW", "XOR", "OR_SYM", "AND_SYM", 
                             "OR_BW", "AND_BW", "BW_SHIFT_LEFT", "BW_SHIFT_RIGHT", 
                             "HEX_START", "ID", "NUMBER", "INTEGER", "FLOAT", 
                             "HEX", "HEXUKR", "BINNUM", "BINNUMUKR", "TRIPPLE_QUOTE", 
                             "STRING_MULTILINE", "STRING", "COMMENT", "LINE_COMMENT", 
                             "OLD_COMMENT" ];
    static ruleNames = [ "file", "program", "program_element", "module", 
                         "module_body", "module_body_element", "method_declaration", 
                         "structure", "structure_elements", "structure_element", 
                         "structure_param", "mockup", "mockup_object", "mockup_structure", 
                         "mockup_module", "mockup_diia", "mockup_body", 
                         "mockup_body_element", "diia", "if", "each", "fromto", 
                         "fromto_simple", "fromto_complex", "fromto_value", 
                         "fromto_middle_symbol", "fromto_to_symbol", "while", 
                         "eval", "try", "take", "give", "give_element", 
                         "string", "value", "array_elements", "array_element", 
                         "dictionary_args", "dictionary_arg", "expr", "throw", 
                         "array_destruction", "array_destruction_el", "object_destruction", 
                         "object_destruction_el", "assign", "assign_simple", 
                         "assign_define", "assign_complex", "assign_complex_left", 
                         "assign_complex_right", "assign_array_destruction", 
                         "assign_object_destruction", "assign_symbol", "wait_assign", 
                         "identifier", "extended_identifier", "identifiers_chain", 
                         "type_value", "type_value_array", "args", "arg", 
                         "named_args", "named_arg", "params", "param", "param_value", 
                         "body", "body_element_or_return", "body_element", 
                         "return_body_line", "arithmetic_op_mul", "arithmetic_op_add", 
                         "bitwise_op", "test_op", "comparison_op", "nl", 
                         "nls" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = DiiaParser.ruleNames;
        this.literalNames = DiiaParser.literalNames;
        this.symbolicNames = DiiaParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 34:
    	    		return this.value_sempred(localctx, predIndex);
    	case 49:
    	    		return this.assign_complex_left_sempred(localctx, predIndex);
    	case 57:
    	    		return this.identifiers_chain_sempred(localctx, predIndex);
    	case 58:
    	    		return this.type_value_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    value_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 10);
    		case 1:
    			return this.precpred(this._ctx, 9);
    		case 2:
    			return this.precpred(this._ctx, 8);
    		case 3:
    			return this.precpred(this._ctx, 7);
    		case 4:
    			return this.precpred(this._ctx, 6);
    		case 5:
    			return this.precpred(this._ctx, 5);
    		case 6:
    			return this.precpred(this._ctx, 23);
    		case 7:
    			return this.precpred(this._ctx, 22);
    		case 8:
    			return this.precpred(this._ctx, 17);
    		case 9:
    			return this.precpred(this._ctx, 16);
    		case 10:
    			return this.precpred(this._ctx, 13);
    		case 11:
    			return this.precpred(this._ctx, 4);
    		case 12:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    assign_complex_left_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    identifiers_chain_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    type_value_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	file() {
	    let localctx = new FileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, DiiaParser.RULE_file);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 156;
	        localctx.f_program = this.program();
	        this.state = 157;
	        this.match(DiiaParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program() {
	    let localctx = new ProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, DiiaParser.RULE_program);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 159;
	        this.program_element();
	        this.state = 165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===55) {
	            this.state = 160;
	            this.nl();
	            this.state = 161;
	            this.program_element();
	            this.state = 167;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	program_element() {
	    let localctx = new Program_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, DiiaParser.RULE_program_element);
	    try {
	        this.state = 184;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 168;
	            this.module();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 169;
	            this.structure();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 170;
	            this.mockup();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 171;
	            this.diia();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 172;
	            this.if_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 173;
	            this.each();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 174;
	            this.while_();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 175;
	            this.try_();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 176;
	            this.expr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 177;
	            this.throw_();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 178;
	            this.eval();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 179;
	            this.wait_assign();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 180;
	            this.assign();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 181;
	            this.nls();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 182;
	            this.take();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 183;
	            this.give();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module() {
	    let localctx = new ModuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, DiiaParser.RULE_module);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 186;
	        this.match(DiiaParser.MODULE);
	        this.state = 188;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 187;
	            localctx.m_name = this.identifier();
	        }

	        this.state = 190;
	        this.nl();
	        this.state = 194;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        if(la_===1) {
	            this.state = 191;
	            localctx.m_body = this.module_body();
	            this.state = 192;
	            this.nl();

	        }
	        this.state = 196;
	        this.nls();
	        this.state = 197;
	        this.match(DiiaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_body() {
	    let localctx = new Module_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, DiiaParser.RULE_module_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 199;
	        this.module_body_element();
	        this.state = 205;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 200;
	                this.nl();
	                this.state = 201;
	                this.module_body_element(); 
	            }
	            this.state = 207;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	module_body_element() {
	    let localctx = new Module_body_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, DiiaParser.RULE_module_body_element);
	    try {
	        this.state = 222;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 208;
	            this.module();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 209;
	            this.structure();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 210;
	            this.mockup();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 211;
	            this.diia();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 212;
	            this.if_();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 213;
	            this.each();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 214;
	            this.while_();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 215;
	            this.try_();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 216;
	            this.expr();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 217;
	            this.throw_();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 218;
	            this.wait_assign();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 219;
	            this.assign();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 220;
	            this.nls();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 221;
	            this.give();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	method_declaration() {
	    let localctx = new Method_declarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, DiiaParser.RULE_method_declaration);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        localctx.md_name = this.identifier();
	        this.state = 225;
	        this.match(DiiaParser.OPEN_PAREN);

	        this.state = 226;
	        this.nls();
	        this.state = 228;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & 641) !== 0) || _la===99) {
	            this.state = 227;
	            localctx.md_params = this.params();
	        }

	        this.state = 230;
	        this.nls();
	        this.state = 232;
	        this.match(DiiaParser.CLOSE_PAREN);
	        this.state = 234;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60 || _la===99) {
	            this.state = 233;
	            localctx.md_type = this.type_value(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structure() {
	    let localctx = new StructureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, DiiaParser.RULE_structure);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 236;
	        this.match(DiiaParser.STRUCTURE);
	        this.state = 237;
	        localctx.s_name = this.identifier();
	        this.state = 240;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 238;
	            this.match(DiiaParser.IS);
	            this.state = 239;
	            localctx.s_parent = this.identifiers_chain(0);
	        }

	        this.state = 242;
	        this.nl();
	        this.state = 246;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        if(la_===1) {
	            this.state = 243;
	            localctx.s_elements = this.structure_elements();
	            this.state = 244;
	            this.nl();

	        }
	        this.state = 248;
	        this.nls();
	        this.state = 249;
	        this.match(DiiaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structure_elements() {
	    let localctx = new Structure_elementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, DiiaParser.RULE_structure_elements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 251;
	        this.structure_element();
	        this.state = 257;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,10,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 252;
	                this.nl();
	                this.state = 253;
	                this.structure_element(); 
	            }
	            this.state = 259;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,10,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structure_element() {
	    let localctx = new Structure_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, DiiaParser.RULE_structure_element);
	    try {
	        this.state = 262;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 99:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 260;
	            this.structure_param();
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 261;
	            this.nls();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	structure_param() {
	    let localctx = new Structure_paramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, DiiaParser.RULE_structure_param);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 264;
	        localctx.sp_name = this.identifier();
	        this.state = 266;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60 || _la===99) {
	            this.state = 265;
	            localctx.sp_type = this.type_value(0);
	        }

	        this.state = 270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63) {
	            this.state = 268;
	            this.match(DiiaParser.ASSIGN);
	            this.state = 269;
	            localctx.sp_value = this.param_value();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mockup() {
	    let localctx = new MockupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, DiiaParser.RULE_mockup);
	    try {
	        this.state = 276;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 272;
	            this.mockup_object();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 273;
	            this.mockup_structure();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 274;
	            this.mockup_module();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 275;
	            this.mockup_diia();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mockup_object() {
	    let localctx = new Mockup_objectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, DiiaParser.RULE_mockup_object);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 278;
	        this.match(DiiaParser.MOCKUP);
	        this.state = 279;
	        localctx.mo_name = this.identifier();
	        this.state = 291;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	        case 99:
	            this.state = 280;
	            localctx.mo_type = this.type_value(0);
	            break;
	        case 55:
	            this.state = 281;
	            this.nl();
	            this.state = 282;
	            this.nls();
	            this.state = 286;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
	            if(la_===1) {
	                this.state = 283;
	                localctx.mo_elements = this.mockup_body();
	                this.state = 284;
	                this.nl();

	            }
	            this.state = 288;
	            this.nls();
	            this.state = 289;
	            this.match(DiiaParser.END);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mockup_structure() {
	    let localctx = new Mockup_structureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, DiiaParser.RULE_mockup_structure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 293;
	        this.match(DiiaParser.MOCKUP);
	        this.state = 294;
	        this.match(DiiaParser.STRUCTURE);
	        this.state = 295;
	        localctx.ms_name = this.identifier();
	        this.state = 296;
	        this.nl();
	        this.state = 297;
	        this.nls();
	        this.state = 301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        if(la_===1) {
	            this.state = 298;
	            localctx.ms_elements = this.mockup_body();
	            this.state = 299;
	            this.nl();

	        }
	        this.state = 303;
	        this.nls();
	        this.state = 304;
	        this.match(DiiaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mockup_module() {
	    let localctx = new Mockup_moduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, DiiaParser.RULE_mockup_module);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 306;
	        this.match(DiiaParser.MOCKUP);
	        this.state = 307;
	        this.match(DiiaParser.MODULE);
	        this.state = 308;
	        localctx.mm_name = this.identifier();
	        this.state = 309;
	        this.nl();
	        this.state = 310;
	        this.nls();
	        this.state = 314;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        if(la_===1) {
	            this.state = 311;
	            localctx.mm_elements = this.mockup_body();
	            this.state = 312;
	            this.nl();

	        }
	        this.state = 316;
	        this.nls();
	        this.state = 317;
	        this.match(DiiaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mockup_diia() {
	    let localctx = new Mockup_diiaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, DiiaParser.RULE_mockup_diia);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this.match(DiiaParser.MOCKUP);
	        this.state = 321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21) {
	            this.state = 320;
	            localctx.md_async = this.match(DiiaParser.ASYNC);
	        }

	        this.state = 323;
	        this.match(DiiaParser.DIIA);
	        this.state = 324;
	        localctx.md_name = this.identifier();
	        this.state = 325;
	        this.match(DiiaParser.OPEN_PAREN);

	        this.state = 326;
	        this.nls();
	        this.state = 328;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & 641) !== 0) || _la===99) {
	            this.state = 327;
	            localctx.md_params = this.params();
	        }

	        this.state = 330;
	        this.nls();
	        this.state = 332;
	        this.match(DiiaParser.CLOSE_PAREN);
	        this.state = 334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60 || _la===99) {
	            this.state = 333;
	            localctx.md_type = this.type_value(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mockup_body() {
	    let localctx = new Mockup_bodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, DiiaParser.RULE_mockup_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 336;
	        this.mockup_body_element();
	        this.state = 342;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,22,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 337;
	                this.nl();
	                this.state = 338;
	                this.mockup_body_element(); 
	            }
	            this.state = 344;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,22,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mockup_body_element() {
	    let localctx = new Mockup_body_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, DiiaParser.RULE_mockup_body_element);
	    try {
	        this.state = 348;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 345;
	            this.structure_param();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 346;
	            this.method_declaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 347;
	            this.nls();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	diia() {
	    let localctx = new DiiaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, DiiaParser.RULE_diia);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 351;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===21) {
	            this.state = 350;
	            localctx.d_async = this.match(DiiaParser.ASYNC);
	        }

	        this.state = 353;
	        this.match(DiiaParser.DIIA);
	        this.state = 357;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        if(la_===1) {
	            this.state = 354;
	            localctx.d_structure = this.identifier();
	            this.state = 355;
	            this.match(DiiaParser.DOT);

	        }
	        this.state = 359;
	        localctx.d_name = this.identifier();
	        this.state = 360;
	        this.match(DiiaParser.OPEN_PAREN);

	        this.state = 361;
	        this.nls();
	        this.state = 363;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & 641) !== 0) || _la===99) {
	            this.state = 362;
	            localctx.d_params = this.params();
	        }

	        this.state = 365;
	        this.nls();
	        this.state = 367;
	        this.match(DiiaParser.CLOSE_PAREN);
	        this.state = 369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60 || _la===99) {
	            this.state = 368;
	            localctx.d_type = this.type_value(0);
	        }

	        this.state = 371;
	        this.nl();
	        this.state = 375;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        if(la_===1) {
	            this.state = 372;
	            localctx.d_body = this.body();
	            this.state = 373;
	            this.nl();

	        }
	        this.state = 377;
	        this.nls();
	        this.state = 378;
	        this.match(DiiaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_() {
	    let localctx = new IfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, DiiaParser.RULE_if);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 380;
	        this.match(DiiaParser.IF);
	        this.state = 381;
	        localctx.i_value = this.expr();
	        this.state = 382;
	        this.nl();
	        this.state = 386;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & 846206996) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & 2248146991) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & 6303745) !== 0)) {
	            this.state = 383;
	            localctx.i_body = this.body();
	            this.state = 384;
	            this.nl();
	        }

	        this.state = 397;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===27) {
	                this.state = 388;
	                this.match(DiiaParser.ELSE);
	                this.state = 389;
	                localctx.i_else_body = this.body();
	                this.state = 390;
	                this.nl();
	            }

	            this.state = 394;
	            this.match(DiiaParser.END);
	            break;

	        case 2:
	            this.state = 395;
	            this.match(DiiaParser.ELSE);
	            this.state = 396;
	            localctx.i_else_if = this.if_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	each() {
	    let localctx = new EachContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, DiiaParser.RULE_each);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        this.match(DiiaParser.FOR);
	        this.state = 402;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 400;
	            localctx.e_iterator = this.expr();
	            break;

	        case 2:
	            this.state = 401;
	            localctx.e_fromto = this.fromto();
	            break;

	        }
	        this.state = 404;
	        this.match(DiiaParser.AS);
	        this.state = 408;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	        if(la_===1) {
	            this.state = 405;
	            localctx.e_key_name = this.identifier();
	            this.state = 406;
	            this.match(DiiaParser.COMMA);

	        }
	        this.state = 411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===99) {
	            this.state = 410;
	            localctx.e_name = this.identifier();
	        }

	        this.state = 413;
	        this.nl();
	        this.state = 417;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & 846206996) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & 2248146991) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & 6303745) !== 0)) {
	            this.state = 414;
	            localctx.e_body = this.body();
	            this.state = 415;
	            this.nl();
	        }

	        this.state = 419;
	        this.match(DiiaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromto() {
	    let localctx = new FromtoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, DiiaParser.RULE_fromto);
	    try {
	        this.state = 423;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 421;
	            this.fromto_simple();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 422;
	            this.fromto_complex();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromto_simple() {
	    let localctx = new Fromto_simpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, DiiaParser.RULE_fromto_simple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        localctx.fs_from = this.fromto_value();
	        this.state = 426;
	        this.match(DiiaParser.FROMTO);
	        this.state = 428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & 2016) !== 0)) {
	            this.state = 427;
	            localctx.fs_to_symbol = this.fromto_to_symbol();
	        }

	        this.state = 430;
	        localctx.fs_to = this.fromto_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromto_complex() {
	    let localctx = new Fromto_complexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, DiiaParser.RULE_fromto_complex);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        localctx.fc_from = this.fromto_value();
	        this.state = 433;
	        this.match(DiiaParser.FROMTO);
	        this.state = 435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & 1807) !== 0)) {
	            this.state = 434;
	            localctx.fc_middle_symbol = this.fromto_middle_symbol();
	        }

	        this.state = 437;
	        localctx.fc_middle = this.fromto_value();
	        this.state = 438;
	        this.match(DiiaParser.FROMTO);
	        this.state = 440;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & 2016) !== 0)) {
	            this.state = 439;
	            localctx.fc_to_symbol = this.fromto_to_symbol();
	        }

	        this.state = 442;
	        localctx.fc_to = this.fromto_value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromto_value() {
	    let localctx = new Fromto_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, DiiaParser.RULE_fromto_value);
	    try {
	        this.state = 451;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            localctx = new Fromto_numberContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 444;
	            this.match(DiiaParser.NUMBER);
	            break;
	        case 109:
	            localctx = new Fromto_stringContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 445;
	            this.match(DiiaParser.STRING);
	            break;
	        case 99:
	            localctx = new Fromto_idContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 446;
	            this.identifier();
	            break;
	        case 58:
	            localctx = new Fromto_nestedContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 447;
	            this.match(DiiaParser.OPEN_PAREN);
	            this.state = 448;
	            localctx.fn_value = this.value(0);
	            this.state = 449;
	            this.match(DiiaParser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromto_middle_symbol() {
	    let localctx = new Fromto_middle_symbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, DiiaParser.RULE_fromto_middle_symbol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 453;
	        _la = this._input.LA(1);
	        if(!(((((_la - 80)) & ~0x1f) == 0 && ((1 << (_la - 80)) & 1807) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromto_to_symbol() {
	    let localctx = new Fromto_to_symbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, DiiaParser.RULE_fromto_to_symbol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 2016) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_() {
	    let localctx = new WhileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, DiiaParser.RULE_while);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.match(DiiaParser.WHILE);
	        this.state = 458;
	        localctx.w_value = this.expr();
	        this.state = 459;
	        this.nl();
	        this.state = 463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & 846206996) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & 2248146991) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & 6303745) !== 0)) {
	            this.state = 460;
	            localctx.w_body = this.body();
	            this.state = 461;
	            this.nl();
	        }

	        this.state = 465;
	        this.match(DiiaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eval() {
	    let localctx = new EvalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, DiiaParser.RULE_eval);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 467;
	        this.match(DiiaParser.EVAL);
	        this.state = 468;
	        localctx.e_value = this.value(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	try_() {
	    let localctx = new TryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, DiiaParser.RULE_try);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 470;
	        this.match(DiiaParser.TRY);
	        this.state = 471;
	        this.nl();
	        this.state = 472;
	        localctx.t_body = this.body();
	        this.state = 473;
	        this.nl();
	        this.state = 474;
	        this.match(DiiaParser.CATCH);
	        this.state = 476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        if(la_===1) {
	            this.state = 475;
	            localctx.tc_name = this.identifier();

	        }
	        this.state = 481;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & 846206996) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & 2248146991) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & 6303745) !== 0)) {
	            this.state = 478;
	            localctx.tc_body = this.body();
	            this.state = 479;
	            this.nl();
	        }

	        this.state = 483;
	        this.match(DiiaParser.END);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	take() {
	    let localctx = new TakeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, DiiaParser.RULE_take);
	    var _la = 0; // Token type
	    try {
	        this.state = 507;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Take_moduleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 485;
	            this.match(DiiaParser.TAKE);
	            this.state = 487;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===85) {
	                this.state = 486;
	                localctx.tm_relative = this.match(DiiaParser.DOT);
	            }

	            this.state = 489;
	            localctx.tm_elements_chain = this.identifiers_chain(0);
	            this.state = 491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===41) {
	                this.state = 490;
	                localctx.tm_star = this.match(DiiaParser.STAR_ALL);
	            }

	            this.state = 495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 493;
	                this.match(DiiaParser.AS);
	                this.state = 494;
	                localctx.tm_as = this.identifier();
	            }

	            break;

	        case 2:
	            localctx = new Take_fileContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 497;
	            this.match(DiiaParser.TAKE_FILE);
	            this.state = 498;
	            localctx.tf_name = this.match(DiiaParser.STRING);
	            this.state = 499;
	            this.match(DiiaParser.AS);
	            this.state = 500;
	            localctx.tf_as = this.identifier();
	            break;

	        case 3:
	            localctx = new Take_remoteContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 501;
	            this.match(DiiaParser.TAKE);
	            this.state = 502;
	            localctx.tr_url = this.match(DiiaParser.STRING);
	            this.state = 505;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 503;
	                this.match(DiiaParser.AS);
	                this.state = 504;
	                localctx.tr_as = this.identifier();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	give() {
	    let localctx = new GiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, DiiaParser.RULE_give);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 509;
	        this.match(DiiaParser.GIVE);
	        this.state = 510;
	        this.give_element();
	        this.state = 515;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62) {
	            this.state = 511;
	            this.match(DiiaParser.COMMA);
	            this.state = 512;
	            this.give_element();
	            this.state = 517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	give_element() {
	    let localctx = new Give_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, DiiaParser.RULE_give_element);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 518;
	        localctx.ge_name = this.identifier();
	        this.state = 521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17) {
	            this.state = 519;
	            this.match(DiiaParser.AS);
	            this.state = 520;
	            localctx.ge_as = this.identifier();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, DiiaParser.RULE_string);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 523;
	        _la = this._input.LA(1);
	        if(!(_la===108 || _la===109)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	value(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 68;
	    this.enterRecursionRule(localctx, 68, DiiaParser.RULE_value, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NumberContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 526;
	            this.match(DiiaParser.NUMBER);
	            break;

	        case 2:
	            localctx = new String_valueContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 527;
	            this.string();
	            break;

	        case 3:
	            localctx = new IdContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 528;
	            this.identifier();
	            break;

	        case 4:
	            localctx = new PositiveContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 529;
	            this.match(DiiaParser.PLUS);
	            this.state = 530;
	            localctx.p_value = this.value(21);
	            break;

	        case 5:
	            localctx = new NegativeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 531;
	            this.match(DiiaParser.MINUS);
	            this.state = 532;
	            localctx.n_value = this.value(20);
	            break;

	        case 6:
	            localctx = new Pre_decrementContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 533;
	            this.match(DiiaParser.DECREMENT);
	            this.state = 534;
	            localctx.pd_value = this.value(19);
	            break;

	        case 7:
	            localctx = new Pre_incrementContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 535;
	            this.match(DiiaParser.INCREMENT);
	            this.state = 536;
	            localctx.pi_value = this.value(18);
	            break;

	        case 8:
	            localctx = new NotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 537;
	            this.match(DiiaParser.NOT);
	            this.state = 538;
	            localctx.n_value = this.value(15);
	            break;

	        case 9:
	            localctx = new Bitwise_notContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 539;
	            this.match(DiiaParser.TILDA);
	            this.state = 540;
	            localctx.bn_value = this.value(14);
	            break;

	        case 10:
	            localctx = new NestedContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 541;
	            this.match(DiiaParser.OPEN_PAREN);
	            this.state = 542;
	            localctx.n_value = this.expr();
	            this.state = 543;
	            this.match(DiiaParser.CLOSE_PAREN);
	            break;

	        case 11:
	            localctx = new Call_exprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 545;
	            this.match(DiiaParser.OPEN_PAREN);
	            this.state = 546;
	            localctx.c_value = this.expr();
	            this.state = 547;
	            this.match(DiiaParser.CLOSE_PAREN);
	            this.state = 548;
	            this.match(DiiaParser.OPEN_PAREN);
	            this.state = 551;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	            if(la_===1) {
	                this.state = 549;
	                localctx.c_args = this.args();

	            } else if(la_===2) {
	                this.state = 550;
	                localctx.c_named_args = this.named_args();

	            }
	            this.state = 553;
	            this.match(DiiaParser.CLOSE_PAREN);
	            break;

	        case 12:
	            localctx = new ArrayContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 555;
	            this.match(DiiaParser.OPEN_ARRAY);
	            this.state = 557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & 2101252) !== 0) || ((((_la - 55)) & ~0x1f) == 0 && ((1 << (_la - 55)) & 2248146991) !== 0) || ((((_la - 87)) & ~0x1f) == 0 && ((1 << (_la - 87)) & 6303745) !== 0)) {
	                this.state = 556;
	                localctx.a_elements = this.array_elements();
	            }

	            this.state = 559;
	            this.match(DiiaParser.CLOSE_ARRAY);
	            break;

	        case 13:
	            localctx = new DictionaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 560;
	            this.match(DiiaParser.OPEN_PAREN);
	            this.state = 562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===55 || _la===99 || _la===109) {
	                this.state = 561;
	                localctx.d_args = this.dictionary_args();
	            }

	            this.state = 564;
	            this.match(DiiaParser.CLOSE_PAREN);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 631;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 629;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AsContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.a_left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 567;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 568;
	                    this.match(DiiaParser.AS);
	                    this.state = 569;
	                    localctx.a_right = this.value(11);
	                    break;

	                case 2:
	                    localctx = new Arithmetic_mulContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.a_left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 570;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 571;
	                    localctx.a_operation = this.arithmetic_op_mul();
	                    this.state = 572;
	                    localctx.a_right = this.value(10);
	                    break;

	                case 3:
	                    localctx = new Arithmetic_addContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.a_left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 574;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 575;
	                    localctx.a_operation = this.arithmetic_op_add();
	                    this.state = 576;
	                    localctx.a_right = this.value(9);
	                    break;

	                case 4:
	                    localctx = new BitwiseContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.b_left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 578;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 579;
	                    localctx.b_operation = this.bitwise_op();
	                    this.state = 580;
	                    localctx.b_right = this.value(8);
	                    break;

	                case 5:
	                    localctx = new ComparisonContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.c_left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 582;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 583;
	                    localctx.c_operation = this.comparison_op();
	                    this.state = 584;
	                    localctx.c_right = this.value(7);
	                    break;

	                case 6:
	                    localctx = new TestContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.t_left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 586;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 587;
	                    localctx.t_operation = this.test_op();
	                    this.state = 588;
	                    localctx.t_right = this.value(6);
	                    break;

	                case 7:
	                    localctx = new ChainContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.c_left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 590;
	                    if (!( this.precpred(this._ctx, 23))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 23)");
	                    }
	                    this.state = 591;
	                    this.nls();
	                    this.state = 592;
	                    this.match(DiiaParser.DOT);
	                    this.state = 593;
	                    this.nls();
	                    this.state = 594;
	                    localctx.c_right = this.extended_identifier();
	                    break;

	                case 8:
	                    localctx = new CallContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.c_value = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 596;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 597;
	                    this.match(DiiaParser.OPEN_PAREN);
	                    this.state = 600;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	                    if(la_===1) {
	                        this.state = 598;
	                        localctx.c_args = this.args();

	                    } else if(la_===2) {
	                        this.state = 599;
	                        localctx.c_named_args = this.named_args();

	                    }
	                    this.state = 602;
	                    this.match(DiiaParser.CLOSE_PAREN);
	                    break;

	                case 9:
	                    localctx = new Post_decrementContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.pd_value = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 603;
	                    if (!( this.precpred(this._ctx, 17))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 17)");
	                    }
	                    this.state = 604;
	                    this.match(DiiaParser.DECREMENT);
	                    break;

	                case 10:
	                    localctx = new Post_incrementContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.pi_value = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 605;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 606;
	                    this.match(DiiaParser.INCREMENT);
	                    break;

	                case 11:
	                    localctx = new Get_elementContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.a_left = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 607;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 608;
	                    this.match(DiiaParser.OPEN_ARRAY);
	                    this.state = 609;
	                    localctx.a_element = this.expr();
	                    this.state = 610;
	                    this.match(DiiaParser.CLOSE_ARRAY);
	                    break;

	                case 12:
	                    localctx = new TernaryContext(this, new ValueContext(this, _parentctx, _parentState));
	                    localctx.t_value = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 612;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 613;
	                    this.nls();
	                    this.state = 614;
	                    this.match(DiiaParser.TERNARY);
	                    this.state = 615;
	                    this.nls();
	                    this.state = 616;
	                    localctx.t_positive = this.expr();
	                    this.state = 617;
	                    this.nls();
	                    this.state = 618;
	                    this.match(DiiaParser.COLON);
	                    this.state = 619;
	                    this.nls();
	                    this.state = 620;
	                    localctx.t_negative = this.expr();
	                    break;

	                case 13:
	                    localctx = new GodContext(this, new ValueContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_value);
	                    this.state = 622;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 625; 
	                    this._errHandler.sync(this);
	                    var _alt = 1;
	                    do {
	                    	switch (_alt) {
	                    	case 1:
	                    		this.state = 623;
	                    		this.match(DiiaParser.TA);
	                    		this.state = 624;
	                    		this.value(0);
	                    		break;
	                    	default:
	                    		throw new antlr4.error.NoViableAltException(this);
	                    	}
	                    	this.state = 627; 
	                    	this._errHandler.sync(this);
	                    	_alt = this._interp.adaptivePredict(this._input,56, this._ctx);
	                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	                    break;

	                } 
	            }
	            this.state = 633;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	array_elements() {
	    let localctx = new Array_elementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, DiiaParser.RULE_array_elements);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 634;
	        this.nls();
	        this.state = 635;
	        this.array_element();
	        this.state = 636;
	        this.nls();
	        this.state = 645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===55 || _la===62) {
	            this.state = 637;
	            this.nls();
	            this.state = 638;
	            this.match(DiiaParser.COMMA);
	            this.state = 639;
	            this.nls();
	            this.state = 640;
	            this.array_element();
	            this.state = 641;
	            this.nls();
	            this.state = 647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_element() {
	    let localctx = new Array_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, DiiaParser.RULE_array_element);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        localctx.ae_value = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionary_args() {
	    let localctx = new Dictionary_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, DiiaParser.RULE_dictionary_args);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 650;
	        this.dictionary_arg();
	        this.state = 655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62) {
	            this.state = 651;
	            this.match(DiiaParser.COMMA);
	            this.state = 652;
	            this.dictionary_arg();
	            this.state = 657;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionary_arg() {
	    let localctx = new Dictionary_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, DiiaParser.RULE_dictionary_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.nls();
	        this.state = 661;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 99:
	            this.state = 659;
	            localctx.da_name_id = this.identifier();
	            break;
	        case 109:
	            this.state = 660;
	            localctx.da_name_string = this.match(DiiaParser.STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 663;
	        this.match(DiiaParser.ASSIGN);
	        this.state = 664;
	        localctx.da_value = this.expr();
	        this.state = 665;
	        this.nls();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr() {
	    let localctx = new ExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, DiiaParser.RULE_expr);
	    var _la = 0; // Token type
	    try {
	        this.state = 707;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 667;
	            this.value(0);
	            break;

	        case 2:
	            localctx = new WaitContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 668;
	            this.match(DiiaParser.WAIT);
	            this.state = 669;
	            localctx.w_value = this.value(0);
	            break;

	        case 3:
	            localctx = new FunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 670;
	                localctx.f_async = this.match(DiiaParser.ASYNC);
	            }

	            this.state = 673;
	            this.match(DiiaParser.OPEN_PAREN);
	            this.state = 675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & 641) !== 0) || _la===99) {
	                this.state = 674;
	                localctx.f_params = this.params();
	            }

	            this.state = 677;
	            this.match(DiiaParser.CLOSE_PAREN);
	            this.state = 679;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===60 || _la===99) {
	                this.state = 678;
	                localctx.f_type = this.type_value(0);
	            }

	            this.state = 681;
	            this.match(DiiaParser.COLON);
	            this.state = 682;
	            localctx.f_body = this.expr();
	            break;

	        case 4:
	            localctx = new Anonymous_diiaContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 683;
	                localctx.d_async = this.match(DiiaParser.ASYNC);
	            }

	            this.state = 686;
	            this.match(DiiaParser.DIIA);
	            this.state = 687;
	            this.match(DiiaParser.OPEN_PAREN);

	            this.state = 688;
	            this.nls();
	            this.state = 690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 51)) & ~0x1f) == 0 && ((1 << (_la - 51)) & 641) !== 0) || _la===99) {
	                this.state = 689;
	                localctx.d_params = this.params();
	            }

	            this.state = 692;
	            this.nls();
	            this.state = 694;
	            this.match(DiiaParser.CLOSE_PAREN);
	            this.state = 696;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===60 || _la===99) {
	                this.state = 695;
	                localctx.d_type = this.type_value(0);
	            }

	            this.state = 698;
	            this.nl();
	            this.state = 702;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            if(la_===1) {
	                this.state = 699;
	                localctx.d_body = this.body();
	                this.state = 700;
	                this.nl();

	            }
	            this.state = 704;
	            this.nls();
	            this.state = 705;
	            this.match(DiiaParser.END);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throw_() {
	    let localctx = new ThrowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, DiiaParser.RULE_throw);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this.match(DiiaParser.THROW);
	        this.state = 710;
	        localctx.t_value = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_destruction() {
	    let localctx = new Array_destructionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, DiiaParser.RULE_array_destruction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 712;
	        this.match(DiiaParser.OPEN_ARRAY);
	        this.state = 713;
	        this.nls();
	        this.state = 714;
	        this.array_destruction_el();
	        this.state = 715;
	        this.nls();
	        this.state = 724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===55 || _la===62) {
	            this.state = 716;
	            this.nls();
	            this.state = 717;
	            this.match(DiiaParser.COMMA);
	            this.state = 718;
	            this.nls();
	            this.state = 719;
	            this.array_destruction_el();
	            this.state = 720;
	            this.nls();
	            this.state = 726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 727;
	        this.match(DiiaParser.CLOSE_ARRAY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	array_destruction_el() {
	    let localctx = new Array_destruction_elContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, DiiaParser.RULE_array_destruction_el);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        localctx.ade_id = this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_destruction() {
	    let localctx = new Object_destructionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, DiiaParser.RULE_object_destruction);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 731;
	        this.match(DiiaParser.OPEN_PAREN);
	        this.state = 732;
	        this.object_destruction_el();
	        this.state = 737;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62) {
	            this.state = 733;
	            this.match(DiiaParser.COMMA);
	            this.state = 734;
	            this.object_destruction_el();
	            this.state = 739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 740;
	        this.match(DiiaParser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object_destruction_el() {
	    let localctx = new Object_destruction_elContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, DiiaParser.RULE_object_destruction_el);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 742;
	        this.nls();
	        this.state = 743;
	        localctx.ode_id = this.identifier();
	        this.state = 744;
	        this.nls();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign() {
	    let localctx = new AssignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, DiiaParser.RULE_assign);
	    try {
	        this.state = 751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 746;
	            this.assign_simple();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 747;
	            this.assign_define();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 748;
	            this.assign_complex();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 749;
	            this.assign_array_destruction();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 750;
	            this.assign_object_destruction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_simple() {
	    let localctx = new Assign_simpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, DiiaParser.RULE_assign_simple);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 754;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===22) {
	            this.state = 753;
	            localctx.as_subject = this.match(DiiaParser.SUBJECT);
	        }

	        this.state = 756;
	        localctx.as_identifier = this.identifier();
	        this.state = 758;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60 || _la===99) {
	            this.state = 757;
	            localctx.as_type = this.type_value(0);
	        }

	        this.state = 760;
	        localctx.as_symbol = this.assign_symbol();
	        this.state = 761;
	        localctx.as_value = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_define() {
	    let localctx = new Assign_defineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, DiiaParser.RULE_assign_define);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 763;
	        this.match(DiiaParser.SUBJECT);
	        this.state = 764;
	        localctx.as_identifier = this.identifier();
	        this.state = 766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60 || _la===99) {
	            this.state = 765;
	            localctx.as_type = this.type_value(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_complex() {
	    let localctx = new Assign_complexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, DiiaParser.RULE_assign_complex);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        localctx.ac_left = this.assign_complex_left(0);
	        this.state = 769;
	        localctx.ac_right = this.assign_complex_right();
	        this.state = 770;
	        localctx.ac_symbol = this.assign_symbol();
	        this.state = 771;
	        localctx.ac_value = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	assign_complex_left(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Assign_complex_leftContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 98;
	    this.enterRecursionRule(localctx, 98, DiiaParser.RULE_assign_complex_left, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 774;
	        localctx.acl_chain = this.identifiers_chain(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 783;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Assign_complex_leftContext(this, _parentctx, _parentState);
	                localctx.acl_left = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_assign_complex_left);
	                this.state = 776;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 777;
	                this.match(DiiaParser.OPEN_ARRAY);
	                this.state = 778;
	                localctx.acl_element = this.expr();
	                this.state = 779;
	                this.match(DiiaParser.CLOSE_ARRAY); 
	            }
	            this.state = 785;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	assign_complex_right() {
	    let localctx = new Assign_complex_rightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, DiiaParser.RULE_assign_complex_right);
	    try {
	        this.state = 792;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 786;
	            this.match(DiiaParser.DOT);
	            this.state = 787;
	            localctx.acr_identifier = this.identifier();
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 788;
	            this.match(DiiaParser.OPEN_ARRAY);
	            this.state = 789;
	            localctx.acr_element = this.expr();
	            this.state = 790;
	            this.match(DiiaParser.CLOSE_ARRAY);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_array_destruction() {
	    let localctx = new Assign_array_destructionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, DiiaParser.RULE_assign_array_destruction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 794;
	        localctx.aad_array_destruction = this.array_destruction();
	        this.state = 795;
	        this.match(DiiaParser.ASSIGN);
	        this.state = 796;
	        localctx.aad_value = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_object_destruction() {
	    let localctx = new Assign_object_destructionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, DiiaParser.RULE_assign_object_destruction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 798;
	        localctx.aod_object_destruction = this.object_destruction();
	        this.state = 799;
	        this.match(DiiaParser.ASSIGN);
	        this.state = 800;
	        localctx.aod_value = this.expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assign_symbol() {
	    let localctx = new Assign_symbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, DiiaParser.RULE_assign_symbol);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 802;
	        _la = this._input.LA(1);
	        if(!(((((_la - 48)) & ~0x1f) == 0 && ((1 << (_la - 48)) & 4294934529) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wait_assign() {
	    let localctx = new Wait_assignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, DiiaParser.RULE_wait_assign);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 804;
	        this.match(DiiaParser.WAIT);
	        this.state = 805;
	        localctx.wa_assign = this.assign();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, DiiaParser.RULE_identifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this.match(DiiaParser.ID);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extended_identifier() {
	    let localctx = new Extended_identifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, DiiaParser.RULE_extended_identifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 809;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 2143238174) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & 27655) !== 0) || _la===99)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	identifiers_chain(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Identifiers_chainContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 114;
	    this.enterRecursionRule(localctx, 114, DiiaParser.RULE_identifiers_chain, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 812;
	        localctx.ic_identifier = this.identifier();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 819;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,78,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Identifiers_chainContext(this, _parentctx, _parentState);
	                localctx.ic_left = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_identifiers_chain);
	                this.state = 814;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 815;
	                this.match(DiiaParser.DOT);
	                this.state = 816;
	                localctx.ic_right = this.identifiers_chain(2); 
	            }
	            this.state = 821;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,78,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	type_value(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Type_valueContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 116;
	    this.enterRecursionRule(localctx, 116, DiiaParser.RULE_type_value, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 824;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 823;
	            localctx.tv_array = this.type_value_array();
	        }

	        this.state = 826;
	        localctx.tv_single = this.identifiers_chain(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 834;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Type_valueContext(this, _parentctx, _parentState);
	                localctx.tv_left = _prevctx;
	                this.pushNewRecursionContext(localctx, _startState, DiiaParser.RULE_type_value);
	                this.state = 828;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 829;
	                localctx.tv_operation = this.test_op();
	                this.state = 830;
	                localctx.tv_right = this.type_value(2); 
	            }
	            this.state = 836;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	type_value_array() {
	    let localctx = new Type_value_arrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, DiiaParser.RULE_type_value_array);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this.match(DiiaParser.OPEN_ARRAY);
	        this.state = 838;
	        this.match(DiiaParser.CLOSE_ARRAY);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	args() {
	    let localctx = new ArgsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, DiiaParser.RULE_args);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        this.arg();
	        this.state = 845;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62) {
	            this.state = 841;
	            this.match(DiiaParser.COMMA);
	            this.state = 842;
	            this.arg();
	            this.state = 847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arg() {
	    let localctx = new ArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, DiiaParser.RULE_arg);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        this.nls();
	        this.state = 850;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===51) {
	            this.state = 849;
	            localctx.a_spread = this.match(DiiaParser.SPREAD);
	        }

	        this.state = 852;
	        localctx.a_value = this.expr();
	        this.state = 853;
	        this.nls();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_args() {
	    let localctx = new Named_argsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, DiiaParser.RULE_named_args);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        this.named_arg();
	        this.state = 860;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62) {
	            this.state = 856;
	            this.match(DiiaParser.COMMA);
	            this.state = 857;
	            this.named_arg();
	            this.state = 862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	named_arg() {
	    let localctx = new Named_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, DiiaParser.RULE_named_arg);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        this.nls();
	        this.state = 864;
	        localctx.na_name = this.identifier();
	        this.state = 865;
	        this.match(DiiaParser.ASSIGN);
	        this.state = 866;
	        localctx.na_value = this.expr();
	        this.state = 867;
	        this.nls();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	params() {
	    let localctx = new ParamsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, DiiaParser.RULE_params);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 869;
	        this.param();
	        this.state = 877;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,84,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 870;
	                this.nls();
	                this.state = 871;
	                this.match(DiiaParser.COMMA);
	                this.state = 872;
	                this.nls();
	                this.state = 873;
	                this.param(); 
	            }
	            this.state = 879;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,84,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param() {
	    let localctx = new ParamContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, DiiaParser.RULE_param);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 886;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 51:
	        case 99:
	            this.state = 881;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===51) {
	                this.state = 880;
	                localctx.p_spread = this.match(DiiaParser.SPREAD);
	            }

	            this.state = 883;
	            localctx.p_name = this.identifier();
	            break;
	        case 60:
	            this.state = 884;
	            localctx.p_array_destruction = this.array_destruction();
	            break;
	        case 58:
	            this.state = 885;
	            localctx.p_object_destruction = this.object_destruction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 889;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60 || _la===99) {
	            this.state = 888;
	            localctx.p_type = this.type_value(0);
	        }

	        this.state = 893;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63) {
	            this.state = 891;
	            this.match(DiiaParser.ASSIGN);
	            this.state = 892;
	            localctx.p_value = this.param_value();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	param_value() {
	    let localctx = new Param_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, DiiaParser.RULE_param_value);
	    var _la = 0; // Token type
	    try {
	        this.state = 900;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 100:
	            localctx = new Param_value_numberContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 895;
	            this.match(DiiaParser.NUMBER);
	            break;
	        case 108:
	        case 109:
	            localctx = new Param_value_stringContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 896;
	            _la = this._input.LA(1);
	            if(!(_la===108 || _la===109)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 99:
	            localctx = new Param_value_identifierContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 897;
	            this.identifier();
	            break;
	        case 58:
	            localctx = new Param_value_empty_dictionaryContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 898;
	            this.match(DiiaParser.OPEN_PAREN);
	            this.state = 899;
	            this.match(DiiaParser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	body() {
	    let localctx = new BodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, DiiaParser.RULE_body);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 902;
	        this.body_element_or_return();
	        this.state = 908;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 903;
	                this.nl();
	                this.state = 904;
	                this.body_element_or_return(); 
	            }
	            this.state = 910;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	body_element_or_return() {
	    let localctx = new Body_element_or_returnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, DiiaParser.RULE_body_element_or_return);
	    try {
	        this.state = 913;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 4:
	        case 11:
	        case 12:
	        case 21:
	        case 22:
	        case 25:
	        case 28:
	        case 29:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 60:
	        case 80:
	        case 81:
	        case 86:
	        case 87:
	        case 99:
	        case 100:
	        case 108:
	        case 109:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 911;
	            this.body_element();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 912;
	            this.return_body_line();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	body_element() {
	    let localctx = new Body_elementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, DiiaParser.RULE_body_element);
	    try {
	        this.state = 924;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 915;
	            this.if_();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 916;
	            this.each();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 917;
	            this.while_();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 918;
	            this.try_();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 919;
	            this.expr();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 920;
	            this.throw_();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 921;
	            this.wait_assign();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 922;
	            this.assign();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 923;
	            this.nls();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_body_line() {
	    let localctx = new Return_body_lineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, DiiaParser.RULE_return_body_line);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 926;
	        this.match(DiiaParser.RETURN);
	        this.state = 927;
	        localctx.rbl = this.body_element();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_op_mul() {
	    let localctx = new Arithmetic_op_mulContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, DiiaParser.RULE_arithmetic_op_mul);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 929;
	        _la = this._input.LA(1);
	        if(!(((((_la - 82)) & ~0x1f) == 0 && ((1 << (_la - 82)) & 451) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arithmetic_op_add() {
	    let localctx = new Arithmetic_op_addContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, DiiaParser.RULE_arithmetic_op_add);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 931;
	        _la = this._input.LA(1);
	        if(!(_la===80 || _la===81)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bitwise_op() {
	    let localctx = new Bitwise_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, DiiaParser.RULE_bitwise_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        _la = this._input.LA(1);
	        if(!(((((_la - 91)) & ~0x1f) == 0 && ((1 << (_la - 91)) & 121) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test_op() {
	    let localctx = new Test_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, DiiaParser.RULE_test_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 935;
	        _la = this._input.LA(1);
	        if(!(_la===23 || _la===24 || _la===92 || _la===93)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparison_op() {
	    let localctx = new Comparison_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, DiiaParser.RULE_comparison_op);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 937;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & 526304) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & 511) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nl() {
	    let localctx = new NlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, DiiaParser.RULE_nl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 939;
	        this.match(DiiaParser.NL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nls() {
	    let localctx = new NlsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, DiiaParser.RULE_nls);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 944;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,93,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 941;
	                this.nl(); 
	            }
	            this.state = 946;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,93,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

DiiaParser.EOF = antlr4.Token.EOF;
DiiaParser.END = 1;
DiiaParser.DIIA = 2;
DiiaParser.STRUCTURE = 3;
DiiaParser.FOR = 4;
DiiaParser.EQ = 5;
DiiaParser.NOT_EQ = 6;
DiiaParser.GREATER_EQ = 7;
DiiaParser.SMALLER_EQ = 8;
DiiaParser.GREATER = 9;
DiiaParser.SMALLER = 10;
DiiaParser.IF = 11;
DiiaParser.WAIT = 12;
DiiaParser.TAKE = 13;
DiiaParser.TAKE_PAK = 14;
DiiaParser.TAKE_FILE = 15;
DiiaParser.GIVE = 16;
DiiaParser.AS = 17;
DiiaParser.TA = 18;
DiiaParser.IS = 19;
DiiaParser.RETURN = 20;
DiiaParser.ASYNC = 21;
DiiaParser.SUBJECT = 22;
DiiaParser.AND = 23;
DiiaParser.OR = 24;
DiiaParser.TRY = 25;
DiiaParser.CATCH = 26;
DiiaParser.ELSE = 27;
DiiaParser.THROW = 28;
DiiaParser.WHILE = 29;
DiiaParser.MODULE = 30;
DiiaParser.TERNARY = 31;
DiiaParser.EQ_WORD = 32;
DiiaParser.GR_WORD = 33;
DiiaParser.SM_WORD = 34;
DiiaParser.NOT_GR_WORD = 35;
DiiaParser.NOT_SM_WORD = 36;
DiiaParser.NOT_EQ_WORD = 37;
DiiaParser.NOT_IS_WORD = 38;
DiiaParser.HAS_IS_WORD = 39;
DiiaParser.NOT_HAS_IS_WORD = 40;
DiiaParser.STAR_ALL = 41;
DiiaParser.MOCKUP = 42;
DiiaParser.IMPLEMENTS = 43;
DiiaParser.IMPLEMENT = 44;
DiiaParser.EVAL = 45;
DiiaParser.WHEN = 46;
DiiaParser.ALSO = 47;
DiiaParser.TSE = 48;
DiiaParser.TEST = 49;
DiiaParser.IY = 50;
DiiaParser.SPREAD = 51;
DiiaParser.FROMTO = 52;
DiiaParser.FARROW = 53;
DiiaParser.SKIP_SPACES = 54;
DiiaParser.NL = 55;
DiiaParser.DECREMENT = 56;
DiiaParser.INCREMENT = 57;
DiiaParser.OPEN_PAREN = 58;
DiiaParser.CLOSE_PAREN = 59;
DiiaParser.OPEN_ARRAY = 60;
DiiaParser.CLOSE_ARRAY = 61;
DiiaParser.COMMA = 62;
DiiaParser.ASSIGN = 63;
DiiaParser.ASSIGN_PARENT = 64;
DiiaParser.ASSIGN_ADD = 65;
DiiaParser.ASSIGN_SUB = 66;
DiiaParser.ASSIGN_MUL = 67;
DiiaParser.ASSIGN_DIV = 68;
DiiaParser.ASSIGN_DIVDIV = 69;
DiiaParser.ASSIGN_MOD = 70;
DiiaParser.ASSIGN_BW_OR = 71;
DiiaParser.ASSIGN_BW_AND = 72;
DiiaParser.ASSIGN_BW_SHIFT_LEFT = 73;
DiiaParser.ASSIGN_BW_SHIFT_RIGHT = 74;
DiiaParser.ASSIGN_XOR = 75;
DiiaParser.ASSIGN_POW = 76;
DiiaParser.ASSIGN_OR = 77;
DiiaParser.ASSIGN_AND = 78;
DiiaParser.ASSIGN_IF = 79;
DiiaParser.PLUS = 80;
DiiaParser.MINUS = 81;
DiiaParser.MUL = 82;
DiiaParser.DIV = 83;
DiiaParser.COLON = 84;
DiiaParser.DOT = 85;
DiiaParser.NOT = 86;
DiiaParser.TILDA = 87;
DiiaParser.PERCENT = 88;
DiiaParser.DIVDIV = 89;
DiiaParser.POW = 90;
DiiaParser.XOR = 91;
DiiaParser.OR_SYM = 92;
DiiaParser.AND_SYM = 93;
DiiaParser.OR_BW = 94;
DiiaParser.AND_BW = 95;
DiiaParser.BW_SHIFT_LEFT = 96;
DiiaParser.BW_SHIFT_RIGHT = 97;
DiiaParser.HEX_START = 98;
DiiaParser.ID = 99;
DiiaParser.NUMBER = 100;
DiiaParser.INTEGER = 101;
DiiaParser.FLOAT = 102;
DiiaParser.HEX = 103;
DiiaParser.HEXUKR = 104;
DiiaParser.BINNUM = 105;
DiiaParser.BINNUMUKR = 106;
DiiaParser.TRIPPLE_QUOTE = 107;
DiiaParser.STRING_MULTILINE = 108;
DiiaParser.STRING = 109;
DiiaParser.COMMENT = 110;
DiiaParser.LINE_COMMENT = 111;
DiiaParser.OLD_COMMENT = 112;

DiiaParser.RULE_file = 0;
DiiaParser.RULE_program = 1;
DiiaParser.RULE_program_element = 2;
DiiaParser.RULE_module = 3;
DiiaParser.RULE_module_body = 4;
DiiaParser.RULE_module_body_element = 5;
DiiaParser.RULE_method_declaration = 6;
DiiaParser.RULE_structure = 7;
DiiaParser.RULE_structure_elements = 8;
DiiaParser.RULE_structure_element = 9;
DiiaParser.RULE_structure_param = 10;
DiiaParser.RULE_mockup = 11;
DiiaParser.RULE_mockup_object = 12;
DiiaParser.RULE_mockup_structure = 13;
DiiaParser.RULE_mockup_module = 14;
DiiaParser.RULE_mockup_diia = 15;
DiiaParser.RULE_mockup_body = 16;
DiiaParser.RULE_mockup_body_element = 17;
DiiaParser.RULE_diia = 18;
DiiaParser.RULE_if = 19;
DiiaParser.RULE_each = 20;
DiiaParser.RULE_fromto = 21;
DiiaParser.RULE_fromto_simple = 22;
DiiaParser.RULE_fromto_complex = 23;
DiiaParser.RULE_fromto_value = 24;
DiiaParser.RULE_fromto_middle_symbol = 25;
DiiaParser.RULE_fromto_to_symbol = 26;
DiiaParser.RULE_while = 27;
DiiaParser.RULE_eval = 28;
DiiaParser.RULE_try = 29;
DiiaParser.RULE_take = 30;
DiiaParser.RULE_give = 31;
DiiaParser.RULE_give_element = 32;
DiiaParser.RULE_string = 33;
DiiaParser.RULE_value = 34;
DiiaParser.RULE_array_elements = 35;
DiiaParser.RULE_array_element = 36;
DiiaParser.RULE_dictionary_args = 37;
DiiaParser.RULE_dictionary_arg = 38;
DiiaParser.RULE_expr = 39;
DiiaParser.RULE_throw = 40;
DiiaParser.RULE_array_destruction = 41;
DiiaParser.RULE_array_destruction_el = 42;
DiiaParser.RULE_object_destruction = 43;
DiiaParser.RULE_object_destruction_el = 44;
DiiaParser.RULE_assign = 45;
DiiaParser.RULE_assign_simple = 46;
DiiaParser.RULE_assign_define = 47;
DiiaParser.RULE_assign_complex = 48;
DiiaParser.RULE_assign_complex_left = 49;
DiiaParser.RULE_assign_complex_right = 50;
DiiaParser.RULE_assign_array_destruction = 51;
DiiaParser.RULE_assign_object_destruction = 52;
DiiaParser.RULE_assign_symbol = 53;
DiiaParser.RULE_wait_assign = 54;
DiiaParser.RULE_identifier = 55;
DiiaParser.RULE_extended_identifier = 56;
DiiaParser.RULE_identifiers_chain = 57;
DiiaParser.RULE_type_value = 58;
DiiaParser.RULE_type_value_array = 59;
DiiaParser.RULE_args = 60;
DiiaParser.RULE_arg = 61;
DiiaParser.RULE_named_args = 62;
DiiaParser.RULE_named_arg = 63;
DiiaParser.RULE_params = 64;
DiiaParser.RULE_param = 65;
DiiaParser.RULE_param_value = 66;
DiiaParser.RULE_body = 67;
DiiaParser.RULE_body_element_or_return = 68;
DiiaParser.RULE_body_element = 69;
DiiaParser.RULE_return_body_line = 70;
DiiaParser.RULE_arithmetic_op_mul = 71;
DiiaParser.RULE_arithmetic_op_add = 72;
DiiaParser.RULE_bitwise_op = 73;
DiiaParser.RULE_test_op = 74;
DiiaParser.RULE_comparison_op = 75;
DiiaParser.RULE_nl = 76;
DiiaParser.RULE_nls = 77;

class FileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_file;
        this.f_program = null; // ProgramContext
    }

	EOF() {
	    return this.getToken(DiiaParser.EOF, 0);
	};

	program() {
	    return this.getTypedRuleContext(ProgramContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_program;
    }

	program_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Program_elementContext);
	    } else {
	        return this.getTypedRuleContext(Program_elementContext,i);
	    }
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitProgram(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitProgram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Program_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_program_element;
    }

	module() {
	    return this.getTypedRuleContext(ModuleContext,0);
	};

	structure() {
	    return this.getTypedRuleContext(StructureContext,0);
	};

	mockup() {
	    return this.getTypedRuleContext(MockupContext,0);
	};

	diia() {
	    return this.getTypedRuleContext(DiiaContext,0);
	};

	if_() {
	    return this.getTypedRuleContext(IfContext,0);
	};

	each() {
	    return this.getTypedRuleContext(EachContext,0);
	};

	while_() {
	    return this.getTypedRuleContext(WhileContext,0);
	};

	try_() {
	    return this.getTypedRuleContext(TryContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	throw_() {
	    return this.getTypedRuleContext(ThrowContext,0);
	};

	eval() {
	    return this.getTypedRuleContext(EvalContext,0);
	};

	wait_assign() {
	    return this.getTypedRuleContext(Wait_assignContext,0);
	};

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	nls() {
	    return this.getTypedRuleContext(NlsContext,0);
	};

	take() {
	    return this.getTypedRuleContext(TakeContext,0);
	};

	give() {
	    return this.getTypedRuleContext(GiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterProgram_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitProgram_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitProgram_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ModuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_module;
        this.m_name = null; // IdentifierContext
        this.m_body = null; // Module_bodyContext
    }

	MODULE() {
	    return this.getToken(DiiaParser.MODULE, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	nls() {
	    return this.getTypedRuleContext(NlsContext,0);
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	module_body() {
	    return this.getTypedRuleContext(Module_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterModule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitModule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitModule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Module_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_module_body;
    }

	module_body_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Module_body_elementContext);
	    } else {
	        return this.getTypedRuleContext(Module_body_elementContext,i);
	    }
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterModule_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitModule_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitModule_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Module_body_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_module_body_element;
    }

	module() {
	    return this.getTypedRuleContext(ModuleContext,0);
	};

	structure() {
	    return this.getTypedRuleContext(StructureContext,0);
	};

	mockup() {
	    return this.getTypedRuleContext(MockupContext,0);
	};

	diia() {
	    return this.getTypedRuleContext(DiiaContext,0);
	};

	if_() {
	    return this.getTypedRuleContext(IfContext,0);
	};

	each() {
	    return this.getTypedRuleContext(EachContext,0);
	};

	while_() {
	    return this.getTypedRuleContext(WhileContext,0);
	};

	try_() {
	    return this.getTypedRuleContext(TryContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	throw_() {
	    return this.getTypedRuleContext(ThrowContext,0);
	};

	wait_assign() {
	    return this.getTypedRuleContext(Wait_assignContext,0);
	};

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	nls() {
	    return this.getTypedRuleContext(NlsContext,0);
	};

	give() {
	    return this.getTypedRuleContext(GiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterModule_body_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitModule_body_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitModule_body_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Method_declarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_method_declaration;
        this.md_name = null; // IdentifierContext
        this.md_params = null; // ParamsContext
        this.md_type = null; // Type_valueContext
    }

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	params() {
	    return this.getTypedRuleContext(ParamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterMethod_declaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitMethod_declaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitMethod_declaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StructureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_structure;
        this.s_name = null; // IdentifierContext
        this.s_parent = null; // Identifiers_chainContext
        this.s_elements = null; // Structure_elementsContext
    }

	STRUCTURE() {
	    return this.getToken(DiiaParser.STRUCTURE, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	nls() {
	    return this.getTypedRuleContext(NlsContext,0);
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IS() {
	    return this.getToken(DiiaParser.IS, 0);
	};

	identifiers_chain() {
	    return this.getTypedRuleContext(Identifiers_chainContext,0);
	};

	structure_elements() {
	    return this.getTypedRuleContext(Structure_elementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterStructure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitStructure(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitStructure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Structure_elementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_structure_elements;
    }

	structure_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Structure_elementContext);
	    } else {
	        return this.getTypedRuleContext(Structure_elementContext,i);
	    }
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterStructure_elements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitStructure_elements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitStructure_elements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Structure_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_structure_element;
    }

	structure_param() {
	    return this.getTypedRuleContext(Structure_paramContext,0);
	};

	nls() {
	    return this.getTypedRuleContext(NlsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterStructure_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitStructure_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitStructure_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Structure_paramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_structure_param;
        this.sp_name = null; // IdentifierContext
        this.sp_type = null; // Type_valueContext
        this.sp_value = null; // Param_valueContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(DiiaParser.ASSIGN, 0);
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	param_value() {
	    return this.getTypedRuleContext(Param_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterStructure_param(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitStructure_param(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitStructure_param(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MockupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_mockup;
    }

	mockup_object() {
	    return this.getTypedRuleContext(Mockup_objectContext,0);
	};

	mockup_structure() {
	    return this.getTypedRuleContext(Mockup_structureContext,0);
	};

	mockup_module() {
	    return this.getTypedRuleContext(Mockup_moduleContext,0);
	};

	mockup_diia() {
	    return this.getTypedRuleContext(Mockup_diiaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterMockup(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitMockup(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitMockup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Mockup_objectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_mockup_object;
        this.mo_name = null; // IdentifierContext
        this.mo_type = null; // Type_valueContext
        this.mo_elements = null; // Mockup_bodyContext
    }

	MOCKUP() {
	    return this.getToken(DiiaParser.MOCKUP, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	mockup_body() {
	    return this.getTypedRuleContext(Mockup_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterMockup_object(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitMockup_object(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitMockup_object(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Mockup_structureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_mockup_structure;
        this.ms_name = null; // IdentifierContext
        this.ms_elements = null; // Mockup_bodyContext
    }

	MOCKUP() {
	    return this.getToken(DiiaParser.MOCKUP, 0);
	};

	STRUCTURE() {
	    return this.getToken(DiiaParser.STRUCTURE, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	mockup_body() {
	    return this.getTypedRuleContext(Mockup_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterMockup_structure(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitMockup_structure(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitMockup_structure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Mockup_moduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_mockup_module;
        this.mm_name = null; // IdentifierContext
        this.mm_elements = null; // Mockup_bodyContext
    }

	MOCKUP() {
	    return this.getToken(DiiaParser.MOCKUP, 0);
	};

	MODULE() {
	    return this.getToken(DiiaParser.MODULE, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	mockup_body() {
	    return this.getTypedRuleContext(Mockup_bodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterMockup_module(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitMockup_module(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitMockup_module(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Mockup_diiaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_mockup_diia;
        this.md_async = null; // Token
        this.md_name = null; // IdentifierContext
        this.md_params = null; // ParamsContext
        this.md_type = null; // Type_valueContext
    }

	MOCKUP() {
	    return this.getToken(DiiaParser.MOCKUP, 0);
	};

	DIIA() {
	    return this.getToken(DiiaParser.DIIA, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	ASYNC() {
	    return this.getToken(DiiaParser.ASYNC, 0);
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	params() {
	    return this.getTypedRuleContext(ParamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterMockup_diia(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitMockup_diia(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitMockup_diia(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Mockup_bodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_mockup_body;
    }

	mockup_body_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Mockup_body_elementContext);
	    } else {
	        return this.getTypedRuleContext(Mockup_body_elementContext,i);
	    }
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterMockup_body(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitMockup_body(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitMockup_body(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Mockup_body_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_mockup_body_element;
    }

	structure_param() {
	    return this.getTypedRuleContext(Structure_paramContext,0);
	};

	method_declaration() {
	    return this.getTypedRuleContext(Method_declarationContext,0);
	};

	nls() {
	    return this.getTypedRuleContext(NlsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterMockup_body_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitMockup_body_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitMockup_body_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiiaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_diia;
        this.d_async = null; // Token
        this.d_structure = null; // IdentifierContext
        this.d_name = null; // IdentifierContext
        this.d_params = null; // ParamsContext
        this.d_type = null; // Type_valueContext
        this.d_body = null; // BodyContext
    }

	DIIA() {
	    return this.getToken(DiiaParser.DIIA, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(DiiaParser.DOT, 0);
	};

	ASYNC() {
	    return this.getToken(DiiaParser.ASYNC, 0);
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	params() {
	    return this.getTypedRuleContext(ParamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterDiia(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitDiia(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitDiia(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_if;
        this.i_value = null; // ExprContext
        this.i_body = null; // BodyContext
        this.i_else_body = null; // BodyContext
        this.i_else_if = null; // IfContext
    }

	IF() {
	    return this.getToken(DiiaParser.IF, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	body = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BodyContext);
	    } else {
	        return this.getTypedRuleContext(BodyContext,i);
	    }
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	ELSE() {
	    return this.getToken(DiiaParser.ELSE, 0);
	};

	if_() {
	    return this.getTypedRuleContext(IfContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterIf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitIf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitIf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EachContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_each;
        this.e_iterator = null; // ExprContext
        this.e_fromto = null; // FromtoContext
        this.e_key_name = null; // IdentifierContext
        this.e_name = null; // IdentifierContext
        this.e_body = null; // BodyContext
    }

	FOR() {
	    return this.getToken(DiiaParser.FOR, 0);
	};

	AS() {
	    return this.getToken(DiiaParser.AS, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	fromto() {
	    return this.getTypedRuleContext(FromtoContext,0);
	};

	COMMA() {
	    return this.getToken(DiiaParser.COMMA, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterEach(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitEach(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitEach(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromtoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_fromto;
    }

	fromto_simple() {
	    return this.getTypedRuleContext(Fromto_simpleContext,0);
	};

	fromto_complex() {
	    return this.getTypedRuleContext(Fromto_complexContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFromto(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFromto(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFromto(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fromto_simpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_fromto_simple;
        this.fs_from = null; // Fromto_valueContext
        this.fs_to_symbol = null; // Fromto_to_symbolContext
        this.fs_to = null; // Fromto_valueContext
    }

	FROMTO() {
	    return this.getToken(DiiaParser.FROMTO, 0);
	};

	fromto_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fromto_valueContext);
	    } else {
	        return this.getTypedRuleContext(Fromto_valueContext,i);
	    }
	};

	fromto_to_symbol() {
	    return this.getTypedRuleContext(Fromto_to_symbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFromto_simple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFromto_simple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFromto_simple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fromto_complexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_fromto_complex;
        this.fc_from = null; // Fromto_valueContext
        this.fc_middle_symbol = null; // Fromto_middle_symbolContext
        this.fc_middle = null; // Fromto_valueContext
        this.fc_to_symbol = null; // Fromto_to_symbolContext
        this.fc_to = null; // Fromto_valueContext
    }

	FROMTO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.FROMTO);
	    } else {
	        return this.getToken(DiiaParser.FROMTO, i);
	    }
	};


	fromto_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fromto_valueContext);
	    } else {
	        return this.getTypedRuleContext(Fromto_valueContext,i);
	    }
	};

	fromto_middle_symbol() {
	    return this.getTypedRuleContext(Fromto_middle_symbolContext,0);
	};

	fromto_to_symbol() {
	    return this.getTypedRuleContext(Fromto_to_symbolContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFromto_complex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFromto_complex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFromto_complex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fromto_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_fromto_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Fromto_idContext extends Fromto_valueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFromto_id(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFromto_id(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFromto_id(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Fromto_idContext = Fromto_idContext;

class Fromto_stringContext extends Fromto_valueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRING() {
	    return this.getToken(DiiaParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFromto_string(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFromto_string(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFromto_string(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Fromto_stringContext = Fromto_stringContext;

class Fromto_numberContext extends Fromto_valueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NUMBER() {
	    return this.getToken(DiiaParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFromto_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFromto_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFromto_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Fromto_numberContext = Fromto_numberContext;

class Fromto_nestedContext extends Fromto_valueContext {

    constructor(parser, ctx) {
        super(parser);
        this.fn_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFromto_nested(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFromto_nested(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFromto_nested(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Fromto_nestedContext = Fromto_nestedContext;

class Fromto_middle_symbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_fromto_middle_symbol;
    }

	PLUS() {
	    return this.getToken(DiiaParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(DiiaParser.MINUS, 0);
	};

	MUL() {
	    return this.getToken(DiiaParser.MUL, 0);
	};

	DIV() {
	    return this.getToken(DiiaParser.DIV, 0);
	};

	PERCENT() {
	    return this.getToken(DiiaParser.PERCENT, 0);
	};

	DIVDIV() {
	    return this.getToken(DiiaParser.DIVDIV, 0);
	};

	POW() {
	    return this.getToken(DiiaParser.POW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFromto_middle_symbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFromto_middle_symbol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFromto_middle_symbol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Fromto_to_symbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_fromto_to_symbol;
    }

	NOT_EQ() {
	    return this.getToken(DiiaParser.NOT_EQ, 0);
	};

	EQ() {
	    return this.getToken(DiiaParser.EQ, 0);
	};

	GREATER() {
	    return this.getToken(DiiaParser.GREATER, 0);
	};

	SMALLER() {
	    return this.getToken(DiiaParser.SMALLER, 0);
	};

	GREATER_EQ() {
	    return this.getToken(DiiaParser.GREATER_EQ, 0);
	};

	SMALLER_EQ() {
	    return this.getToken(DiiaParser.SMALLER_EQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFromto_to_symbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFromto_to_symbol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFromto_to_symbol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_while;
        this.w_value = null; // ExprContext
        this.w_body = null; // BodyContext
    }

	WHILE() {
	    return this.getToken(DiiaParser.WHILE, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterWhile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitWhile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitWhile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EvalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_eval;
        this.e_value = null; // ValueContext
    }

	EVAL() {
	    return this.getToken(DiiaParser.EVAL, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterEval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitEval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitEval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_try;
        this.t_body = null; // BodyContext
        this.tc_name = null; // IdentifierContext
        this.tc_body = null; // BodyContext
    }

	TRY() {
	    return this.getToken(DiiaParser.TRY, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	CATCH() {
	    return this.getToken(DiiaParser.CATCH, 0);
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	body = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BodyContext);
	    } else {
	        return this.getTypedRuleContext(BodyContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterTry(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitTry(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitTry(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TakeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_take;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Take_moduleContext extends TakeContext {

    constructor(parser, ctx) {
        super(parser);
        this.tm_relative = null; // Token;
        this.tm_elements_chain = null; // Identifiers_chainContext;
        this.tm_star = null; // Token;
        this.tm_as = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	TAKE() {
	    return this.getToken(DiiaParser.TAKE, 0);
	};

	identifiers_chain() {
	    return this.getTypedRuleContext(Identifiers_chainContext,0);
	};

	AS() {
	    return this.getToken(DiiaParser.AS, 0);
	};

	DOT() {
	    return this.getToken(DiiaParser.DOT, 0);
	};

	STAR_ALL() {
	    return this.getToken(DiiaParser.STAR_ALL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterTake_module(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitTake_module(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitTake_module(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Take_moduleContext = Take_moduleContext;

class Take_fileContext extends TakeContext {

    constructor(parser, ctx) {
        super(parser);
        this.tf_name = null; // Token;
        this.tf_as = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	TAKE_FILE() {
	    return this.getToken(DiiaParser.TAKE_FILE, 0);
	};

	AS() {
	    return this.getToken(DiiaParser.AS, 0);
	};

	STRING() {
	    return this.getToken(DiiaParser.STRING, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterTake_file(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitTake_file(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitTake_file(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Take_fileContext = Take_fileContext;

class Take_remoteContext extends TakeContext {

    constructor(parser, ctx) {
        super(parser);
        this.tr_url = null; // Token;
        this.tr_as = null; // IdentifierContext;
        super.copyFrom(ctx);
    }

	TAKE() {
	    return this.getToken(DiiaParser.TAKE, 0);
	};

	STRING() {
	    return this.getToken(DiiaParser.STRING, 0);
	};

	AS() {
	    return this.getToken(DiiaParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterTake_remote(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitTake_remote(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitTake_remote(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Take_remoteContext = Take_remoteContext;

class GiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_give;
    }

	GIVE() {
	    return this.getToken(DiiaParser.GIVE, 0);
	};

	give_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Give_elementContext);
	    } else {
	        return this.getTypedRuleContext(Give_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.COMMA);
	    } else {
	        return this.getToken(DiiaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterGive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitGive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitGive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Give_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_give_element;
        this.ge_name = null; // IdentifierContext
        this.ge_as = null; // IdentifierContext
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	AS() {
	    return this.getToken(DiiaParser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterGive_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitGive_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitGive_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_string;
    }

	STRING() {
	    return this.getToken(DiiaParser.STRING, 0);
	};

	STRING_MULTILINE() {
	    return this.getToken(DiiaParser.STRING_MULTILINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitString(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Pre_incrementContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.pi_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	INCREMENT() {
	    return this.getToken(DiiaParser.INCREMENT, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterPre_increment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitPre_increment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitPre_increment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Pre_incrementContext = Pre_incrementContext;

class Arithmetic_addContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.a_left = null; // ValueContext;
        this.a_operation = null; // Arithmetic_op_addContext;
        this.a_right = null; // ValueContext;
        super.copyFrom(ctx);
    }

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	arithmetic_op_add() {
	    return this.getTypedRuleContext(Arithmetic_op_addContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArithmetic_add(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArithmetic_add(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArithmetic_add(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Arithmetic_addContext = Arithmetic_addContext;

class Bitwise_notContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.bn_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	TILDA() {
	    return this.getToken(DiiaParser.TILDA, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterBitwise_not(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitBitwise_not(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitBitwise_not(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Bitwise_notContext = Bitwise_notContext;

class NestedContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.n_value = null; // ExprContext;
        super.copyFrom(ctx);
    }

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterNested(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitNested(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitNested(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.NestedContext = NestedContext;

class NumberContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NUMBER() {
	    return this.getToken(DiiaParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitNumber(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitNumber(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.NumberContext = NumberContext;

class NegativeContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.n_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	MINUS() {
	    return this.getToken(DiiaParser.MINUS, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterNegative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitNegative(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitNegative(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.NegativeContext = NegativeContext;

class NotContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.n_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(DiiaParser.NOT, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitNot(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitNot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.NotContext = NotContext;

class ArrayContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.a_elements = null; // Array_elementsContext;
        super.copyFrom(ctx);
    }

	OPEN_ARRAY() {
	    return this.getToken(DiiaParser.OPEN_ARRAY, 0);
	};

	CLOSE_ARRAY() {
	    return this.getToken(DiiaParser.CLOSE_ARRAY, 0);
	};

	array_elements() {
	    return this.getTypedRuleContext(Array_elementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArray(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArray(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.ArrayContext = ArrayContext;

class BitwiseContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.b_left = null; // ValueContext;
        this.b_operation = null; // Bitwise_opContext;
        this.b_right = null; // ValueContext;
        super.copyFrom(ctx);
    }

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	bitwise_op() {
	    return this.getTypedRuleContext(Bitwise_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterBitwise(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitBitwise(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitBitwise(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.BitwiseContext = BitwiseContext;

class Post_decrementContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.pd_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	DECREMENT() {
	    return this.getToken(DiiaParser.DECREMENT, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterPost_decrement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitPost_decrement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitPost_decrement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Post_decrementContext = Post_decrementContext;

class IdContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.IdContext = IdContext;

class Arithmetic_mulContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.a_left = null; // ValueContext;
        this.a_operation = null; // Arithmetic_op_mulContext;
        this.a_right = null; // ValueContext;
        super.copyFrom(ctx);
    }

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	arithmetic_op_mul() {
	    return this.getTypedRuleContext(Arithmetic_op_mulContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArithmetic_mul(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArithmetic_mul(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArithmetic_mul(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Arithmetic_mulContext = Arithmetic_mulContext;

class Get_elementContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.a_left = null; // ValueContext;
        this.a_element = null; // ExprContext;
        super.copyFrom(ctx);
    }

	OPEN_ARRAY() {
	    return this.getToken(DiiaParser.OPEN_ARRAY, 0);
	};

	CLOSE_ARRAY() {
	    return this.getToken(DiiaParser.CLOSE_ARRAY, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterGet_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitGet_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitGet_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Get_elementContext = Get_elementContext;

class ChainContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.c_left = null; // ValueContext;
        this.c_right = null; // Extended_identifierContext;
        super.copyFrom(ctx);
    }

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	DOT() {
	    return this.getToken(DiiaParser.DOT, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	extended_identifier() {
	    return this.getTypedRuleContext(Extended_identifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterChain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitChain(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitChain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.ChainContext = ChainContext;

class String_valueContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterString_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitString_value(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitString_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.String_valueContext = String_valueContext;

class ComparisonContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.c_left = null; // ValueContext;
        this.c_operation = null; // Comparison_opContext;
        this.c_right = null; // ValueContext;
        super.copyFrom(ctx);
    }

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	comparison_op() {
	    return this.getTypedRuleContext(Comparison_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.ComparisonContext = ComparisonContext;

class TestContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.t_left = null; // ValueContext;
        this.t_operation = null; // Test_opContext;
        this.t_right = null; // ValueContext;
        super.copyFrom(ctx);
    }

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	test_op() {
	    return this.getTypedRuleContext(Test_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitTest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitTest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.TestContext = TestContext;

class Call_exprContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.c_value = null; // ExprContext;
        this.c_args = null; // ArgsContext;
        this.c_named_args = null; // Named_argsContext;
        super.copyFrom(ctx);
    }

	OPEN_PAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.OPEN_PAREN);
	    } else {
	        return this.getToken(DiiaParser.OPEN_PAREN, i);
	    }
	};


	CLOSE_PAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.CLOSE_PAREN);
	    } else {
	        return this.getToken(DiiaParser.CLOSE_PAREN, i);
	    }
	};


	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	args() {
	    return this.getTypedRuleContext(ArgsContext,0);
	};

	named_args() {
	    return this.getTypedRuleContext(Named_argsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterCall_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitCall_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitCall_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Call_exprContext = Call_exprContext;

class PositiveContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.p_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	PLUS() {
	    return this.getToken(DiiaParser.PLUS, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterPositive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitPositive(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitPositive(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.PositiveContext = PositiveContext;

class CallContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.c_value = null; // ValueContext;
        this.c_args = null; // ArgsContext;
        this.c_named_args = null; // Named_argsContext;
        super.copyFrom(ctx);
    }

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	args() {
	    return this.getTypedRuleContext(ArgsContext,0);
	};

	named_args() {
	    return this.getTypedRuleContext(Named_argsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitCall(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.CallContext = CallContext;

class AsContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.a_left = null; // ValueContext;
        this.a_right = null; // ValueContext;
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(DiiaParser.AS, 0);
	};

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.AsContext = AsContext;

class DictionaryContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.d_args = null; // Dictionary_argsContext;
        super.copyFrom(ctx);
    }

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	dictionary_args() {
	    return this.getTypedRuleContext(Dictionary_argsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterDictionary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitDictionary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitDictionary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.DictionaryContext = DictionaryContext;

class Pre_decrementContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.pd_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	DECREMENT() {
	    return this.getToken(DiiaParser.DECREMENT, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterPre_decrement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitPre_decrement(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitPre_decrement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Pre_decrementContext = Pre_decrementContext;

class Post_incrementContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.pi_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	INCREMENT() {
	    return this.getToken(DiiaParser.INCREMENT, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterPost_increment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitPost_increment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitPost_increment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Post_incrementContext = Post_incrementContext;

class TernaryContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        this.t_value = null; // ValueContext;
        this.t_positive = null; // ExprContext;
        this.t_negative = null; // ExprContext;
        super.copyFrom(ctx);
    }

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	TERNARY() {
	    return this.getToken(DiiaParser.TERNARY, 0);
	};

	COLON() {
	    return this.getToken(DiiaParser.COLON, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterTernary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitTernary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitTernary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.TernaryContext = TernaryContext;

class GodContext extends ValueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueContext);
	    } else {
	        return this.getTypedRuleContext(ValueContext,i);
	    }
	};

	TA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.TA);
	    } else {
	        return this.getToken(DiiaParser.TA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterGod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitGod(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitGod(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.GodContext = GodContext;

class Array_elementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_array_elements;
    }

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	array_element = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_elementContext);
	    } else {
	        return this.getTypedRuleContext(Array_elementContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.COMMA);
	    } else {
	        return this.getToken(DiiaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArray_elements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArray_elements(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArray_elements(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Array_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_array_element;
        this.ae_value = null; // ExprContext
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArray_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArray_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArray_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dictionary_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_dictionary_args;
    }

	dictionary_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dictionary_argContext);
	    } else {
	        return this.getTypedRuleContext(Dictionary_argContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.COMMA);
	    } else {
	        return this.getToken(DiiaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterDictionary_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitDictionary_args(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitDictionary_args(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dictionary_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_dictionary_arg;
        this.da_name_id = null; // IdentifierContext
        this.da_name_string = null; // Token
        this.da_value = null; // ExprContext
    }

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	ASSIGN() {
	    return this.getToken(DiiaParser.ASSIGN, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	STRING() {
	    return this.getToken(DiiaParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterDictionary_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitDictionary_arg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitDictionary_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_expr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Anonymous_diiaContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.d_async = null; // Token;
        this.d_params = null; // ParamsContext;
        this.d_type = null; // Type_valueContext;
        this.d_body = null; // BodyContext;
        super.copyFrom(ctx);
    }

	DIIA() {
	    return this.getToken(DiiaParser.DIIA, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	ASYNC() {
	    return this.getToken(DiiaParser.ASYNC, 0);
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	body() {
	    return this.getTypedRuleContext(BodyContext,0);
	};

	params() {
	    return this.getTypedRuleContext(ParamsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAnonymous_diia(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAnonymous_diia(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAnonymous_diia(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Anonymous_diiaContext = Anonymous_diiaContext;

class WaitContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.w_value = null; // ValueContext;
        super.copyFrom(ctx);
    }

	WAIT() {
	    return this.getToken(DiiaParser.WAIT, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterWait(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitWait(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitWait(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.WaitContext = WaitContext;

class FunctionContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.f_async = null; // Token;
        this.f_params = null; // ParamsContext;
        this.f_type = null; // Type_valueContext;
        this.f_body = null; // ExprContext;
        super.copyFrom(ctx);
    }

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	COLON() {
	    return this.getToken(DiiaParser.COLON, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ASYNC() {
	    return this.getToken(DiiaParser.ASYNC, 0);
	};

	params() {
	    return this.getTypedRuleContext(ParamsContext,0);
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.FunctionContext = FunctionContext;

class SimpleContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitSimple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitSimple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.SimpleContext = SimpleContext;

class ThrowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_throw;
        this.t_value = null; // ExprContext
    }

	THROW() {
	    return this.getToken(DiiaParser.THROW, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterThrow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitThrow(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitThrow(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Array_destructionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_array_destruction;
    }

	OPEN_ARRAY() {
	    return this.getToken(DiiaParser.OPEN_ARRAY, 0);
	};

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	array_destruction_el = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Array_destruction_elContext);
	    } else {
	        return this.getTypedRuleContext(Array_destruction_elContext,i);
	    }
	};

	CLOSE_ARRAY() {
	    return this.getToken(DiiaParser.CLOSE_ARRAY, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.COMMA);
	    } else {
	        return this.getToken(DiiaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArray_destruction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArray_destruction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArray_destruction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Array_destruction_elContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_array_destruction_el;
        this.ade_id = null; // IdentifierContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArray_destruction_el(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArray_destruction_el(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArray_destruction_el(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_destructionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_object_destruction;
    }

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	object_destruction_el = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Object_destruction_elContext);
	    } else {
	        return this.getTypedRuleContext(Object_destruction_elContext,i);
	    }
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.COMMA);
	    } else {
	        return this.getToken(DiiaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterObject_destruction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitObject_destruction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitObject_destruction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Object_destruction_elContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_object_destruction_el;
        this.ode_id = null; // IdentifierContext
    }

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterObject_destruction_el(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitObject_destruction_el(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitObject_destruction_el(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_assign;
    }

	assign_simple() {
	    return this.getTypedRuleContext(Assign_simpleContext,0);
	};

	assign_define() {
	    return this.getTypedRuleContext(Assign_defineContext,0);
	};

	assign_complex() {
	    return this.getTypedRuleContext(Assign_complexContext,0);
	};

	assign_array_destruction() {
	    return this.getTypedRuleContext(Assign_array_destructionContext,0);
	};

	assign_object_destruction() {
	    return this.getTypedRuleContext(Assign_object_destructionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAssign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAssign(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAssign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_simpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_assign_simple;
        this.as_subject = null; // Token
        this.as_identifier = null; // IdentifierContext
        this.as_type = null; // Type_valueContext
        this.as_symbol = null; // Assign_symbolContext
        this.as_value = null; // ExprContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	assign_symbol() {
	    return this.getTypedRuleContext(Assign_symbolContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	SUBJECT() {
	    return this.getToken(DiiaParser.SUBJECT, 0);
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAssign_simple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAssign_simple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAssign_simple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_defineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_assign_define;
        this.as_identifier = null; // IdentifierContext
        this.as_type = null; // Type_valueContext
    }

	SUBJECT() {
	    return this.getToken(DiiaParser.SUBJECT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAssign_define(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAssign_define(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAssign_define(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_complexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_assign_complex;
        this.ac_left = null; // Assign_complex_leftContext
        this.ac_right = null; // Assign_complex_rightContext
        this.ac_symbol = null; // Assign_symbolContext
        this.ac_value = null; // ExprContext
    }

	assign_complex_left() {
	    return this.getTypedRuleContext(Assign_complex_leftContext,0);
	};

	assign_complex_right() {
	    return this.getTypedRuleContext(Assign_complex_rightContext,0);
	};

	assign_symbol() {
	    return this.getTypedRuleContext(Assign_symbolContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAssign_complex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAssign_complex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAssign_complex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_complex_leftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_assign_complex_left;
        this.acl_left = null; // Assign_complex_leftContext
        this.acl_chain = null; // Identifiers_chainContext
        this.acl_element = null; // ExprContext
    }

	identifiers_chain() {
	    return this.getTypedRuleContext(Identifiers_chainContext,0);
	};

	OPEN_ARRAY() {
	    return this.getToken(DiiaParser.OPEN_ARRAY, 0);
	};

	CLOSE_ARRAY() {
	    return this.getToken(DiiaParser.CLOSE_ARRAY, 0);
	};

	assign_complex_left() {
	    return this.getTypedRuleContext(Assign_complex_leftContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAssign_complex_left(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAssign_complex_left(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAssign_complex_left(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_complex_rightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_assign_complex_right;
        this.acr_identifier = null; // IdentifierContext
        this.acr_element = null; // ExprContext
    }

	DOT() {
	    return this.getToken(DiiaParser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_ARRAY() {
	    return this.getToken(DiiaParser.OPEN_ARRAY, 0);
	};

	CLOSE_ARRAY() {
	    return this.getToken(DiiaParser.CLOSE_ARRAY, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAssign_complex_right(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAssign_complex_right(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAssign_complex_right(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_array_destructionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_assign_array_destruction;
        this.aad_array_destruction = null; // Array_destructionContext
        this.aad_value = null; // ExprContext
    }

	ASSIGN() {
	    return this.getToken(DiiaParser.ASSIGN, 0);
	};

	array_destruction() {
	    return this.getTypedRuleContext(Array_destructionContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAssign_array_destruction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAssign_array_destruction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAssign_array_destruction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_object_destructionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_assign_object_destruction;
        this.aod_object_destruction = null; // Object_destructionContext
        this.aod_value = null; // ExprContext
    }

	ASSIGN() {
	    return this.getToken(DiiaParser.ASSIGN, 0);
	};

	object_destruction() {
	    return this.getTypedRuleContext(Object_destructionContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAssign_object_destruction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAssign_object_destruction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAssign_object_destruction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assign_symbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_assign_symbol;
    }

	TSE() {
	    return this.getToken(DiiaParser.TSE, 0);
	};

	ASSIGN() {
	    return this.getToken(DiiaParser.ASSIGN, 0);
	};

	ASSIGN_PARENT() {
	    return this.getToken(DiiaParser.ASSIGN_PARENT, 0);
	};

	ASSIGN_ADD() {
	    return this.getToken(DiiaParser.ASSIGN_ADD, 0);
	};

	ASSIGN_SUB() {
	    return this.getToken(DiiaParser.ASSIGN_SUB, 0);
	};

	ASSIGN_MUL() {
	    return this.getToken(DiiaParser.ASSIGN_MUL, 0);
	};

	ASSIGN_DIV() {
	    return this.getToken(DiiaParser.ASSIGN_DIV, 0);
	};

	ASSIGN_DIVDIV() {
	    return this.getToken(DiiaParser.ASSIGN_DIVDIV, 0);
	};

	ASSIGN_MOD() {
	    return this.getToken(DiiaParser.ASSIGN_MOD, 0);
	};

	ASSIGN_POW() {
	    return this.getToken(DiiaParser.ASSIGN_POW, 0);
	};

	ASSIGN_BW_AND() {
	    return this.getToken(DiiaParser.ASSIGN_BW_AND, 0);
	};

	ASSIGN_BW_OR() {
	    return this.getToken(DiiaParser.ASSIGN_BW_OR, 0);
	};

	ASSIGN_BW_SHIFT_LEFT() {
	    return this.getToken(DiiaParser.ASSIGN_BW_SHIFT_LEFT, 0);
	};

	ASSIGN_BW_SHIFT_RIGHT() {
	    return this.getToken(DiiaParser.ASSIGN_BW_SHIFT_RIGHT, 0);
	};

	ASSIGN_XOR() {
	    return this.getToken(DiiaParser.ASSIGN_XOR, 0);
	};

	ASSIGN_AND() {
	    return this.getToken(DiiaParser.ASSIGN_AND, 0);
	};

	ASSIGN_OR() {
	    return this.getToken(DiiaParser.ASSIGN_OR, 0);
	};

	ASSIGN_IF() {
	    return this.getToken(DiiaParser.ASSIGN_IF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterAssign_symbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitAssign_symbol(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitAssign_symbol(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Wait_assignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_wait_assign;
        this.wa_assign = null; // AssignContext
    }

	WAIT() {
	    return this.getToken(DiiaParser.WAIT, 0);
	};

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterWait_assign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitWait_assign(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitWait_assign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_identifier;
    }

	ID() {
	    return this.getToken(DiiaParser.ID, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Extended_identifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_extended_identifier;
    }

	ID() {
	    return this.getToken(DiiaParser.ID, 0);
	};

	END() {
	    return this.getToken(DiiaParser.END, 0);
	};

	DIIA() {
	    return this.getToken(DiiaParser.DIIA, 0);
	};

	STRUCTURE() {
	    return this.getToken(DiiaParser.STRUCTURE, 0);
	};

	FOR() {
	    return this.getToken(DiiaParser.FOR, 0);
	};

	IF() {
	    return this.getToken(DiiaParser.IF, 0);
	};

	WAIT() {
	    return this.getToken(DiiaParser.WAIT, 0);
	};

	TAKE() {
	    return this.getToken(DiiaParser.TAKE, 0);
	};

	GIVE() {
	    return this.getToken(DiiaParser.GIVE, 0);
	};

	AS() {
	    return this.getToken(DiiaParser.AS, 0);
	};

	IS() {
	    return this.getToken(DiiaParser.IS, 0);
	};

	RETURN() {
	    return this.getToken(DiiaParser.RETURN, 0);
	};

	ASYNC() {
	    return this.getToken(DiiaParser.ASYNC, 0);
	};

	AND() {
	    return this.getToken(DiiaParser.AND, 0);
	};

	OR() {
	    return this.getToken(DiiaParser.OR, 0);
	};

	TRY() {
	    return this.getToken(DiiaParser.TRY, 0);
	};

	CATCH() {
	    return this.getToken(DiiaParser.CATCH, 0);
	};

	ELSE() {
	    return this.getToken(DiiaParser.ELSE, 0);
	};

	THROW() {
	    return this.getToken(DiiaParser.THROW, 0);
	};

	WHILE() {
	    return this.getToken(DiiaParser.WHILE, 0);
	};

	MODULE() {
	    return this.getToken(DiiaParser.MODULE, 0);
	};

	EQ_WORD() {
	    return this.getToken(DiiaParser.EQ_WORD, 0);
	};

	GR_WORD() {
	    return this.getToken(DiiaParser.GR_WORD, 0);
	};

	SM_WORD() {
	    return this.getToken(DiiaParser.SM_WORD, 0);
	};

	MOCKUP() {
	    return this.getToken(DiiaParser.MOCKUP, 0);
	};

	IMPLEMENTS() {
	    return this.getToken(DiiaParser.IMPLEMENTS, 0);
	};

	EVAL() {
	    return this.getToken(DiiaParser.EVAL, 0);
	};

	WHEN() {
	    return this.getToken(DiiaParser.WHEN, 0);
	};

	TA() {
	    return this.getToken(DiiaParser.TA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterExtended_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitExtended_identifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitExtended_identifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Identifiers_chainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_identifiers_chain;
        this.ic_left = null; // Identifiers_chainContext
        this.ic_identifier = null; // IdentifierContext
        this.ic_right = null; // Identifiers_chainContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT() {
	    return this.getToken(DiiaParser.DOT, 0);
	};

	identifiers_chain = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Identifiers_chainContext);
	    } else {
	        return this.getTypedRuleContext(Identifiers_chainContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterIdentifiers_chain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitIdentifiers_chain(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitIdentifiers_chain(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_type_value;
        this.tv_left = null; // Type_valueContext
        this.tv_array = null; // Type_value_arrayContext
        this.tv_single = null; // Identifiers_chainContext
        this.tv_operation = null; // Test_opContext
        this.tv_right = null; // Type_valueContext
    }

	identifiers_chain() {
	    return this.getTypedRuleContext(Identifiers_chainContext,0);
	};

	type_value_array() {
	    return this.getTypedRuleContext(Type_value_arrayContext,0);
	};

	type_value = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Type_valueContext);
	    } else {
	        return this.getTypedRuleContext(Type_valueContext,i);
	    }
	};

	test_op() {
	    return this.getTypedRuleContext(Test_opContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterType_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitType_value(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitType_value(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Type_value_arrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_type_value_array;
    }

	OPEN_ARRAY() {
	    return this.getToken(DiiaParser.OPEN_ARRAY, 0);
	};

	CLOSE_ARRAY() {
	    return this.getToken(DiiaParser.CLOSE_ARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterType_value_array(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitType_value_array(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitType_value_array(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_args;
    }

	arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgContext);
	    } else {
	        return this.getTypedRuleContext(ArgContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.COMMA);
	    } else {
	        return this.getToken(DiiaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArgs(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArgs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_arg;
        this.a_spread = null; // Token
        this.a_value = null; // ExprContext
    }

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	SPREAD() {
	    return this.getToken(DiiaParser.SPREAD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Named_argsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_named_args;
    }

	named_arg = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Named_argContext);
	    } else {
	        return this.getTypedRuleContext(Named_argContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.COMMA);
	    } else {
	        return this.getToken(DiiaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterNamed_args(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitNamed_args(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitNamed_args(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Named_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_named_arg;
        this.na_name = null; // IdentifierContext
        this.na_value = null; // ExprContext
    }

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	ASSIGN() {
	    return this.getToken(DiiaParser.ASSIGN, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterNamed_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitNamed_arg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitNamed_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParamsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_params;
    }

	param = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParamContext);
	    } else {
	        return this.getTypedRuleContext(ParamContext,i);
	    }
	};

	nls = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlsContext);
	    } else {
	        return this.getTypedRuleContext(NlsContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(DiiaParser.COMMA);
	    } else {
	        return this.getToken(DiiaParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterParams(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitParams(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitParams(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParamContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_param;
        this.p_spread = null; // Token
        this.p_name = null; // IdentifierContext
        this.p_array_destruction = null; // Array_destructionContext
        this.p_object_destruction = null; // Object_destructionContext
        this.p_type = null; // Type_valueContext
        this.p_value = null; // Param_valueContext
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	array_destruction() {
	    return this.getTypedRuleContext(Array_destructionContext,0);
	};

	object_destruction() {
	    return this.getTypedRuleContext(Object_destructionContext,0);
	};

	ASSIGN() {
	    return this.getToken(DiiaParser.ASSIGN, 0);
	};

	type_value() {
	    return this.getTypedRuleContext(Type_valueContext,0);
	};

	param_value() {
	    return this.getTypedRuleContext(Param_valueContext,0);
	};

	SPREAD() {
	    return this.getToken(DiiaParser.SPREAD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Param_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_param_value;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Param_value_identifierContext extends Param_valueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterParam_value_identifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitParam_value_identifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitParam_value_identifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Param_value_identifierContext = Param_value_identifierContext;

class Param_value_empty_dictionaryContext extends Param_valueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_PAREN() {
	    return this.getToken(DiiaParser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(DiiaParser.CLOSE_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterParam_value_empty_dictionary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitParam_value_empty_dictionary(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitParam_value_empty_dictionary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Param_value_empty_dictionaryContext = Param_value_empty_dictionaryContext;

class Param_value_numberContext extends Param_valueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NUMBER() {
	    return this.getToken(DiiaParser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterParam_value_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitParam_value_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitParam_value_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Param_value_numberContext = Param_value_numberContext;

class Param_value_stringContext extends Param_valueContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	STRING() {
	    return this.getToken(DiiaParser.STRING, 0);
	};

	STRING_MULTILINE() {
	    return this.getToken(DiiaParser.STRING_MULTILINE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterParam_value_string(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitParam_value_string(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitParam_value_string(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

DiiaParser.Param_value_stringContext = Param_value_stringContext;

class BodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_body;
    }

	body_element_or_return = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Body_element_or_returnContext);
	    } else {
	        return this.getTypedRuleContext(Body_element_or_returnContext,i);
	    }
	};

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitBody(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Body_element_or_returnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_body_element_or_return;
    }

	body_element() {
	    return this.getTypedRuleContext(Body_elementContext,0);
	};

	return_body_line() {
	    return this.getTypedRuleContext(Return_body_lineContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterBody_element_or_return(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitBody_element_or_return(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitBody_element_or_return(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Body_elementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_body_element;
    }

	if_() {
	    return this.getTypedRuleContext(IfContext,0);
	};

	each() {
	    return this.getTypedRuleContext(EachContext,0);
	};

	while_() {
	    return this.getTypedRuleContext(WhileContext,0);
	};

	try_() {
	    return this.getTypedRuleContext(TryContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	throw_() {
	    return this.getTypedRuleContext(ThrowContext,0);
	};

	wait_assign() {
	    return this.getTypedRuleContext(Wait_assignContext,0);
	};

	assign() {
	    return this.getTypedRuleContext(AssignContext,0);
	};

	nls() {
	    return this.getTypedRuleContext(NlsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterBody_element(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitBody_element(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitBody_element(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Return_body_lineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_return_body_line;
        this.rbl = null; // Body_elementContext
    }

	RETURN() {
	    return this.getToken(DiiaParser.RETURN, 0);
	};

	body_element() {
	    return this.getTypedRuleContext(Body_elementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterReturn_body_line(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitReturn_body_line(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitReturn_body_line(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arithmetic_op_mulContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_arithmetic_op_mul;
    }

	MUL() {
	    return this.getToken(DiiaParser.MUL, 0);
	};

	DIV() {
	    return this.getToken(DiiaParser.DIV, 0);
	};

	PERCENT() {
	    return this.getToken(DiiaParser.PERCENT, 0);
	};

	DIVDIV() {
	    return this.getToken(DiiaParser.DIVDIV, 0);
	};

	POW() {
	    return this.getToken(DiiaParser.POW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArithmetic_op_mul(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArithmetic_op_mul(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArithmetic_op_mul(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Arithmetic_op_addContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_arithmetic_op_add;
    }

	PLUS() {
	    return this.getToken(DiiaParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(DiiaParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterArithmetic_op_add(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitArithmetic_op_add(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitArithmetic_op_add(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Bitwise_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_bitwise_op;
    }

	XOR() {
	    return this.getToken(DiiaParser.XOR, 0);
	};

	OR_BW() {
	    return this.getToken(DiiaParser.OR_BW, 0);
	};

	AND_BW() {
	    return this.getToken(DiiaParser.AND_BW, 0);
	};

	BW_SHIFT_LEFT() {
	    return this.getToken(DiiaParser.BW_SHIFT_LEFT, 0);
	};

	BW_SHIFT_RIGHT() {
	    return this.getToken(DiiaParser.BW_SHIFT_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterBitwise_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitBitwise_op(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitBitwise_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Test_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_test_op;
    }

	AND() {
	    return this.getToken(DiiaParser.AND, 0);
	};

	OR() {
	    return this.getToken(DiiaParser.OR, 0);
	};

	OR_SYM() {
	    return this.getToken(DiiaParser.OR_SYM, 0);
	};

	AND_SYM() {
	    return this.getToken(DiiaParser.AND_SYM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterTest_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitTest_op(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitTest_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comparison_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_comparison_op;
    }

	EQ() {
	    return this.getToken(DiiaParser.EQ, 0);
	};

	NOT_EQ() {
	    return this.getToken(DiiaParser.NOT_EQ, 0);
	};

	GREATER() {
	    return this.getToken(DiiaParser.GREATER, 0);
	};

	SMALLER() {
	    return this.getToken(DiiaParser.SMALLER, 0);
	};

	GREATER_EQ() {
	    return this.getToken(DiiaParser.GREATER_EQ, 0);
	};

	SMALLER_EQ() {
	    return this.getToken(DiiaParser.SMALLER_EQ, 0);
	};

	IS() {
	    return this.getToken(DiiaParser.IS, 0);
	};

	NOT_IS_WORD() {
	    return this.getToken(DiiaParser.NOT_IS_WORD, 0);
	};

	EQ_WORD() {
	    return this.getToken(DiiaParser.EQ_WORD, 0);
	};

	NOT_EQ_WORD() {
	    return this.getToken(DiiaParser.NOT_EQ_WORD, 0);
	};

	GR_WORD() {
	    return this.getToken(DiiaParser.GR_WORD, 0);
	};

	NOT_GR_WORD() {
	    return this.getToken(DiiaParser.NOT_GR_WORD, 0);
	};

	SM_WORD() {
	    return this.getToken(DiiaParser.SM_WORD, 0);
	};

	NOT_SM_WORD() {
	    return this.getToken(DiiaParser.NOT_SM_WORD, 0);
	};

	HAS_IS_WORD() {
	    return this.getToken(DiiaParser.HAS_IS_WORD, 0);
	};

	NOT_HAS_IS_WORD() {
	    return this.getToken(DiiaParser.NOT_HAS_IS_WORD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterComparison_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitComparison_op(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitComparison_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_nl;
    }

	NL() {
	    return this.getToken(DiiaParser.NL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterNl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitNl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitNl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NlsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = DiiaParser.RULE_nls;
    }

	nl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NlContext);
	    } else {
	        return this.getTypedRuleContext(NlContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.enterNls(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof DiiaParserListener ) {
	        listener.exitNls(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof DiiaParserVisitor ) {
	        return visitor.visitNls(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




DiiaParser.FileContext = FileContext; 
DiiaParser.ProgramContext = ProgramContext; 
DiiaParser.Program_elementContext = Program_elementContext; 
DiiaParser.ModuleContext = ModuleContext; 
DiiaParser.Module_bodyContext = Module_bodyContext; 
DiiaParser.Module_body_elementContext = Module_body_elementContext; 
DiiaParser.Method_declarationContext = Method_declarationContext; 
DiiaParser.StructureContext = StructureContext; 
DiiaParser.Structure_elementsContext = Structure_elementsContext; 
DiiaParser.Structure_elementContext = Structure_elementContext; 
DiiaParser.Structure_paramContext = Structure_paramContext; 
DiiaParser.MockupContext = MockupContext; 
DiiaParser.Mockup_objectContext = Mockup_objectContext; 
DiiaParser.Mockup_structureContext = Mockup_structureContext; 
DiiaParser.Mockup_moduleContext = Mockup_moduleContext; 
DiiaParser.Mockup_diiaContext = Mockup_diiaContext; 
DiiaParser.Mockup_bodyContext = Mockup_bodyContext; 
DiiaParser.Mockup_body_elementContext = Mockup_body_elementContext; 
DiiaParser.DiiaContext = DiiaContext; 
DiiaParser.IfContext = IfContext; 
DiiaParser.EachContext = EachContext; 
DiiaParser.FromtoContext = FromtoContext; 
DiiaParser.Fromto_simpleContext = Fromto_simpleContext; 
DiiaParser.Fromto_complexContext = Fromto_complexContext; 
DiiaParser.Fromto_valueContext = Fromto_valueContext; 
DiiaParser.Fromto_middle_symbolContext = Fromto_middle_symbolContext; 
DiiaParser.Fromto_to_symbolContext = Fromto_to_symbolContext; 
DiiaParser.WhileContext = WhileContext; 
DiiaParser.EvalContext = EvalContext; 
DiiaParser.TryContext = TryContext; 
DiiaParser.TakeContext = TakeContext; 
DiiaParser.GiveContext = GiveContext; 
DiiaParser.Give_elementContext = Give_elementContext; 
DiiaParser.StringContext = StringContext; 
DiiaParser.ValueContext = ValueContext; 
DiiaParser.Array_elementsContext = Array_elementsContext; 
DiiaParser.Array_elementContext = Array_elementContext; 
DiiaParser.Dictionary_argsContext = Dictionary_argsContext; 
DiiaParser.Dictionary_argContext = Dictionary_argContext; 
DiiaParser.ExprContext = ExprContext; 
DiiaParser.ThrowContext = ThrowContext; 
DiiaParser.Array_destructionContext = Array_destructionContext; 
DiiaParser.Array_destruction_elContext = Array_destruction_elContext; 
DiiaParser.Object_destructionContext = Object_destructionContext; 
DiiaParser.Object_destruction_elContext = Object_destruction_elContext; 
DiiaParser.AssignContext = AssignContext; 
DiiaParser.Assign_simpleContext = Assign_simpleContext; 
DiiaParser.Assign_defineContext = Assign_defineContext; 
DiiaParser.Assign_complexContext = Assign_complexContext; 
DiiaParser.Assign_complex_leftContext = Assign_complex_leftContext; 
DiiaParser.Assign_complex_rightContext = Assign_complex_rightContext; 
DiiaParser.Assign_array_destructionContext = Assign_array_destructionContext; 
DiiaParser.Assign_object_destructionContext = Assign_object_destructionContext; 
DiiaParser.Assign_symbolContext = Assign_symbolContext; 
DiiaParser.Wait_assignContext = Wait_assignContext; 
DiiaParser.IdentifierContext = IdentifierContext; 
DiiaParser.Extended_identifierContext = Extended_identifierContext; 
DiiaParser.Identifiers_chainContext = Identifiers_chainContext; 
DiiaParser.Type_valueContext = Type_valueContext; 
DiiaParser.Type_value_arrayContext = Type_value_arrayContext; 
DiiaParser.ArgsContext = ArgsContext; 
DiiaParser.ArgContext = ArgContext; 
DiiaParser.Named_argsContext = Named_argsContext; 
DiiaParser.Named_argContext = Named_argContext; 
DiiaParser.ParamsContext = ParamsContext; 
DiiaParser.ParamContext = ParamContext; 
DiiaParser.Param_valueContext = Param_valueContext; 
DiiaParser.BodyContext = BodyContext; 
DiiaParser.Body_element_or_returnContext = Body_element_or_returnContext; 
DiiaParser.Body_elementContext = Body_elementContext; 
DiiaParser.Return_body_lineContext = Return_body_lineContext; 
DiiaParser.Arithmetic_op_mulContext = Arithmetic_op_mulContext; 
DiiaParser.Arithmetic_op_addContext = Arithmetic_op_addContext; 
DiiaParser.Bitwise_opContext = Bitwise_opContext; 
DiiaParser.Test_opContext = Test_opContext; 
DiiaParser.Comparison_opContext = Comparison_opContext; 
DiiaParser.NlContext = NlContext; 
DiiaParser.NlsContext = NlsContext; 
