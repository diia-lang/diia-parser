// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,64,466,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,
1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,
1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,
30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,
35,1,35,1,36,1,36,1,36,1,36,1,37,3,37,349,8,37,1,37,1,37,1,38,1,38,1,38,
1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,
45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,
1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,57,1,57,5,57,397,8,57,
10,57,12,57,400,9,57,1,58,1,58,3,58,404,8,58,1,59,4,59,407,8,59,11,59,12,
59,408,1,60,1,60,1,60,1,60,1,61,1,61,1,61,5,61,418,8,61,10,61,12,61,421,
9,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,5,62,430,8,62,10,62,12,62,433,9,
62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,5,63,443,8,63,10,63,12,63,446,
9,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,
66,3,66,462,8,66,1,67,1,67,1,67,1,444,0,68,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,
111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,0,131,
0,133,0,135,0,1,0,5,2,0,9,9,32,32,2,0,34,34,92,92,2,0,10,10,13,13,9,0,65,
90,95,95,97,122,1028,1028,1030,1031,1040,1103,1108,1108,1110,1111,1168,1169,
9,0,34,34,39,39,48,48,92,92,98,98,102,102,110,110,114,114,116,116,473,0,
1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,
69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,
0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,1,137,1,0,0,0,3,144,1,0,0,0,5,148,
1,0,0,0,7,158,1,0,0,0,9,168,1,0,0,0,11,171,1,0,0,0,13,174,1,0,0,0,15,177,
1,0,0,0,17,180,1,0,0,0,19,184,1,0,0,0,21,189,1,0,0,0,23,196,1,0,0,0,25,202,
1,0,0,0,27,207,1,0,0,0,29,211,1,0,0,0,31,214,1,0,0,0,33,216,1,0,0,0,35,224,
1,0,0,0,37,232,1,0,0,0,39,234,1,0,0,0,41,238,1,0,0,0,43,249,1,0,0,0,45,257,
1,0,0,0,47,264,1,0,0,0,49,271,1,0,0,0,51,276,1,0,0,0,53,283,1,0,0,0,55,285,
1,0,0,0,57,291,1,0,0,0,59,298,1,0,0,0,61,304,1,0,0,0,63,314,1,0,0,0,65,323,
1,0,0,0,67,332,1,0,0,0,69,337,1,0,0,0,71,340,1,0,0,0,73,343,1,0,0,0,75,348,
1,0,0,0,77,352,1,0,0,0,79,355,1,0,0,0,81,358,1,0,0,0,83,360,1,0,0,0,85,362,
1,0,0,0,87,364,1,0,0,0,89,366,1,0,0,0,91,368,1,0,0,0,93,370,1,0,0,0,95,372,
1,0,0,0,97,374,1,0,0,0,99,376,1,0,0,0,101,378,1,0,0,0,103,380,1,0,0,0,105,
382,1,0,0,0,107,384,1,0,0,0,109,386,1,0,0,0,111,389,1,0,0,0,113,392,1,0,
0,0,115,394,1,0,0,0,117,403,1,0,0,0,119,406,1,0,0,0,121,410,1,0,0,0,123,
414,1,0,0,0,125,424,1,0,0,0,127,436,1,0,0,0,129,453,1,0,0,0,131,455,1,0,
0,0,133,461,1,0,0,0,135,463,1,0,0,0,137,138,5,1082,0,0,138,139,5,1110,0,
0,139,140,5,1085,0,0,140,141,5,1077,0,0,141,142,5,1094,0,0,142,143,5,1100,
0,0,143,2,1,0,0,0,144,145,5,1076,0,0,145,146,5,1110,0,0,146,147,5,1103,0,
0,147,4,1,0,0,0,148,149,5,1089,0,0,149,150,5,1090,0,0,150,151,5,1088,0,0,
151,152,5,1091,0,0,152,153,5,1082,0,0,153,154,5,1090,0,0,154,155,5,1091,
0,0,155,156,5,1088,0,0,156,157,5,1072,0,0,157,6,1,0,0,0,158,159,5,1087,0,
0,159,160,5,1077,0,0,160,161,5,1088,0,0,161,162,5,1077,0,0,162,163,5,1073,
0,0,163,164,5,1088,0,0,164,165,5,1072,0,0,165,166,5,1090,0,0,166,167,5,1080,
0,0,167,8,1,0,0,0,168,169,5,61,0,0,169,170,5,61,0,0,170,10,1,0,0,0,171,172,
5,33,0,0,172,173,5,61,0,0,173,12,1,0,0,0,174,175,5,62,0,0,175,176,5,61,0,
0,176,14,1,0,0,0,177,178,5,60,0,0,178,179,5,61,0,0,179,16,1,0,0,0,180,181,
5,1076,0,0,181,182,5,1083,0,0,182,183,5,1103,0,0,183,18,1,0,0,0,184,185,
5,1103,0,0,185,186,5,1082,0,0,186,187,5,1097,0,0,187,188,5,1086,0,0,188,
20,1,0,0,0,189,190,5,1095,0,0,190,191,5,1077,0,0,191,192,5,1082,0,0,192,
193,5,1072,0,0,193,194,5,1090,0,0,194,195,5,1080,0,0,195,22,1,0,0,0,196,
197,5,1074,0,0,197,198,5,1079,0,0,198,199,5,1103,0,0,199,200,5,1090,0,0,
200,201,5,1080,0,0,201,24,1,0,0,0,202,203,5,1076,0,0,203,204,5,1072,0,0,
204,205,5,1090,0,0,205,206,5,1080,0,0,206,26,1,0,0,0,207,208,5,1087,0,0,
208,209,5,1072,0,0,209,210,5,1082,0,0,210,28,1,0,0,0,211,212,5,1103,0,0,
212,213,5,1082,0,0,213,30,1,0,0,0,214,215,5,1108,0,0,215,32,1,0,0,0,216,
217,5,1074,0,0,217,218,5,1077,0,0,218,219,5,1088,0,0,219,220,5,1085,0,0,
220,221,5,1091,0,0,221,222,5,1090,0,0,222,223,5,1080,0,0,223,34,1,0,0,0,
224,225,5,1090,0,0,225,226,5,1088,0,0,226,227,5,1080,0,0,227,228,5,1074,
0,0,228,229,5,1072,0,0,229,230,5,1083,0,0,230,231,5,1072,0,0,231,36,1,0,
0,0,232,233,5,1110,0,0,233,38,1,0,0,0,234,235,5,1072,0,0,235,236,5,1073,
0,0,236,237,5,1086,0,0,237,40,1,0,0,0,238,239,5,1089,0,0,239,240,5,1087,
0,0,240,241,5,1088,0,0,241,242,5,1086,0,0,242,243,5,1073,0,0,243,244,5,1091,
0,0,244,245,5,1074,0,0,245,246,5,1072,0,0,246,247,5,1090,0,0,247,248,5,1080,
0,0,248,42,1,0,0,0,249,250,5,1079,0,0,250,251,5,1083,0,0,251,252,5,1086,
0,0,252,253,5,1074,0,0,253,254,5,1080,0,0,254,255,5,1090,0,0,255,256,5,1080,
0,0,256,44,1,0,0,0,257,258,5,1110,0,0,258,259,5,1085,0,0,259,260,5,1072,
0,0,260,261,5,1082,0,0,261,262,5,1096,0,0,262,263,5,1077,0,0,263,46,1,0,
0,0,264,265,5,1074,0,0,265,266,5,1087,0,0,266,267,5,1072,0,0,267,268,5,1089,
0,0,268,269,5,1090,0,0,269,270,5,1080,0,0,270,48,1,0,0,0,271,272,5,1087,
0,0,272,273,5,1086,0,0,273,274,5,1082,0,0,274,275,5,1080,0,0,275,50,1,0,
0,0,276,277,5,1084,0,0,277,278,5,1086,0,0,278,279,5,1076,0,0,279,280,5,1091,
0,0,280,281,5,1083,0,0,281,282,5,1100,0,0,282,52,1,0,0,0,283,284,5,63,0,
0,284,54,1,0,0,0,285,286,5,1088,0,0,286,287,5,1110,0,0,287,288,5,1074,0,
0,288,289,5,1085,0,0,289,290,5,1086,0,0,290,56,1,0,0,0,291,292,5,1073,0,
0,292,293,5,1110,0,0,293,294,5,1083,0,0,294,295,5,1100,0,0,295,296,5,1096,
0,0,296,297,5,1077,0,0,297,58,1,0,0,0,298,299,5,1084,0,0,299,300,5,1077,
0,0,300,301,5,1085,0,0,301,302,5,1096,0,0,302,303,5,1077,0,0,303,60,1,0,
0,0,304,305,5,1085,0,0,305,306,5,1077,0,0,306,307,5,32,0,0,307,308,5,1073,
0,0,308,309,5,1110,0,0,309,310,5,1083,0,0,310,311,5,1100,0,0,311,312,5,1096,
0,0,312,313,5,1077,0,0,313,62,1,0,0,0,314,315,5,1085,0,0,315,316,5,1077,
0,0,316,317,5,32,0,0,317,318,5,1084,0,0,318,319,5,1077,0,0,319,320,5,1085,
0,0,320,321,5,1096,0,0,321,322,5,1077,0,0,322,64,1,0,0,0,323,324,5,1085,
0,0,324,325,5,1077,0,0,325,326,5,32,0,0,326,327,5,1088,0,0,327,328,5,1110,
0,0,328,329,5,1074,0,0,329,330,5,1085,0,0,330,331,5,1086,0,0,331,66,1,0,
0,0,332,333,5,1085,0,0,333,334,5,1077,0,0,334,335,5,32,0,0,335,336,5,1108,
0,0,336,68,1,0,0,0,337,338,5,1085,0,0,338,339,5,1077,0,0,339,70,1,0,0,0,
340,341,5,46,0,0,341,342,5,42,0,0,342,72,1,0,0,0,343,344,7,0,0,0,344,345,
1,0,0,0,345,346,6,36,0,0,346,74,1,0,0,0,347,349,5,13,0,0,348,347,1,0,0,0,
348,349,1,0,0,0,349,350,1,0,0,0,350,351,5,10,0,0,351,76,1,0,0,0,352,353,
5,45,0,0,353,354,5,45,0,0,354,78,1,0,0,0,355,356,5,43,0,0,356,357,5,43,0,
0,357,80,1,0,0,0,358,359,5,40,0,0,359,82,1,0,0,0,360,361,5,41,0,0,361,84,
1,0,0,0,362,363,5,91,0,0,363,86,1,0,0,0,364,365,5,93,0,0,365,88,1,0,0,0,
366,367,5,44,0,0,367,90,1,0,0,0,368,369,5,61,0,0,369,92,1,0,0,0,370,371,
5,43,0,0,371,94,1,0,0,0,372,373,5,45,0,0,373,96,1,0,0,0,374,375,5,42,0,0,
375,98,1,0,0,0,376,377,5,47,0,0,377,100,1,0,0,0,378,379,5,58,0,0,379,102,
1,0,0,0,380,381,5,46,0,0,381,104,1,0,0,0,382,383,5,33,0,0,383,106,1,0,0,
0,384,385,5,37,0,0,385,108,1,0,0,0,386,387,5,47,0,0,387,388,5,47,0,0,388,
110,1,0,0,0,389,390,5,42,0,0,390,391,5,42,0,0,391,112,1,0,0,0,392,393,5,
94,0,0,393,114,1,0,0,0,394,398,3,131,65,0,395,397,3,133,66,0,396,395,1,0,
0,0,397,400,1,0,0,0,398,396,1,0,0,0,398,399,1,0,0,0,399,116,1,0,0,0,400,
398,1,0,0,0,401,404,3,121,60,0,402,404,3,119,59,0,403,401,1,0,0,0,403,402,
1,0,0,0,404,118,1,0,0,0,405,407,3,129,64,0,406,405,1,0,0,0,407,408,1,0,0,
0,408,406,1,0,0,0,408,409,1,0,0,0,409,120,1,0,0,0,410,411,3,119,59,0,411,
412,5,46,0,0,412,413,3,119,59,0,413,122,1,0,0,0,414,419,5,34,0,0,415,418,
8,1,0,0,416,418,3,135,67,0,417,415,1,0,0,0,417,416,1,0,0,0,418,421,1,0,0,
0,419,417,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,419,1,0,0,0,422,423,
5,34,0,0,423,124,1,0,0,0,424,425,5,59,0,0,425,426,5,59,0,0,426,431,1,0,0,
0,427,430,3,125,62,0,428,430,8,2,0,0,429,427,1,0,0,0,429,428,1,0,0,0,430,
433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,434,1,0,0,0,433,431,1,0,
0,0,434,435,6,62,0,0,435,126,1,0,0,0,436,437,5,59,0,0,437,438,5,45,0,0,438,
439,5,45,0,0,439,444,1,0,0,0,440,443,3,127,63,0,441,443,9,0,0,0,442,440,
1,0,0,0,442,441,1,0,0,0,443,446,1,0,0,0,444,445,1,0,0,0,444,442,1,0,0,0,
445,447,1,0,0,0,446,444,1,0,0,0,447,448,5,45,0,0,448,449,5,45,0,0,449,450,
5,59,0,0,450,451,1,0,0,0,451,452,6,63,0,0,452,128,1,0,0,0,453,454,2,48,57,
0,454,130,1,0,0,0,455,456,7,3,0,0,456,132,1,0,0,0,457,462,3,131,65,0,458,
462,2,48,57,0,459,460,5,700,0,0,460,462,3,131,65,0,461,457,1,0,0,0,461,458,
1,0,0,0,461,459,1,0,0,0,462,134,1,0,0,0,463,464,5,92,0,0,464,465,7,4,0,0,
465,136,1,0,0,0,12,0,348,398,403,408,417,419,429,431,442,444,461,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class DiiaLexer extends antlr4.Lexer {

    static grammarFileName = "DiiaLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", 
                         "'\\u0434\\u0456\\u044F'", "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
                         "'\\u043F\\u0435\\u0440\\u0435\\u0431\\u0440\\u0430\\u0442\\u0438'", 
                         "'=='", "'!='", "'>='", "'<='", "'\\u0434\\u043B\\u044F'", 
                         "'\\u044F\\u043A\\u0449\\u043E'", "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
                         "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0434\\u0430\\u0442\\u0438'", 
                         "'\\u043F\\u0430\\u043A'", "'\\u044F\\u043A'", 
                         "'\\u0454'", "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", 
                         "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", 
                         "'\\u0456'", "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
                         "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", 
                         "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
                         "'\\u0432\\u043F\\u0430\\u0441\\u0442\\u0438'", 
                         "'\\u043F\\u043E\\u043A\\u0438'", "'\\u043C\\u043E\\u0434\\u0443\\u043B\\u044C'", 
                         "'?'", "'\\u0440\\u0456\\u0432\\u043D\\u043E'", 
                         "'\\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", 
                         "'\\u043C\\u0435\\u043D\\u0448\\u0435'", "'\\u043D\\u0435 \\u0431\\u0456\\u043B\\u044C\\u0448\\u0435'", 
                         "'\\u043D\\u0435 \\u043C\\u0435\\u043D\\u0448\\u0435'", 
                         "'\\u043D\\u0435 \\u0440\\u0456\\u0432\\u043D\\u043E'", 
                         "'\\u043D\\u0435 \\u0454'", "'\\u043D\\u0435'", 
                         "'.*'", null, null, "'--'", "'++'", "'('", "')'", 
                         "'['", "']'", "','", "'='", "'+'", "'-'", "'*'", 
                         "'/'", "':'", "'.'", "'!'", "'%'", "'//'", "'**'", 
                         "'^'" ];
	static symbolicNames = [ null, "END", "DEF", "STRUCTURE", "TAKING", "EQ", 
                          "NOT_EQ", "GREATER", "SMALLER", "FOR", "IF", "WAIT", 
                          "TAKE", "GIVE", "PAK", "AS", "IS", "RETURN", "ASYNC", 
                          "AND", "OR", "TRY", "CATCH", "ELSE", "THROW", 
                          "WHILE", "MODULE", "TERNARY", "EQ_WORD", "GR_WORD", 
                          "SM_WORD", "NOT_GR_WORD", "NOT_SM_WORD", "NOT_EQ_WORD", 
                          "NOT_IS_WORD", "NOT_WORD", "STAR", "SKIP_SPACES", 
                          "NL", "DECREMENT", "INCREMENT", "OPEN_PAREN", 
                          "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", "COMMA", 
                          "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", "COLON", 
                          "DOT", "NOT", "PERCENT", "DIVDIV", "POW", "XOR", 
                          "ID", "NUMBER", "INTEGER", "FLOAT", "STRING", 
                          "LINE_COMMENT", "COMMENT" ];
	static ruleNames = [ "END", "DEF", "STRUCTURE", "TAKING", "EQ", "NOT_EQ", 
                      "GREATER", "SMALLER", "FOR", "IF", "WAIT", "TAKE", 
                      "GIVE", "PAK", "AS", "IS", "RETURN", "ASYNC", "AND", 
                      "OR", "TRY", "CATCH", "ELSE", "THROW", "WHILE", "MODULE", 
                      "TERNARY", "EQ_WORD", "GR_WORD", "SM_WORD", "NOT_GR_WORD", 
                      "NOT_SM_WORD", "NOT_EQ_WORD", "NOT_IS_WORD", "NOT_WORD", 
                      "STAR", "SKIP_SPACES", "NL", "DECREMENT", "INCREMENT", 
                      "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", 
                      "COMMA", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
                      "COLON", "DOT", "NOT", "PERCENT", "DIVDIV", "POW", 
                      "XOR", "ID", "NUMBER", "INTEGER", "FLOAT", "STRING", 
                      "LINE_COMMENT", "COMMENT", "DIGIT", "ID_START", "ID_CONTINUE", 
                      "ESCAPE_CHAR" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

DiiaLexer.EOF = antlr4.Token.EOF;
DiiaLexer.END = 1;
DiiaLexer.DEF = 2;
DiiaLexer.STRUCTURE = 3;
DiiaLexer.TAKING = 4;
DiiaLexer.EQ = 5;
DiiaLexer.NOT_EQ = 6;
DiiaLexer.GREATER = 7;
DiiaLexer.SMALLER = 8;
DiiaLexer.FOR = 9;
DiiaLexer.IF = 10;
DiiaLexer.WAIT = 11;
DiiaLexer.TAKE = 12;
DiiaLexer.GIVE = 13;
DiiaLexer.PAK = 14;
DiiaLexer.AS = 15;
DiiaLexer.IS = 16;
DiiaLexer.RETURN = 17;
DiiaLexer.ASYNC = 18;
DiiaLexer.AND = 19;
DiiaLexer.OR = 20;
DiiaLexer.TRY = 21;
DiiaLexer.CATCH = 22;
DiiaLexer.ELSE = 23;
DiiaLexer.THROW = 24;
DiiaLexer.WHILE = 25;
DiiaLexer.MODULE = 26;
DiiaLexer.TERNARY = 27;
DiiaLexer.EQ_WORD = 28;
DiiaLexer.GR_WORD = 29;
DiiaLexer.SM_WORD = 30;
DiiaLexer.NOT_GR_WORD = 31;
DiiaLexer.NOT_SM_WORD = 32;
DiiaLexer.NOT_EQ_WORD = 33;
DiiaLexer.NOT_IS_WORD = 34;
DiiaLexer.NOT_WORD = 35;
DiiaLexer.STAR = 36;
DiiaLexer.SKIP_SPACES = 37;
DiiaLexer.NL = 38;
DiiaLexer.DECREMENT = 39;
DiiaLexer.INCREMENT = 40;
DiiaLexer.OPEN_PAREN = 41;
DiiaLexer.CLOSE_PAREN = 42;
DiiaLexer.OPEN_ARRAY = 43;
DiiaLexer.CLOSE_ARRAY = 44;
DiiaLexer.COMMA = 45;
DiiaLexer.ASSIGN = 46;
DiiaLexer.PLUS = 47;
DiiaLexer.MINUS = 48;
DiiaLexer.MUL = 49;
DiiaLexer.DIV = 50;
DiiaLexer.COLON = 51;
DiiaLexer.DOT = 52;
DiiaLexer.NOT = 53;
DiiaLexer.PERCENT = 54;
DiiaLexer.DIVDIV = 55;
DiiaLexer.POW = 56;
DiiaLexer.XOR = 57;
DiiaLexer.ID = 58;
DiiaLexer.NUMBER = 59;
DiiaLexer.INTEGER = 60;
DiiaLexer.FLOAT = 61;
DiiaLexer.STRING = 62;
DiiaLexer.LINE_COMMENT = 63;
DiiaLexer.COMMENT = 64;



