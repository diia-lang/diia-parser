// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,47,325,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,
1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,
1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,
21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,3,28,253,
8,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,
34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,
1,42,1,42,5,42,285,8,42,10,42,12,42,288,9,42,1,43,1,43,3,43,292,8,43,1,44,
4,44,295,8,44,11,44,12,44,296,1,45,1,45,1,45,1,45,1,46,1,46,1,46,5,46,306,
8,46,10,46,12,46,309,9,46,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,
49,3,49,321,8,49,1,50,1,50,1,50,0,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,
89,45,91,46,93,47,95,0,97,0,99,0,101,0,1,0,4,2,0,9,9,32,32,4,0,10,10,13,
13,34,34,92,92,9,0,65,90,95,95,97,122,1028,1028,1030,1031,1040,1103,1108,
1108,1110,1111,1168,1169,9,0,34,34,39,39,48,48,92,92,98,98,102,102,110,110,
114,114,116,116,328,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,1,103,1,0,0,0,3,107,1,0,0,0,
5,114,1,0,0,0,7,121,1,0,0,0,9,128,1,0,0,0,11,138,1,0,0,0,13,141,1,0,0,0,
15,144,1,0,0,0,17,147,1,0,0,0,19,150,1,0,0,0,21,154,1,0,0,0,23,157,1,0,0,
0,25,163,1,0,0,0,27,167,1,0,0,0,29,172,1,0,0,0,31,179,1,0,0,0,33,185,1,0,
0,0,35,190,1,0,0,0,37,194,1,0,0,0,39,197,1,0,0,0,41,199,1,0,0,0,43,207,1,
0,0,0,45,215,1,0,0,0,47,217,1,0,0,0,49,221,1,0,0,0,51,232,1,0,0,0,53,240,
1,0,0,0,55,247,1,0,0,0,57,252,1,0,0,0,59,256,1,0,0,0,61,258,1,0,0,0,63,260,
1,0,0,0,65,262,1,0,0,0,67,264,1,0,0,0,69,266,1,0,0,0,71,268,1,0,0,0,73,270,
1,0,0,0,75,272,1,0,0,0,77,274,1,0,0,0,79,276,1,0,0,0,81,278,1,0,0,0,83,280,
1,0,0,0,85,282,1,0,0,0,87,291,1,0,0,0,89,294,1,0,0,0,91,298,1,0,0,0,93,302,
1,0,0,0,95,312,1,0,0,0,97,314,1,0,0,0,99,320,1,0,0,0,101,322,1,0,0,0,103,
104,5,1076,0,0,104,105,5,1110,0,0,105,106,5,1103,0,0,106,2,1,0,0,0,107,108,
5,1082,0,0,108,109,5,1110,0,0,109,110,5,1085,0,0,110,111,5,1077,0,0,111,
112,5,1094,0,0,112,113,5,1100,0,0,113,4,1,0,0,0,114,115,5,1082,0,0,115,116,
5,1086,0,0,116,117,5,1078,0,0,117,118,5,1085,0,0,118,119,5,1110,0,0,119,
120,5,1081,0,0,120,6,1,0,0,0,121,122,5,1073,0,0,122,123,5,1077,0,0,123,124,
5,1088,0,0,124,125,5,1091,0,0,125,126,5,1095,0,0,126,127,5,1080,0,0,127,
8,1,0,0,0,128,129,5,1089,0,0,129,130,5,1090,0,0,130,131,5,1088,0,0,131,132,
5,1091,0,0,132,133,5,1082,0,0,133,134,5,1090,0,0,134,135,5,1091,0,0,135,
136,5,1088,0,0,136,137,5,1072,0,0,137,10,1,0,0,0,138,139,5,61,0,0,139,140,
5,61,0,0,140,12,1,0,0,0,141,142,5,33,0,0,142,143,5,61,0,0,143,14,1,0,0,0,
144,145,5,62,0,0,145,146,5,61,0,0,146,16,1,0,0,0,147,148,5,60,0,0,148,149,
5,61,0,0,149,18,1,0,0,0,150,151,5,1090,0,0,151,152,5,1072,0,0,152,153,5,
1082,0,0,153,20,1,0,0,0,154,155,5,1085,0,0,155,156,5,1110,0,0,156,22,1,0,
0,0,157,158,5,1087,0,0,158,159,5,1091,0,0,159,160,5,1089,0,0,160,161,5,1090,
0,0,161,162,5,1086,0,0,162,24,1,0,0,0,163,164,5,1076,0,0,164,165,5,1083,
0,0,165,166,5,1103,0,0,166,26,1,0,0,0,167,168,5,1103,0,0,168,169,5,1082,
0,0,169,170,5,1097,0,0,170,171,5,1086,0,0,171,28,1,0,0,0,172,173,5,1095,
0,0,173,174,5,1077,0,0,174,175,5,1082,0,0,175,176,5,1072,0,0,176,177,5,1090,
0,0,177,178,5,1080,0,0,178,30,1,0,0,0,179,180,5,1074,0,0,180,181,5,1079,
0,0,181,182,5,1103,0,0,182,183,5,1090,0,0,183,184,5,1080,0,0,184,32,1,0,
0,0,185,186,5,1076,0,0,186,187,5,1072,0,0,187,188,5,1090,0,0,188,189,5,1080,
0,0,189,34,1,0,0,0,190,191,5,1087,0,0,191,192,5,1072,0,0,192,193,5,1082,
0,0,193,36,1,0,0,0,194,195,5,1103,0,0,195,196,5,1082,0,0,196,38,1,0,0,0,
197,198,5,1108,0,0,198,40,1,0,0,0,199,200,5,1074,0,0,200,201,5,1077,0,0,
201,202,5,1088,0,0,202,203,5,1085,0,0,203,204,5,1091,0,0,204,205,5,1090,
0,0,205,206,5,1080,0,0,206,42,1,0,0,0,207,208,5,1090,0,0,208,209,5,1088,
0,0,209,210,5,1080,0,0,210,211,5,1074,0,0,211,212,5,1072,0,0,212,213,5,1083,
0,0,213,214,5,1072,0,0,214,44,1,0,0,0,215,216,5,1110,0,0,216,46,1,0,0,0,
217,218,5,1072,0,0,218,219,5,1073,0,0,219,220,5,1086,0,0,220,48,1,0,0,0,
221,222,5,1089,0,0,222,223,5,1087,0,0,223,224,5,1088,0,0,224,225,5,1086,
0,0,225,226,5,1073,0,0,226,227,5,1091,0,0,227,228,5,1074,0,0,228,229,5,1072,
0,0,229,230,5,1090,0,0,230,231,5,1080,0,0,231,50,1,0,0,0,232,233,5,1079,
0,0,233,234,5,1083,0,0,234,235,5,1086,0,0,235,236,5,1074,0,0,236,237,5,1080,
0,0,237,238,5,1090,0,0,238,239,5,1080,0,0,239,52,1,0,0,0,240,241,5,1110,
0,0,241,242,5,1085,0,0,242,243,5,1072,0,0,243,244,5,1082,0,0,244,245,5,1096,
0,0,245,246,5,1077,0,0,246,54,1,0,0,0,247,248,7,0,0,0,248,249,1,0,0,0,249,
250,6,27,0,0,250,56,1,0,0,0,251,253,5,13,0,0,252,251,1,0,0,0,252,253,1,0,
0,0,253,254,1,0,0,0,254,255,5,10,0,0,255,58,1,0,0,0,256,257,5,40,0,0,257,
60,1,0,0,0,258,259,5,41,0,0,259,62,1,0,0,0,260,261,5,91,0,0,261,64,1,0,0,
0,262,263,5,93,0,0,263,66,1,0,0,0,264,265,5,44,0,0,265,68,1,0,0,0,266,267,
5,61,0,0,267,70,1,0,0,0,268,269,5,43,0,0,269,72,1,0,0,0,270,271,5,45,0,0,
271,74,1,0,0,0,272,273,5,42,0,0,273,76,1,0,0,0,274,275,5,47,0,0,275,78,1,
0,0,0,276,277,5,58,0,0,277,80,1,0,0,0,278,279,5,46,0,0,279,82,1,0,0,0,280,
281,5,33,0,0,281,84,1,0,0,0,282,286,3,97,48,0,283,285,3,99,49,0,284,283,
1,0,0,0,285,288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,86,1,0,0,0,288,
286,1,0,0,0,289,292,3,91,45,0,290,292,3,89,44,0,291,289,1,0,0,0,291,290,
1,0,0,0,292,88,1,0,0,0,293,295,3,95,47,0,294,293,1,0,0,0,295,296,1,0,0,0,
296,294,1,0,0,0,296,297,1,0,0,0,297,90,1,0,0,0,298,299,3,89,44,0,299,300,
5,46,0,0,300,301,3,89,44,0,301,92,1,0,0,0,302,307,5,34,0,0,303,306,8,1,0,
0,304,306,3,101,50,0,305,303,1,0,0,0,305,304,1,0,0,0,306,309,1,0,0,0,307,
305,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,307,1,0,0,0,310,311,5,34,
0,0,311,94,1,0,0,0,312,313,2,48,57,0,313,96,1,0,0,0,314,315,7,2,0,0,315,
98,1,0,0,0,316,321,3,97,48,0,317,321,2,48,57,0,318,319,5,39,0,0,319,321,
3,97,48,0,320,316,1,0,0,0,320,317,1,0,0,0,320,318,1,0,0,0,321,100,1,0,0,
0,322,323,5,92,0,0,323,324,7,3,0,0,324,102,1,0,0,0,8,0,252,286,291,296,305,
307,320,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class DiiaLexer extends antlr4.Lexer {

    static grammarFileName = "DiiaLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\u0434\\u0456\\u044F'", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", 
                         "'\\u043A\\u043E\\u0436\\u043D\\u0456\\u0439'", 
                         "'\\u0431\\u0435\\u0440\\u0443\\u0447\\u0438'", 
                         "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
                         "'=='", "'!='", "'>='", "'<='", "'\\u0442\\u0430\\u043A'", 
                         "'\\u043D\\u0456'", "'\\u043F\\u0443\\u0441\\u0442\\u043E'", 
                         "'\\u0434\\u043B\\u044F'", "'\\u044F\\u043A\\u0449\\u043E'", 
                         "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
                         "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0434\\u0430\\u0442\\u0438'", 
                         "'\\u043F\\u0430\\u043A'", "'\\u044F\\u043A'", 
                         "'\\u0454'", "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", 
                         "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", 
                         "'\\u0456'", "'\\u0430\\u0431\\u043E'", "'\\u0441\\u043F\\u0440\\u043E\\u0431\\u0443\\u0432\\u0430\\u0442\\u0438'", 
                         "'\\u0437\\u043B\\u043E\\u0432\\u0438\\u0442\\u0438'", 
                         "'\\u0456\\u043D\\u0430\\u043A\\u0448\\u0435'", 
                         null, null, "'('", "')'", "'['", "']'", "','", 
                         "'='", "'+'", "'-'", "'*'", "'/'", "':'", "'.'", 
                         "'!'" ];
	static symbolicNames = [ null, "DEF", "END", "EACH", "TAKING", "STRUCTURE", 
                          "EQ", "NOT_EQ", "GREATER", "SMALLER", "YES", "NO", 
                          "NONE", "FOR", "IF", "WAIT", "TAKE", "GIVE", "PAK", 
                          "AS", "IS", "RETURN", "ASYNC", "AND", "OR", "TRY", 
                          "CATCH", "ELSE", "SKIP_SPACES", "NL", "OPEN_PAREN", 
                          "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", "COMMA", 
                          "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", "COLON", 
                          "DOT", "NOT", "ID", "NUMBER", "INTEGER", "FLOAT", 
                          "STRING" ];
	static ruleNames = [ "DEF", "END", "EACH", "TAKING", "STRUCTURE", "EQ", 
                      "NOT_EQ", "GREATER", "SMALLER", "YES", "NO", "NONE", 
                      "FOR", "IF", "WAIT", "TAKE", "GIVE", "PAK", "AS", 
                      "IS", "RETURN", "ASYNC", "AND", "OR", "TRY", "CATCH", 
                      "ELSE", "SKIP_SPACES", "NL", "OPEN_PAREN", "CLOSE_PAREN", 
                      "OPEN_ARRAY", "CLOSE_ARRAY", "COMMA", "ASSIGN", "PLUS", 
                      "MINUS", "MUL", "DIV", "COLON", "DOT", "NOT", "ID", 
                      "NUMBER", "INTEGER", "FLOAT", "STRING", "DIGIT", "ID_START", 
                      "ID_CONTINUE", "ESCAPE_CHAR" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

DiiaLexer.EOF = antlr4.Token.EOF;
DiiaLexer.DEF = 1;
DiiaLexer.END = 2;
DiiaLexer.EACH = 3;
DiiaLexer.TAKING = 4;
DiiaLexer.STRUCTURE = 5;
DiiaLexer.EQ = 6;
DiiaLexer.NOT_EQ = 7;
DiiaLexer.GREATER = 8;
DiiaLexer.SMALLER = 9;
DiiaLexer.YES = 10;
DiiaLexer.NO = 11;
DiiaLexer.NONE = 12;
DiiaLexer.FOR = 13;
DiiaLexer.IF = 14;
DiiaLexer.WAIT = 15;
DiiaLexer.TAKE = 16;
DiiaLexer.GIVE = 17;
DiiaLexer.PAK = 18;
DiiaLexer.AS = 19;
DiiaLexer.IS = 20;
DiiaLexer.RETURN = 21;
DiiaLexer.ASYNC = 22;
DiiaLexer.AND = 23;
DiiaLexer.OR = 24;
DiiaLexer.TRY = 25;
DiiaLexer.CATCH = 26;
DiiaLexer.ELSE = 27;
DiiaLexer.SKIP_SPACES = 28;
DiiaLexer.NL = 29;
DiiaLexer.OPEN_PAREN = 30;
DiiaLexer.CLOSE_PAREN = 31;
DiiaLexer.OPEN_ARRAY = 32;
DiiaLexer.CLOSE_ARRAY = 33;
DiiaLexer.COMMA = 34;
DiiaLexer.ASSIGN = 35;
DiiaLexer.PLUS = 36;
DiiaLexer.MINUS = 37;
DiiaLexer.MUL = 38;
DiiaLexer.DIV = 39;
DiiaLexer.COLON = 40;
DiiaLexer.DOT = 41;
DiiaLexer.NOT = 42;
DiiaLexer.ID = 43;
DiiaLexer.NUMBER = 44;
DiiaLexer.INTEGER = 45;
DiiaLexer.FLOAT = 46;
DiiaLexer.STRING = 47;



