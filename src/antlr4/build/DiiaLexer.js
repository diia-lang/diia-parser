// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,35,229,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,
1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,
1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,3,16,161,8,16,1,16,1,16,1,17,1,17,
1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,
25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,5,30,193,8,30,
10,30,12,30,196,9,30,1,31,1,31,3,31,200,8,31,1,32,4,32,203,8,32,11,32,12,
32,204,1,33,1,33,1,33,1,33,1,34,1,34,5,34,213,8,34,10,34,12,34,216,9,34,
1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,3,37,226,8,37,1,38,1,38,1,214,0,
39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,0,73,0,75,0,77,
0,1,0,3,2,0,9,9,32,32,9,0,65,90,95,95,97,122,1028,1028,1030,1031,1040,1103,
1108,1108,1110,1111,1168,1169,2,0,39,39,48,57,230,0,1,1,0,0,0,0,3,1,0,0,
0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,79,1,0,
0,0,3,83,1,0,0,0,5,90,1,0,0,0,7,97,1,0,0,0,9,104,1,0,0,0,11,114,1,0,0,0,
13,117,1,0,0,0,15,120,1,0,0,0,17,123,1,0,0,0,19,126,1,0,0,0,21,130,1,0,0,
0,23,133,1,0,0,0,25,139,1,0,0,0,27,143,1,0,0,0,29,148,1,0,0,0,31,155,1,0,
0,0,33,160,1,0,0,0,35,164,1,0,0,0,37,166,1,0,0,0,39,168,1,0,0,0,41,170,1,
0,0,0,43,172,1,0,0,0,45,174,1,0,0,0,47,176,1,0,0,0,49,178,1,0,0,0,51,180,
1,0,0,0,53,182,1,0,0,0,55,184,1,0,0,0,57,186,1,0,0,0,59,188,1,0,0,0,61,190,
1,0,0,0,63,199,1,0,0,0,65,202,1,0,0,0,67,206,1,0,0,0,69,210,1,0,0,0,71,219,
1,0,0,0,73,221,1,0,0,0,75,225,1,0,0,0,77,227,1,0,0,0,79,80,5,1076,0,0,80,
81,5,1110,0,0,81,82,5,1103,0,0,82,2,1,0,0,0,83,84,5,1082,0,0,84,85,5,1110,
0,0,85,86,5,1085,0,0,86,87,5,1077,0,0,87,88,5,1094,0,0,88,89,5,1100,0,0,
89,4,1,0,0,0,90,91,5,1082,0,0,91,92,5,1086,0,0,92,93,5,1078,0,0,93,94,5,
1085,0,0,94,95,5,1110,0,0,95,96,5,1081,0,0,96,6,1,0,0,0,97,98,5,1073,0,0,
98,99,5,1077,0,0,99,100,5,1088,0,0,100,101,5,1091,0,0,101,102,5,1095,0,0,
102,103,5,1080,0,0,103,8,1,0,0,0,104,105,5,1089,0,0,105,106,5,1090,0,0,106,
107,5,1088,0,0,107,108,5,1091,0,0,108,109,5,1082,0,0,109,110,5,1090,0,0,
110,111,5,1091,0,0,111,112,5,1088,0,0,112,113,5,1072,0,0,113,10,1,0,0,0,
114,115,5,61,0,0,115,116,5,61,0,0,116,12,1,0,0,0,117,118,5,33,0,0,118,119,
5,61,0,0,119,14,1,0,0,0,120,121,5,62,0,0,121,122,5,61,0,0,122,16,1,0,0,0,
123,124,5,60,0,0,124,125,5,61,0,0,125,18,1,0,0,0,126,127,5,1090,0,0,127,
128,5,1072,0,0,128,129,5,1082,0,0,129,20,1,0,0,0,130,131,5,1085,0,0,131,
132,5,1110,0,0,132,22,1,0,0,0,133,134,5,1087,0,0,134,135,5,1091,0,0,135,
136,5,1089,0,0,136,137,5,1090,0,0,137,138,5,1086,0,0,138,24,1,0,0,0,139,
140,5,1076,0,0,140,141,5,1083,0,0,141,142,5,1103,0,0,142,26,1,0,0,0,143,
144,5,1103,0,0,144,145,5,1082,0,0,145,146,5,1097,0,0,146,147,5,1086,0,0,
147,28,1,0,0,0,148,149,5,1095,0,0,149,150,5,1077,0,0,150,151,5,1082,0,0,
151,152,5,1072,0,0,152,153,5,1090,0,0,153,154,5,1080,0,0,154,30,1,0,0,0,
155,156,7,0,0,0,156,157,1,0,0,0,157,158,6,15,0,0,158,32,1,0,0,0,159,161,
5,13,0,0,160,159,1,0,0,0,160,161,1,0,0,0,161,162,1,0,0,0,162,163,5,10,0,
0,163,34,1,0,0,0,164,165,5,40,0,0,165,36,1,0,0,0,166,167,5,41,0,0,167,38,
1,0,0,0,168,169,5,91,0,0,169,40,1,0,0,0,170,171,5,93,0,0,171,42,1,0,0,0,
172,173,5,44,0,0,173,44,1,0,0,0,174,175,5,61,0,0,175,46,1,0,0,0,176,177,
5,43,0,0,177,48,1,0,0,0,178,179,5,45,0,0,179,50,1,0,0,0,180,181,5,42,0,0,
181,52,1,0,0,0,182,183,5,47,0,0,183,54,1,0,0,0,184,185,5,58,0,0,185,56,1,
0,0,0,186,187,5,46,0,0,187,58,1,0,0,0,188,189,5,33,0,0,189,60,1,0,0,0,190,
194,3,73,36,0,191,193,3,75,37,0,192,191,1,0,0,0,193,196,1,0,0,0,194,192,
1,0,0,0,194,195,1,0,0,0,195,62,1,0,0,0,196,194,1,0,0,0,197,200,3,67,33,0,
198,200,3,65,32,0,199,197,1,0,0,0,199,198,1,0,0,0,200,64,1,0,0,0,201,203,
3,71,35,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,
0,205,66,1,0,0,0,206,207,3,65,32,0,207,208,5,46,0,0,208,209,3,65,32,0,209,
68,1,0,0,0,210,214,5,34,0,0,211,213,3,77,38,0,212,211,1,0,0,0,213,216,1,
0,0,0,214,215,1,0,0,0,214,212,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,
218,5,34,0,0,218,70,1,0,0,0,219,220,2,48,57,0,220,72,1,0,0,0,221,222,7,1,
0,0,222,74,1,0,0,0,223,226,3,73,36,0,224,226,7,2,0,0,225,223,1,0,0,0,225,
224,1,0,0,0,226,76,1,0,0,0,227,228,9,0,0,0,228,78,1,0,0,0,7,0,160,194,199,
204,214,225,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class DiiaLexer extends antlr4.Lexer {

    static grammarFileName = "DiiaLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\u0434\\u0456\\u044F'", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", 
                         "'\\u043A\\u043E\\u0436\\u043D\\u0456\\u0439'", 
                         "'\\u0431\\u0435\\u0440\\u0443\\u0447\\u0438'", 
                         "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
                         "'=='", "'!='", "'>='", "'<='", "'\\u0442\\u0430\\u043A'", 
                         "'\\u043D\\u0456'", "'\\u043F\\u0443\\u0441\\u0442\\u043E'", 
                         "'\\u0434\\u043B\\u044F'", "'\\u044F\\u043A\\u0449\\u043E'", 
                         "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
                         null, null, "'('", "')'", "'['", "']'", "','", 
                         "'='", "'+'", "'-'", "'*'", "'/'", "':'", "'.'", 
                         "'!'" ];
	static symbolicNames = [ null, "DEF", "END", "EACH", "TAKING", "STRUCTURE", 
                          "EQ", "NOT_EQ", "GREATER", "SMALLER", "YES", "NO", 
                          "NONE", "FOR", "IF", "WAIT", "SKIP_SPACES", "NL", 
                          "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", 
                          "COMMA", "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", 
                          "COLON", "DOT", "NOT", "NAME", "NUMBER", "INTEGER", 
                          "FLOAT", "STRING" ];
	static ruleNames = [ "DEF", "END", "EACH", "TAKING", "STRUCTURE", "EQ", 
                      "NOT_EQ", "GREATER", "SMALLER", "YES", "NO", "NONE", 
                      "FOR", "IF", "WAIT", "SKIP_SPACES", "NL", "OPEN_PAREN", 
                      "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", "COMMA", 
                      "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", "COLON", 
                      "DOT", "NOT", "NAME", "NUMBER", "INTEGER", "FLOAT", 
                      "STRING", "DIGIT", "ID_START", "ID_CONTINUE", "STRING_SEQ" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

DiiaLexer.EOF = antlr4.Token.EOF;
DiiaLexer.DEF = 1;
DiiaLexer.END = 2;
DiiaLexer.EACH = 3;
DiiaLexer.TAKING = 4;
DiiaLexer.STRUCTURE = 5;
DiiaLexer.EQ = 6;
DiiaLexer.NOT_EQ = 7;
DiiaLexer.GREATER = 8;
DiiaLexer.SMALLER = 9;
DiiaLexer.YES = 10;
DiiaLexer.NO = 11;
DiiaLexer.NONE = 12;
DiiaLexer.FOR = 13;
DiiaLexer.IF = 14;
DiiaLexer.WAIT = 15;
DiiaLexer.SKIP_SPACES = 16;
DiiaLexer.NL = 17;
DiiaLexer.OPEN_PAREN = 18;
DiiaLexer.CLOSE_PAREN = 19;
DiiaLexer.OPEN_ARRAY = 20;
DiiaLexer.CLOSE_ARRAY = 21;
DiiaLexer.COMMA = 22;
DiiaLexer.ASSIGN = 23;
DiiaLexer.PLUS = 24;
DiiaLexer.MINUS = 25;
DiiaLexer.MUL = 26;
DiiaLexer.DIV = 27;
DiiaLexer.COLON = 28;
DiiaLexer.DOT = 29;
DiiaLexer.NOT = 30;
DiiaLexer.NAME = 31;
DiiaLexer.NUMBER = 32;
DiiaLexer.INTEGER = 33;
DiiaLexer.FLOAT = 34;
DiiaLexer.STRING = 35;



