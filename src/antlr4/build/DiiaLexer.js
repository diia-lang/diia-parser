// Generated from java-escape by ANTLR 4.11.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,42,279,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,
7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,
17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,3,
23,211,8,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,
36,1,36,1,37,1,37,5,37,243,8,37,10,37,12,37,246,9,37,1,38,1,38,3,38,250,
8,38,1,39,4,39,253,8,39,11,39,12,39,254,1,40,1,40,1,40,1,40,1,41,1,41,5,
41,263,8,41,10,41,12,41,266,9,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,
3,44,276,8,44,1,45,1,45,1,264,0,46,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,
67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,0,87,0,89,0,91,
0,1,0,3,2,0,9,9,32,32,9,0,65,90,95,95,97,122,1028,1028,1030,1031,1040,1103,
1108,1108,1110,1111,1168,1169,2,0,39,39,48,57,280,0,1,1,0,0,0,0,3,1,0,0,
0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,
61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
1,0,0,0,1,93,1,0,0,0,3,97,1,0,0,0,5,104,1,0,0,0,7,111,1,0,0,0,9,118,1,0,
0,0,11,128,1,0,0,0,13,131,1,0,0,0,15,134,1,0,0,0,17,137,1,0,0,0,19,140,1,
0,0,0,21,144,1,0,0,0,23,147,1,0,0,0,25,153,1,0,0,0,27,157,1,0,0,0,29,162,
1,0,0,0,31,169,1,0,0,0,33,175,1,0,0,0,35,180,1,0,0,0,37,184,1,0,0,0,39,187,
1,0,0,0,41,189,1,0,0,0,43,197,1,0,0,0,45,205,1,0,0,0,47,210,1,0,0,0,49,214,
1,0,0,0,51,216,1,0,0,0,53,218,1,0,0,0,55,220,1,0,0,0,57,222,1,0,0,0,59,224,
1,0,0,0,61,226,1,0,0,0,63,228,1,0,0,0,65,230,1,0,0,0,67,232,1,0,0,0,69,234,
1,0,0,0,71,236,1,0,0,0,73,238,1,0,0,0,75,240,1,0,0,0,77,249,1,0,0,0,79,252,
1,0,0,0,81,256,1,0,0,0,83,260,1,0,0,0,85,269,1,0,0,0,87,271,1,0,0,0,89,275,
1,0,0,0,91,277,1,0,0,0,93,94,5,1076,0,0,94,95,5,1110,0,0,95,96,5,1103,0,
0,96,2,1,0,0,0,97,98,5,1082,0,0,98,99,5,1110,0,0,99,100,5,1085,0,0,100,101,
5,1077,0,0,101,102,5,1094,0,0,102,103,5,1100,0,0,103,4,1,0,0,0,104,105,5,
1082,0,0,105,106,5,1086,0,0,106,107,5,1078,0,0,107,108,5,1085,0,0,108,109,
5,1110,0,0,109,110,5,1081,0,0,110,6,1,0,0,0,111,112,5,1073,0,0,112,113,5,
1077,0,0,113,114,5,1088,0,0,114,115,5,1091,0,0,115,116,5,1095,0,0,116,117,
5,1080,0,0,117,8,1,0,0,0,118,119,5,1089,0,0,119,120,5,1090,0,0,120,121,5,
1088,0,0,121,122,5,1091,0,0,122,123,5,1082,0,0,123,124,5,1090,0,0,124,125,
5,1091,0,0,125,126,5,1088,0,0,126,127,5,1072,0,0,127,10,1,0,0,0,128,129,
5,61,0,0,129,130,5,61,0,0,130,12,1,0,0,0,131,132,5,33,0,0,132,133,5,61,0,
0,133,14,1,0,0,0,134,135,5,62,0,0,135,136,5,61,0,0,136,16,1,0,0,0,137,138,
5,60,0,0,138,139,5,61,0,0,139,18,1,0,0,0,140,141,5,1090,0,0,141,142,5,1072,
0,0,142,143,5,1082,0,0,143,20,1,0,0,0,144,145,5,1085,0,0,145,146,5,1110,
0,0,146,22,1,0,0,0,147,148,5,1087,0,0,148,149,5,1091,0,0,149,150,5,1089,
0,0,150,151,5,1090,0,0,151,152,5,1086,0,0,152,24,1,0,0,0,153,154,5,1076,
0,0,154,155,5,1083,0,0,155,156,5,1103,0,0,156,26,1,0,0,0,157,158,5,1103,
0,0,158,159,5,1082,0,0,159,160,5,1097,0,0,160,161,5,1086,0,0,161,28,1,0,
0,0,162,163,5,1095,0,0,163,164,5,1077,0,0,164,165,5,1082,0,0,165,166,5,1072,
0,0,166,167,5,1090,0,0,167,168,5,1080,0,0,168,30,1,0,0,0,169,170,5,1074,
0,0,170,171,5,1079,0,0,171,172,5,1103,0,0,172,173,5,1090,0,0,173,174,5,1080,
0,0,174,32,1,0,0,0,175,176,5,1076,0,0,176,177,5,1072,0,0,177,178,5,1090,
0,0,178,179,5,1080,0,0,179,34,1,0,0,0,180,181,5,1087,0,0,181,182,5,1072,
0,0,182,183,5,1082,0,0,183,36,1,0,0,0,184,185,5,1103,0,0,185,186,5,1082,
0,0,186,38,1,0,0,0,187,188,5,1108,0,0,188,40,1,0,0,0,189,190,5,1074,0,0,
190,191,5,1077,0,0,191,192,5,1088,0,0,192,193,5,1085,0,0,193,194,5,1091,
0,0,194,195,5,1090,0,0,195,196,5,1080,0,0,196,42,1,0,0,0,197,198,5,1090,
0,0,198,199,5,1088,0,0,199,200,5,1080,0,0,200,201,5,1074,0,0,201,202,5,1072,
0,0,202,203,5,1083,0,0,203,204,5,1072,0,0,204,44,1,0,0,0,205,206,7,0,0,0,
206,207,1,0,0,0,207,208,6,22,0,0,208,46,1,0,0,0,209,211,5,13,0,0,210,209,
1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,5,10,0,0,213,48,1,0,0,0,
214,215,5,40,0,0,215,50,1,0,0,0,216,217,5,41,0,0,217,52,1,0,0,0,218,219,
5,91,0,0,219,54,1,0,0,0,220,221,5,93,0,0,221,56,1,0,0,0,222,223,5,44,0,0,
223,58,1,0,0,0,224,225,5,61,0,0,225,60,1,0,0,0,226,227,5,43,0,0,227,62,1,
0,0,0,228,229,5,45,0,0,229,64,1,0,0,0,230,231,5,42,0,0,231,66,1,0,0,0,232,
233,5,47,0,0,233,68,1,0,0,0,234,235,5,58,0,0,235,70,1,0,0,0,236,237,5,46,
0,0,237,72,1,0,0,0,238,239,5,33,0,0,239,74,1,0,0,0,240,244,3,87,43,0,241,
243,3,89,44,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,
0,0,0,245,76,1,0,0,0,246,244,1,0,0,0,247,250,3,81,40,0,248,250,3,79,39,0,
249,247,1,0,0,0,249,248,1,0,0,0,250,78,1,0,0,0,251,253,3,85,42,0,252,251,
1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,255,1,0,0,0,255,80,1,0,0,0,256,
257,3,79,39,0,257,258,5,46,0,0,258,259,3,79,39,0,259,82,1,0,0,0,260,264,
5,34,0,0,261,263,3,91,45,0,262,261,1,0,0,0,263,266,1,0,0,0,264,265,1,0,0,
0,264,262,1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,268,5,34,0,0,268,84,
1,0,0,0,269,270,2,48,57,0,270,86,1,0,0,0,271,272,7,1,0,0,272,88,1,0,0,0,
273,276,3,87,43,0,274,276,7,2,0,0,275,273,1,0,0,0,275,274,1,0,0,0,276,90,
1,0,0,0,277,278,9,0,0,0,278,92,1,0,0,0,7,0,210,244,249,254,264,275,1,6,0,
0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class DiiaLexer extends antlr4.Lexer {

    static grammarFileName = "DiiaLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'\\u0434\\u0456\\u044F'", "'\\u043A\\u0456\\u043D\\u0435\\u0446\\u044C'", 
                         "'\\u043A\\u043E\\u0436\\u043D\\u0456\\u0439'", 
                         "'\\u0431\\u0435\\u0440\\u0443\\u0447\\u0438'", 
                         "'\\u0441\\u0442\\u0440\\u0443\\u043A\\u0442\\u0443\\u0440\\u0430'", 
                         "'=='", "'!='", "'>='", "'<='", "'\\u0442\\u0430\\u043A'", 
                         "'\\u043D\\u0456'", "'\\u043F\\u0443\\u0441\\u0442\\u043E'", 
                         "'\\u0434\\u043B\\u044F'", "'\\u044F\\u043A\\u0449\\u043E'", 
                         "'\\u0447\\u0435\\u043A\\u0430\\u0442\\u0438'", 
                         "'\\u0432\\u0437\\u044F\\u0442\\u0438'", "'\\u0434\\u0430\\u0442\\u0438'", 
                         "'\\u043F\\u0430\\u043A'", "'\\u044F\\u043A'", 
                         "'\\u0454'", "'\\u0432\\u0435\\u0440\\u043D\\u0443\\u0442\\u0438'", 
                         "'\\u0442\\u0440\\u0438\\u0432\\u0430\\u043B\\u0430'", 
                         null, null, "'('", "')'", "'['", "']'", "','", 
                         "'='", "'+'", "'-'", "'*'", "'/'", "':'", "'.'", 
                         "'!'" ];
	static symbolicNames = [ null, "DEF", "END", "EACH", "TAKING", "STRUCTURE", 
                          "EQ", "NOT_EQ", "GREATER", "SMALLER", "YES", "NO", 
                          "NONE", "FOR", "IF", "WAIT", "TAKE", "GIVE", "PAK", 
                          "AS", "IS", "RETURN", "ASYNC", "SKIP_SPACES", 
                          "NL", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_ARRAY", 
                          "CLOSE_ARRAY", "COMMA", "ASSIGN", "PLUS", "MINUS", 
                          "MUL", "DIV", "COLON", "DOT", "NOT", "NAME", "NUMBER", 
                          "INTEGER", "FLOAT", "STRING" ];
	static ruleNames = [ "DEF", "END", "EACH", "TAKING", "STRUCTURE", "EQ", 
                      "NOT_EQ", "GREATER", "SMALLER", "YES", "NO", "NONE", 
                      "FOR", "IF", "WAIT", "TAKE", "GIVE", "PAK", "AS", 
                      "IS", "RETURN", "ASYNC", "SKIP_SPACES", "NL", "OPEN_PAREN", 
                      "CLOSE_PAREN", "OPEN_ARRAY", "CLOSE_ARRAY", "COMMA", 
                      "ASSIGN", "PLUS", "MINUS", "MUL", "DIV", "COLON", 
                      "DOT", "NOT", "NAME", "NUMBER", "INTEGER", "FLOAT", 
                      "STRING", "DIGIT", "ID_START", "ID_CONTINUE", "STRING_SEQ" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

DiiaLexer.EOF = antlr4.Token.EOF;
DiiaLexer.DEF = 1;
DiiaLexer.END = 2;
DiiaLexer.EACH = 3;
DiiaLexer.TAKING = 4;
DiiaLexer.STRUCTURE = 5;
DiiaLexer.EQ = 6;
DiiaLexer.NOT_EQ = 7;
DiiaLexer.GREATER = 8;
DiiaLexer.SMALLER = 9;
DiiaLexer.YES = 10;
DiiaLexer.NO = 11;
DiiaLexer.NONE = 12;
DiiaLexer.FOR = 13;
DiiaLexer.IF = 14;
DiiaLexer.WAIT = 15;
DiiaLexer.TAKE = 16;
DiiaLexer.GIVE = 17;
DiiaLexer.PAK = 18;
DiiaLexer.AS = 19;
DiiaLexer.IS = 20;
DiiaLexer.RETURN = 21;
DiiaLexer.ASYNC = 22;
DiiaLexer.SKIP_SPACES = 23;
DiiaLexer.NL = 24;
DiiaLexer.OPEN_PAREN = 25;
DiiaLexer.CLOSE_PAREN = 26;
DiiaLexer.OPEN_ARRAY = 27;
DiiaLexer.CLOSE_ARRAY = 28;
DiiaLexer.COMMA = 29;
DiiaLexer.ASSIGN = 30;
DiiaLexer.PLUS = 31;
DiiaLexer.MINUS = 32;
DiiaLexer.MUL = 33;
DiiaLexer.DIV = 34;
DiiaLexer.COLON = 35;
DiiaLexer.DOT = 36;
DiiaLexer.NOT = 37;
DiiaLexer.NAME = 38;
DiiaLexer.NUMBER = 39;
DiiaLexer.INTEGER = 40;
DiiaLexer.FLOAT = 41;
DiiaLexer.STRING = 42;



